%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Qdist_20Ne_9092Zr.pdf
%%Creator: Adobe Acrobat 9.5.2
%%For: yusa
%%CreationDate: 12/10/30, 14:07
%%BoundingBox: 0 0 185 172
%%HiResBoundingBox: 0 0 184.1460 171.2120
%%CropBox: 0 0 184.1460 171.2120
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 843 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:56:37        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2012-10-29T22:10:17+09:00"
   xmp:CreateDate="2012-10-29T22:07:52+09:00"
   xmp:MetadataDate="2012-10-29T22:10:17+09:00"
   xmp:CreatorTool="LaTeX with hyperref package"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:7759fada-596e-c44f-a38c-20d2dd24243c"
   xmpMM:InstanceID="uuid:e9733115-d73a-d644-a2aa-065cd42afc56"
   pdf:Producer="Acrobat Distiller 6.0.1 (Windows)"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -171.212 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
3.05175e-05 0 mo
3.05175e-05 171.212 li
184.146 171.212 li
184.146 0 li
cp
clp
[1 0 0 1 -334.488 0 ]ct
false sop
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LWYAAA+Times-Roman Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /LWYAAA+Times-Roman def/FontInfo 8 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Roman) def/ItalicAngle 0 def/BaseFontName (Times-Roman) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdup 44 /comma putdup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putdup 54 /six putdup 57 /nine putdup 65 /A putdup 67 /C putdup 69 /E putdup 72 /H putdup 73 /I putdup 75 /K putdup 76 /L putdup 80 /P putdup 82 /R putdup 83 /S putdup 86 /V putdup 87 /W putdup 89 /Y putdef/FontBBox {-168 -218 1000 898} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-14 -0 662 676 450 460 683 683] def/OtherBlues [262 270 -218 -217] def/FamilyBlues [-14 -0 450 460 662 676] def/FamilyOtherBlues [-218 -217 262 270 394 394] def/StdHW [28] def/StdVW [84] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings26 dict dup begin/parenleft <1C60D8A8C9B81F2C34DD536D1360D89197E7FA43CD15762B1F48F10FBDCF9BC2C750CDE4A2E91649CF8859E337C2E166D3734F3568F45FDC414D6EEB6B611B8690C7C03C> |-/parenright <1C60D8A8C9B81F2C34DD536D5F91D4C3DAE454AEB0D09D2D77AB7A4947777BB664E613196BC679C0FA303967174C88DFCCFA0D154A8957EC684FC25A36D2507079F0D08A> |-/comma <1C60D8A8C9B8707CB516A860815AB2EC26918885F713E4ED7939803E0A8E0EE12DBD595F7B4FC46C96E99C7C244F8EE37F7C691D6FF966A57DBB357A175F54A977790792A86A701245F8E3A81974A3254E3CFE0117AA8FEF> |-/period <1C60D8A8C9B8707CABA78EB744DAD228E94EA6790A3CF5471A14CA1EC74457D34EB30A52B7D5CE690F230DA3> |-/zero <1C60D8A8C9B7A73D33BD7C9339964DD07C87D05AB7B25A7463788209DFA6F2469A76A662ABDEC36022D07150EBCCB00EAFC3634E253FB48B765FB94D71E293B85E25BD0A9620E2BFB3082EA4BB23F9236A4694D2C3E9FC45E251B722> |-/one <1C60D8A8C9B7A73DC549024B406C76DEED7B46C1EF6EB5651B1F268C3787648C40DBF41CCAF519D06A13A3171180A36B4BF986E9264F6C74AFB62268E95BF4B0184D270E> |-/two <1C60D8A8C9B7A73DC5046156A965F0B3A5C5C92B949F09859351B7460BBC2BE41737489572FD61CF5BD3DA796B955EB550353EDF2F8C07B4F5384131697035B0D3184C9331276BD170AD13B7E6187EA056B38F406A362F0A077FD8459EE186F67C0C> |-/three <1C60D8A8C9B7A73D33B7A780A4FB6D47887A89CCD14262CC5EAF9A44E4667C02E08E12C9FAA81B3FDF7544E6E75E5296452BF3839C72DB687B09DBAE283E004770052C2C40F3BE9D14CD88A743EF8BCC90D61B07BC93A5F254687A358EFD7C6A34DA02B99630F8F91E5B5B18682C41B5E27DFA84375DC950157D776BEF8B8244DE2CBD755506> |-/four <1C60D8A8C9B7A73DB91ED1D58B1534FC3DC9CE70FBEFFE64A020E69D305561F2E3159DBBBFB3075C8C37AD523FA4E6CA1C673946692CFDA34CFE2A635874507E6C9AACEA9BFCA866A31780314DE8CB239F7F84052FFAEAB4A857AB9E0A7D17979C9340343DBC60020EAB> |-/five <1C60D8A8C9B7A73D33A88FEA12959A734F76D056A6AD18616787F24D4694B06D2D404FC3FCA38087EA8162B81AF2DD5F722A8A8620829370F42A0D36AD232CF1AF8C5768FCC5070E4C1D383794DEEE463936008AA8B79C75171B0B56AEE44FCABBD4B348C68E82A7216D83E5CCC6E39493B5E64C831AA2> |-/six <1C60D8A8C9B7A73D33BF1B90A184398C344468AF20F393E1CDAE1A1BDF4B1EF29581C243D118AD9C2F9F3B85C649B4F94D8775B8245D414436A38469371891286E3E4F3F2C58114BE7041C63E1137F930DD38393462B124AC8D60E4109AAD485EEDD44016B3DCF2F116B050BDED76293F395802A2102> |-/nine <1C60D8A8C9B7A73DD0C741EDEE83FA306ACFF34B0F4BCBA36C21A7408C6F9BEB4A442B2F13237BF635FDFAB907B29059292DDAFF5DABCEDC6EC41C5F3C648AFBF12E0ECD4E60C870F065877946C9D47E8B9420F50B2720233BC04950F88E0C085E4CFFDC37232A1913DAF7D116A465520E3E0185527DFA5DEE32> |-/A <1C60D8A8C9B6079F1E48848039BAD53EF75083A15B245763DB78818AFF61A16A1320ECEE497C9F16C5A9970A7745608AF8FED49797B2C617F48878314ECB9388DC87C41E0CC6BE34027C1122095499F934B9D2E8FCDB060A9CB7A271807727C28B32415ED07DCC7001E6D3C85F5AEC7FFEE39DAFE67E7733CC865438> |-/C <1C60D8A8C9B64EDF7E182276F33FE64591D35477734F1BEC23C2AC3C7BB24FE587EAFC58752906FDF803B7EE08CC0EEA6D4DF528ED9A25AEB8763A1E0F3351E8367C0E0AF3723CBF0E47B6C61A46C0C9B9B14422A38EEC6A11432287BB1AAA047F2C2F93CA4A999D93CAB432079751D1C3EA> |-/E <1C60D8A8C9B7D8BE6A6EDEC7A42842EA4F0E34B06A7ADB9E9D606CC12DFCC58C499944486BC2E1461DA5CCC60C99E2409FC8400D8E867A3E518B76BC24BDD4E0EEB0CD902F7EAB97FABA7DA3C9FC37B399B0166CF4B1D4B61FEFF822440F5F4D8B0E5BB37984F9B56DB6714933760DC4DB6872720E4125AE0EB0FEDE661DAED0217CC0DEFD21A5F9B1C2564FF8D194AAF30E05D310042230EE67F24841F08AF905799BB463507C4C6D8F5CDA5A47F765531646F2A5624F53C5FE261955B6C1E2A87993AA> |-/H <1C60D8A8C9B6079F1E4884809AF27C32C4C4644B748B72386090B6EA72F2CAD492799B13A490C22BB769448B5BE5145154E5257C346442332292571F1722B637B36F195964360C86F3C2FA20D5968E5EF117A87C5275E3CF4EDCBA851C9A2685EF777C52F37A9D6571C1FF8201E097F935E15B632A692C95A8A199E69FDF3449B5C7E7D9F966187E> |-/I <1C60D8A8C9B81F2C46F6291E6BC656A33181A7CEBA53BA35C0D63778365713E4937D45432C22967EB42DF6DA1495947FD682A87B83F3472A9AC53AFF202CED526C6E0626B1> |-/K <1C60D8A8C9B6079F1E48848E88AD51D875E18A757A1A6325AC362734879AAFAD42E2CFBAD5446AE147FD12A5E9A047AD123CE532F2C71974BDDAFED116F386DFBBD27BFD1FE6B32F3F98B336226EB8E9B9110925821FFD7841F8A8D3AB3912F803B84F359CF4C96FC59565AEDDE400BC329821CB75B63B2CAC9CAFFCE37E85F33708E8758BC2D160D6830730BB048B8C3A9E76619F> |-/L <1C60D8A8C9B7D8BE6A6D10833A58E10E35AAF0D74F28161F1E96F93676A52EBF6FCEE0F833224946C62AB4825949DCD38F43112D2F78458FF85000573083054640F9BEF9D64C20B231AD48404F645607CB5F4CDB2A6BFD9D45ADC27D5BF358972E357CAF472CF1479518> |-/P <1C60D8A8C9B7EF32570E39CC82D8FC3971C64FFF40AB84806AE53A80D00359C85B6AFD0D4E4516E6F925E114CB5694CA3C3BB5BD1D3AACEA6F4D4E17877AA50A9AB3B90A72FF729470C063D06BEEAA5184A0D925F90DCE26119419701EB253AFCA84A1D0339652DC6259CB60A6C47C07B17E94492CCC7FA176E9C4175D61D356F93D23B513D5121081D0F8AD8E04BD4C29CCCFFE386A44> |-/R <1C60D8A8C9B64EDF88216CF039522D2CD16031C14F48AE18706656314B55A44D32F713967A5EF8844C033ACCF3957E344151100D1C83334794F24CBE3A1B9AF4A82F4D6C7CD452B51143B0C6F97C0FA861F03E4C420C96B9F0EC4B2245F8CD654119EBE887016A0D90A29861BC0C36838B5464E1DB93F15F4476DA9E07D597F3D2EA5732F6E8BF74573804D1C1542747A58851CA05BA5FA2416A905DAF1E03CC5FD0906576F6C98C075D633B8EC1BE9755F5EC40> |-/S <1C60D8A8C9B7EF32A193189DA2467EEF90BB4843AFCD07682C17FCB181C3F70B0CA8436486C289ED34AE435D16FF1CB07A2B01CAD9573442FA519C68EF9A198BFAE5C4A460021A5C56FEA9BD8D624F7DAF5F40358D4BEEF4C33B8CA9313A0976CADAB3AF967336E068B5FDB3E208F4079D52BB0970F735315F1E256DFA87D04984A8> |-/V <1C60D8A8C9B6079F00D3839AD3AAE47C24C61BEF9550E6B3F54F328A2E722C97D7D2FBC5772073A5D2242D57568F9713676A9A112080E9C58F570910912489ED383248F2A72FF33DDFA4B7BB50F9DB818B39D67B1C90816C650F497C9BFE308B3A0ADE01210A> |-/W <1C60D8A8C9B5D6EF203CFD756D7886C6923F14CB2B145795133A4097CE2D5E96D3BF6D30AF147BE0DC50CEF0E4C43E37601F7D5B36C9EA62EB623CBDD7621F7CDC9591AD048D1D8A14C445CA02086468A3F68BFB4F34B84F197939306BCA26FB45C767C3471D697F21D9DB9B96CBD00D5CB38D9F6CA97F559147F568DB764BF9F72A1F66FAB764FDDF200F256A908BEC101F14CE4C8841DBE1467BFC364A4F282E1F5B95C9> |-/Y <1C60D8A8C9B6079F1E48848E88AD51D8AA3C768145CDCFEDAB6B83C487A69F31930A579C115CC8C7B6544BBBD866CC3DFFD379BB9B60E13ECCDC0F741A908D74DDE0F7C507AF7F488799737D8C65256B95AF5C7D5B4FFD0CAB79A3BC373F5C626243062B54DB0912782D7331A8EA0D3C3A5D6A6ADF4E004A15874BC55709> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/VSISRS+Times-Roman /LWYAAA+Times-Roman findfont ct_VMDictPut/VSISRS+Times-Roman*1 [40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /.notdef /zero /one /two /three /four /five /six 2{/.notdef}rp /nine 7{/.notdef}rp /A /.notdef /C /.notdef /E 2{/.notdef}rp /H /I /.notdef /K /L 3{/.notdef}rp /P /.notdef /R /S 2{/.notdef}rp /V /W /.notdef /Y 166{/.notdef}rp]VSISRS+Times-Roman nfVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf40.536 -16.951 mo(E.PIASECKI)[5.4793 4.48231 4.98621 2.98664 6.47463 4.98621 5.47931 5.98155 6.47464 0 ]xsh%ADOBeginSubsetFont: JIWAAA+Times-Italic Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /JIWAAA+Times-Italic def/FontInfo 8 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle -15.5 def/BaseFontName (Times-Italic) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 97 /a putdup 101 /e putdup 108 /l putdup 116 /t putdef/FontBBox {-169 -217 1010 883} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-18 -0 653 670 428 441 676 683] def/OtherBlues [268 271 -209 -205] def/FamilyBlues [-14 -0 450 460 662 676] def/FamilyOtherBlues [-218 -217 262 270 394 394] def/StdVW [76] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings6 dict dup begin/period <1C60D8A8C9B8707CABA78EB7338F15839B8693E263993EC34B103225ACD1CC48F3FEA2891250C153EFE9BB> |-/a <1C60D8A8C9B7A73DCF5D2D361A1FE7BACB90F7ECBC39897143FAA968C42DE5542D7C1E50C896C16D636C2B0931374312D5A913BF97E0FFE54FA376BD3BF89D431B814050D3DCDC2B170275D5928C2C94909A4E7BC365B3672186E2EEAF1ACDF76A3BB344F81AE8D8112A17EA6A2BB97B55B797F2DB5F281D8B7D8F2CA3F90848C1E13D8168838A5B84BC9DBCDFE6796394455983F2CD7583645744549ACA6277D21E676C268D4BAF0D407670137FC6C8D46ADF38BC2A10298A9E9ACB7238FD126ED0E9A8AD213C70926AAD623160> |-/e <1C60D8A8C9B77FE2B997F32F2DB91A4F584393A1EA30FBC29D24ABE1FB5A639719D47006341803310EC93719C9A6BB29A72A60CDB34F352CE28CA4429D27F6E313A68FCEF9BDAFD626592A1A3BEC3764DC5E56A83ECF98D274A3DC99A14784C4D20D2B8E00BADF9632E634A97340D3> |-/l <1C60D8A8C9B854D083A339E80FC114EBCB07831E57AC3514F2B61918C12AE930AECB34DAD158102A4D147ED3C2DD63EDAE3162F8663059064144C3CD5120FF4FE660B3B147181B6070110F4B12934A834EB771C84CD3E89E8869DD320FB867D94183FC2D1D7C0514C682BE71D9FE3FD3887B89E760> |-/t <1C60D8A8C9B854D083A90EFBC938A96A3D406E5A2CAF9702D718BA3D15544D72C81A56130620521C73D2F3B4E1FD111F0DFA9EF2C0EC96770011D0584F9EBB0BA062CFD08BB13215B6521B5D8BF7E43412C7CBEB31C2196018424A90AC47A0D67EEF7911A4CEE72FAAF94D9712C09FBB888DEC43DE06DA> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/VSISRT+Times-Italic /JIWAAA+Times-Italic findfont ct_VMDictPut/VSISRT+Times-Italic*1 [46{/.notdef}rp /period 50{/.notdef}rp /a 3{/.notdef}rp /e 6{/.notdef}rp /l 7{/.notdef}rp /t 139{/.notdef}rp]VSISRT+Times-Italic nfVSISRT+Times-Italic*1 [8.9664 0 0 -8.9664 0 0 ]msf93.089 -16.951 mo(etal.)[3.97929 4.74323 4.4814 2.49087 0 ]xshVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf390.738 -16.951 mo(PHYSICALREVIEWC)[4.98621 6.47464 6.47464 4.98621 2.98666 5.98154 6.47464 7.7218 5.98154 5.47931 6.47464 2.98666 5.47928 10.6924 0 ]xsh%ADOBeginSubsetFont: DLGQMX+Times-Bold Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /DLGQMX+Times-Bold def/FontInfo 8 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Bold) def/ItalicAngle 0 def/BaseFontName (Times-Bold) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 56 /eight putdef/FontBBox {-168 -218 1000 935} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 -0 676 691 461 473] def/OtherBlues [268 275 -206 -203] def/FamilyBlues [-14 -0 450 460 662 676] def/FamilyOtherBlues [-218 -217 262 270 394 394] def/BlueScale 0.0437916 def/StdVW [139] def/ForceBold true def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/zero <1C60D8A8C9B7A73D300A56E04A82C9489CB10A8D5D8A1CE23AD355BCA1220794CD88E5D3319BCC1499097FDE125CAEBD81AFB7940E79A48AA8531CD25C3B7643897E934807122282BF4CFA3143D12F21270BAB87E8242C1D5865D04BF8356131B8B9526BE9306B> |-/eight <1C60D8A8C9B7A73D30061FAFE781A121F40E2C045ED20653EE77041581D97B3EB5A239D9DAF1FE5C1856FDBA60DAB647248B7519B8699E7B27CEA41A98F5375229EAAC330FA99E3D311DD7C841AB9E4CE13F980801AE8CF52935ED235B808125CA8E8D34B47F0183DA7878E7727504C3CF9767A3C870D7BE81E23692DA13EFF6C0923F456039982AAD716FE10C70E213B750D053170FE264D824965C6A4C5141D9F103852EAA0D8ADD9E454D7831D7B4A66F7246CF2901679178202C075F2E846D6625821B912343620363674C964059D4A024AFB75096766296> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/VSISRU+Times-Bold /DLGQMX+Times-Bold findfont ct_VMDictPut/VSISRU+Times-Bold*1 [48{/.notdef}rp /zero 7{/.notdef}rp /eight 199{/.notdef}rp]VSISRU+Times-Bold nfVSISRU+Times-Bold*1 [8.9664 0 0 -8.9664 0 0 ]msf482.146 -16.951 mo(80)[4.4823 0 ]xshVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf491.11 -16.951 mo(,054613\(2009\))[4.4823 4.4823 4.4823 4.4823 4.48233 4.4823 6.73199 2.9848 4.4823 4.4823 4.4823 4.4823 0 ]xsh%ADOBeginSubsetFont: UPEAAA+Helvetica Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /UPEAAA+Helvetica def/FontInfo 8 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle 0 def/BaseFontName (Helvetica) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 50 /two putdup 78 /N putdup 101 /e putdef/FontBBox {-166 -225 1000 931} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 -0 718 737 523 538 688 703] def/OtherBlues [270 281 405 409 -220 -207] def/BlueScale 0.0437916 def/StdHW [76] def/StdVW [88] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/zero <1C60D8A8C9B7EF32A47D2AA10CC01BD74F486262CA3CBA2A0BB3D25A3A094F02BD79F42A0A236349C843943C6914F47589F3954D0C018D1FE33AE62F4AD6F7BB100F692008FA5232B949E365DCD3CA3A3EC8285D42D2BEFA> |-/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A77988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C312D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1E4FEB02B613916D7> |-/N <1C60D8A8C9B6079F1E210C2F9CEEC55EA27709010CA5156BDE4F7169DCD83D1487618C13D4BC4EBB77DC3BF6CD15F7D9F6F5FB65B0AD46AE56999C41B6BE7783> |-/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C2021D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495ACA0439C9D372491632296F74356FA6400495EC05ABB9CD13EFC8E45D6906A6BCDBE0AEF5EFFBE2AA37FCCB9B9808CE70A23B0C257679B730911C6BE9556BB5553A431EECECF30F5581F5F0240E470E520EB9771> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/VSISRV+Helvetica /UPEAAA+Helvetica findfont ct_VMDictPut/VSISRV+Helvetica*1 [48{/.notdef}rp /zero /.notdef /two 27{/.notdef}rp /N 22{/.notdef}rp /e 154{/.notdef}rp]VSISRV+Helvetica nfVSISRV+Helvetica*1 [6.8754 0 0 -6.8754 0 0 ]msf82.5591 84.1004 mo(20)[3.82272 0 ]xshVSISRV+Helvetica*1 [9.1669 0 0 -9.1669 0 0 ]msf91.2197 89.1522 mo(Ne)[6.6185 0 ]xsh94.507 73.68 mo
94.507 74.663 93.709 75.462 92.726 75.462 cv
91.744 75.462 90.947 74.663 90.947 73.68 cv
90.947 72.697 91.744 71.9 92.726 71.9 cv
93.709 71.9 94.507 72.697 94.507 73.68 cv
.694423 .677272 .637385 .738643 cmyk
ef
.722 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
94.507 73.68 mo
94.507 74.663 93.709 75.462 92.726 75.462 cv
91.744 75.462 90.947 74.663 90.947 73.68 cv
90.947 72.697 91.744 71.9 92.726 71.9 cv
93.709 71.9 94.507 72.697 94.507 73.68 cv
cp
77.41 73.513 mo
250.642 73.513 li
@
246.166 74.234 mo
250.498 73.513 li
246.166 72.791 li
246.166 74.234 li
ef
246.166 74.234 mo
250.498 73.513 li
246.166 72.791 li
246.166 74.234 li
cp
@
206.324 80.779 mo
207.719 80.779 li
207.719 66.487 li
206.324 66.487 li
cp
.424811 .337072 .324437 .00665293 cmyk
f
.361 lw
206.324 66.487 mo
207.719 66.487 li
207.719 80.779 li
206.324 80.779 li
cp
.694423 .677272 .637385 .738643 cmyk
@
205.168 71.348 mo
79.575 10.716 li
.424811 .337072 .324437 .00665293 cmyk
ef
[4.3308 4.3308 ] 0 dsh
205.168 71.348 mo
79.575 10.716 li
.694423 .677272 .637385 .738643 cmyk
@
207.527 73.224 mo
110.372 116.87 li
.424811 .337072 .324437 .00665293 cmyk
ef
[2.8872 2.8872 ] 0 dsh
207.527 73.224 mo
110.372 116.87 li
.694423 .677272 .637385 .738643 cmyk
@
123.893 104.069 mo
129.572 114.175 li
.424811 .337072 .324437 .00665293 cmyk
ef
2.165 lw
[] 0 dsh
123.893 104.069 mo
129.572 114.175 li
.694423 .677272 .637385 .738643 cmyk
@
128.08 101.903 mo
133.566 112.202 li
.424811 .337072 .324437 .00665293 cmyk
ef
.722 lw
128.08 101.903 mo
133.566 112.202 li
.694423 .677272 .637385 .738643 cmyk
@
207.238 72.694 mo
258.582 48.586 li
.424811 .337072 .324437 .00665293 cmyk
ef
gsave
258.659 1.89301 mo
66.582 1.89301 li
66.582 128.075 li
258.659 128.075 li
cp
clp
.361 lw
[2.8872 2.8872 ] 0 dsh
207.238 72.694 mo
258.582 48.586 li
.694423 .677272 .637385 .738643 cmyk
@
grestore
250.691 47.239 mo
255.502 54.938 li
ef
gsave
258.659 1.89301 mo
66.582 1.89301 li
66.582 128.075 li
258.659 128.075 li
cp
clp
250.691 47.239 mo
255.502 54.938 li
83.906 2.05499 mo
75.244 19.377 li
183.515 49.693 mo
174.853 67.016 li
.694423 .677272 .637385 .738643 cmyk
@
grestore
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: UPEAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)systemdict beginVSISRV+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/quotedbl <1C60D8A8C9B8096E38D5215B2246E64FC14B0CCEF0922D00582F0DB26B400E41BAA1B223BBF121B76A8270CF628F3849D0935DB95F925E4969> |-/parenleft <1C60D8A8C9B81F2C36CCD20CF8942181AC7F4474F2382F7D30DE700E9D560AD8BD19EE22EACC9412684566AC63B0B33E5FC85E602E759FFC49BF47306AE7BD9165A4E1D3> |-/parenright <1C60D8A8C9B81F2C36CCD20CF894218194033859F410DA60583B3351294315C6F5C4ACE205E4813D6F508658462783E35F08D53213E9F0ED7984671681D402251A6FDC72> |-/C <1C60D8A8C9B6079FED21EC1DA43783C3C67A5FBA5FB885DEE16CDCDCAF1B7E5C168D0377F501B09EEE06FA7720C35D9E5B5FBCE148C17092F43DAB7E2D94E9FE9DCFFADEA91F9C52F49E3053420DCED72662293A521E028C39AF83F75FC54A> |-/D <1C60D8A8C9B6079F1E08EB12991814F2BEFDD99E857D46CC83B089892D70768EDFB737CEBE140DF668BA679C989F178F8C7B580D23B4B614D8D70F34E9A487B4AA37370316974673AB> |-/E <1C60D8A8C9B64EDF885E9C70E86F4D6078E7D1BF0D69911FD55CAA5C46B6C6C433175B8381217040BB42F142B1A0E1EA4F6BED24146D2DB65AFCA0> |-/M <1C60D8A8C9B6B41CC7E91641C452E31A1FF57E5819E293AAC22FFE6A989DD096F29F83DBBFB131D21D2F3E6C6DAB9DE434C529570BC24A625218D657C1F03933B1EA3B0DCFDA8AB35AF4BBEE90CCC241F177D656ECD11D47536184> |-/P <1C60D8A8C9B64EDFA3F30AE4AB14FCCB57D446AF805F45D1BE197D47C6C20943FECBF4EB404456C629F1F5342EEA681381C7461EF00E178F4482E2C7F7B39C94B8CCFF41619BA5DC67957F7F81> |-/R <1C60D8A8C9B6079F1E4D8C18B43D708E4867E1D5DF87FFDFDA59C87E0DAAC2980D72F189A927C7607FB955553C4E4B82FD6E924592BF3E5BCF70BD67C10FBFCC049000E196CAB909156B2D7E5AD89BC25B1EEB84DE135A38029C2647CF918DD0728B39FA4A46AD6169BF8FCD9F6EBD7C686C8458E64ED665C52AFB667727503772603873AF92F5CB568DE59763334D0C676EEF504634735618AF2DDA86> |-/S <1C60D8A8C9B64EDF7B9A268599F9CD8C4143A0D599CA838C6F6EFB82E6187B34759773BB4D8C1A41E190DEFABB354DFB531C99308891FC3B7E87957393F9CD35CA8C07371CAABAAF32C24CDAE22C826F234EC2B15BA06DFB54FFCB46EDDF1D277ED530855C8BB0880980568C5F76DE693CEE6004D84A502F3C6B0F55A55095F8FAF71FCF3869AA0D55975A515D287103786F2BEFCA3E30833F771676F4E4B0C078830B99B254F2B4> |-/a <1C60D8A8C9B7EF32A0B922DB529D708010F72F0E62F6CA36E98277AFD8C536E6814BFC8F2509E1B2B1B62A6BDA8D1A6ED67728D80620B28FE439D2F57DCEC5483105FEA93379701773DF23A415938C688874994BCC9880105CE27AC2270A13FA38E952045C5E8C52BEF83397E5FBEEFAB993BE33E385A5E36620F7427AB5E4423C6A4ED6DE24A89F54E52C8FAD8A45FAD4B8F6CFD50EB7D35BF120B079B932E0EE2F7685462C7EC6E9B818F0F9E1F7814D04F2B9AAFA6704B8B745452B73181F38CB34F1645F> |-/b <1C60D8A8C9B7EF325758E57677E81C8AA433AA021E3255F2E2A0B159632019EEA8F6DE2A2BAC7F3B4B357F98F028325FFF3907B73C5456EB1D8FF0179B85DD1D687E5A074ACA4745CB20001A6A3AC6F132FADF60810876C26262A98CC7510FA38BE9723AF4B4ABB522A0D15754DB077A63E0BA57BE88E1BBA6B0CE58E6588DE7ADAB6E41FD9D54E4EFD5A122C76C7BEBAA12F9C5DCCF6BAA6CC0815777C0B46D695C4EB465E9932D1607B265E794EBAF8378597763D2145A376764> |-/d <1C60D8A8C9B7EF32A0BAF021E6128CBCD055133316849E00736C240570763FFBEAA17D20BAD0C90929E7FC98BEF078FBD21661E4465220571BF6C5785F779B145176EAC3F1B48024793437EC4438247E11A602434D0E7AC34F18A158BFAD2A9FD91C0C9E4A3D67CE58D890D1A5D9362E68BDC6AD4CEE4C45C583B8E0A13437C5A7D60D6E4A23D8A01F527509176EA8D499100624E9> |-/f <1C60D8A8C9B854D0A3953AFC308C88F2CB7B77611DE17001C91B65CE86C8891C39A4DBCDDE1373931B89EF13785E617F99570B386BE99D1A576D0D1701D2F253DF8B3192240780F3E221EB68A6> |-/g <1C60D8A8C9B7EF3227AC78F20225D02AD1F5838626D1D2CB26D9A686345FDBA7E6AD7CBBFB0968E5439577010C655F74DB6EC4A53F96DD554986565E4345C3B0DB42345596269AD0BEDF0DE0FF0CEC2214730A572502B5B1C377714234C3B835458280E4747C6986CC3BB5E2EE9A72968F97F16095F2CF05B047E21023D0AFA6E35E503A84FE4F2FAB4F0F4C9E12738FA69B930E049550798D7E9E63EE8C76ACEF8B8A3006630AA6153916CAF49A5335CCDE8F> |-/h <1C60D8A8C9B7EF327C10274A017D50D0B79D52072757441F46A9E30449754F52968402CD3736F71D6E09A15E2046342DF42A864D37373E0A213DE941C6F011296A017FBEA0AE0137A10664047E> |-/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D72A7354004D800853CB28271AB7834CF7A2CB132BAFF26EF4E9D89B> |-/m <1C60D8A8C9B6B41C803D68C39EF50D06E406D806E0103B4C2937F43F706FE45E46BB4B168951587EB26A51BD9E5D6D15548973928DA7BD71E5C6A2EC754258679A8719AC099ECB167292DC3AC16D6A6399789AE1244C2D9A7EDD1242D52DA81BBE025DB4544A719A686DB3A0393D2301EEF9A4AA3D42067FE37BAF> |-/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-/p <1C60D8A8C9B7EF322792C3BF0D38904A73F4440F6D92D5F5AE09CC018066468E681543C8F047ACFD615B747546B5480444F746C2E0CD698A8961C13AF2BF3940EE05278AAEFC066B11F108A32A247BB7A1777E1A71A35D0F71427779DCE4A1F61E27FEB716A84B084E0A293D7F37477EB4DB407CE06D6E55EF820764AC6486> |-/r <1C60D8A8C9B81F2C6DADD03096566F18A44C12756941A411C99A198CC8D43303483F8D4425C8C61A6016070C9755F215C6103A7B22F8F2C0462F4082ABD3D08AED77838B7C426C> |-/s <1C60D8A8C9B7A73D329D14FC63C56EEDE3F9A78253B2DBE961C83BECBAF3B4E5B0884D0E51EEB661AACE85886254728F5E34D401120D0E6C2B208B0A6EFEEA993E281F58443FA8AF570296DB9AE2B0FD959762404D9D39D028E903103EBAC5E167D6A6970865F2360877231B6B2635F07AB03FB78405FFC01711DD4ECCBE59E46BB3AA7E7E004FCD7D8551926A4D9FE5600A8EF27E924599C5> |-/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B5837088353D9095E679DCF29A> |-/u <1C60D8A8C9B7EF325758E576B7BAA1EFA82EFF7976BE67CE506354F22E3D1B078EDAE7715C61BE16B3CD4B647E2C68818E308CF0BE659E73BA193580128E99771A6AFDBFEB4E9486BE6CBE5D0A068E2F3382B692BCB6E47C62554398C9E56946239346863C679F19> |-systemdict /gcheck known {setglobal} if end {end} ifendVSISRV+Helvetica /Encoding getdup 32 /space putdup 34 /quotedbl putdup 40 /parenleft putdup 41 /parenright putdup 67 /C putdup 68 /D putdup 69 /E putdup 77 /M putdup 80 /P putdup 82 /R putdup 83 /S putdup 97 /a putdup 98 /b putdup 100 /d putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 109 /m putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putpop%ADOEndSubsetFont
/VSISRV+Helvetica*1 [32{/.notdef}rp /space /.notdef /quotedbl 5{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /.notdef /two 16{/.notdef}rp /C /D /E 7{/.notdef}rp /M /N /.notdef /P /.notdef /R /S 13{/.notdef}rp /a /b /.notdef /d /e /f /g /h /i 3{/.notdef}rp /m /.notdef /o /p /.notdef /r /s /t /u 138{/.notdef}rp]VSISRV+Helvetica nfVSISRV+Helvetica*1 [9.1669 0 0 -9.1669 0 0 ]msf225.041 84.8202 mo(beam)[5.09679 5.0968 5.0968 0 ]xsh192.608 94.5894 mo(target)[2.5484 5.09679 3.05252 5.09679 5.09679 0 ]xsh66.9661 30.9252 mo(Si \(E\))[6.11439 2.03506 2.54931 3.05251 6.11439 0 ]xsh173.456 36.4593 mo(MCP)[7.63504 6.61758 0 ]xsh136.355 118.168 mo(DE)[6.6185 0 ]xsh126.058 126.013 mo(E)sh240.15 40.4533 mo(Si)[6.1144 0 ]xshVSISRV+Helvetica*1 [6.1113 0 0 -6.1113 0 0 ]msf222.635 46.8533 mo("Rutherford")[2.16948 4.41237 3.39787 1.69894 3.39789 3.39787 2.03502 1.51805 3.39665 2.03502 3.39789 0 ]xshVSISRV+Helvetica*1 [7.6391 0 0 -7.6391 0 0 ]msf174.178 44.8324 mo(\(start\))[2.54376 3.81955 2.12367 4.24733 2.84781 1.82115 0 ]xsh66.582 41.0319 mo(\(stop\))[2.54376 3.81955 2.12367 4.24734 4.24734 0 ]xsh%ADOBeginSubsetFont: LWYAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginVSISRS+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B81F2C3AED63678C15FF4B0D41EAF1ADF08534F78C6CFD85> |-/eight <1C60D8A8C9B7A73D33BF1B919D3990280983708D6757A992F5763D40D0C17EA83BCB85789813648C1332AA4BA5DECDB6C51AC02F13C5CEC3648068DF163FD5A16CBA724ABBC388395CA8D29C7E9CBEAA9260DD0185441D7B1077F46DB8D59436936512EF03987B35CAAC3F83CBCFD25406E86BFCA5DD2BD7BAF4B5A6E1EF7535E35954911D554DFEA44E42DB79B0FB04D3E90477795F66F8A8FEB792F15D59414AE3673345D8ABA5BD4D2AD8EE578BFD9E28ECEFDCBE7E7D857182A9F46443C79272F5FFF983387F498DC0041982F82C8B0FA76BA464F5DD7119CCD62BCFB1365FA28B858FC14D73B10CF5A83F8B> |-/colon <1C60D8A8C9B854D0F4C3D92D816E2ECB7379D6E9CCDD18181277390E435A4F9286287C26709A7A3847FAD4C0EAD036C0A2A8D3B3CCF6217533C359A366F9DFF3159334E6E32E3452EAD4EA9B044C5B5B415F> |-/F <1C60D8A8C9B7EF32570E39CCED07FE54E8B5118F3EFF07C7A79A2805A7241FA0611FB6DCB02F4798E0410DC1710B4F82A5B7BCC7865D64D2E2B0A30C294A77483F558D7052690E49D2377820A0E476D251BE7D8E7824AF8838D3AC4B16AB7150225F7733450A626EF63F06C118CB55A5AEB0457B0B46C175C6FAF26CA023804F63A0F8CB598EED6E4E1BE1C9B8155B5E2F3060102CB3B31CD1B056E0CC0202> |-/G <1C60D8A8C9B6079FE80B2D9B8A220BABE8A5775155D5AEE67EA9CE80530F42678BB7923C2E1998D5A150C054ED90E9D960696B97F4DB8EA42B60C13ED3831BAE2B146B775564D2359A7EC713509A43C5C5E3539551C39DB899CD95573B1D4F19BE1759C57CF1BCAA6FB7D841F4C17766A5D35D204457A8F7FAA27C0DD08A35CD68D893853416989C0D7266D1AB8433FCBD83529F03E02AAB3CCA8AF06110C60DDAA381BF4BF975C41ABF718C730E643CFDF62ABFA9468C> |-/T <1C60D8A8C9B7D8BE7EA0B64700DC8E438573301CAC4344B7D410E182F881F58CB0EE6C7200F45451BF195D6B4EC9CF9C8B176B767CF2064CDC4BF9C3DA0B6A6FF54C56F67DE1F05535B028AE5A1E7C736084EB09A8A00FEB9607E1E016> |-/a <1C60D8A8C9B77FE2B8A4D222FB41F47F459CA0D95123D06ECF654AB05FF5B6DC144FC9BBEC366E5ECC063C78F59640CE32DD9D219C4F4385FAEDBC60FF334CB1D3BF02D9F353F73914E29D9DD64FAA28B45E23265BD78A90B345EFEAD972A0D93CE817026DBF17DB9E8E49AD8C2AF4FC6486D49F260206F186E614E3D16B2F4AD46463A28F92ED5F2851044761192B9ADCF8B12C73A96A7E57C5841BD16A930132DACDF469EE0C2A8F85A167570E289B5609FF9CB20DD38C9C84A9BB9FC8A7014AC491483F6C> |-/b <1C60D8A8C9B7A73DCF483CC3D064C5FA3DCB4FE14F64E061FC6B7B327BD3AD170E4E134821E89959D7FC86E9160C1887FE9D1E5C6528E6DF501B7B2F3F30D0CEE6E0ECDE5FBEA2BBABC11DF1E31664808113184F8240E66E326CF8F60725DAFAA94AA48A85FA298CB9ED7FFADEF21D27A3E79BDB2F75A75EA736FD59CC6559DB85761C885E021EFCF09E24B9> |-/c <1C60D8A8C9B77FE2B8B3EAC4BBDE029BAC315D1866DD79216DBC0D30C20B16F949C4DACB51911E080D5D4FADB2A127C4AB23B312E9F44F985AA21BA1A9B71EA7AE21C439E05A319047A6D64BC1D4392480160430400AFA5C943510A8521B80B0990CB49D8F01EE3F> |-/d <1C60D8A8C9B7A73DCF5C5F7CCFE1224745C14DED045144DECBED335D8767365A686119923BC683874F138A812E24882366A564440105A4DC036664F6BE736287F87B295D2920E5B8EA5128E5E6C4D3D8CC4EF499D5F82793394C8A44BB4BC5B324694DE039E82E3C3E95CCEA761C759B9AB2F813EF75023CD818EA7E49BFA40067FB96C397B29CD7920172CF32CEB2D7D6BA2C2C243F80C59229B326C2E018A09BBC01E8E5EAF27058ED024F330852F9551733A92CF8DD2FDE72DD73A6AB5C5124E5F56317BB270B722C0F9A2DB91EC3> |-/e <1C60D8A8C9B77FE2B8B0813537CAE403B54DB40537D3BCE3A721EBABA194412EC3061B00A07EF9497D2BA0393994B5BAD3D53481E4076AC8BDD976CDE1D7C869C749BF31CD9AA8D8775C17BFBC48988132FD7543B8680B068C59E2A9123C08B9AC1B> |-/f <1C60D8A8C9B81F2C46F2EFDEFE0CB59F321E43BFD6E82BCAAF0597468DCF77C72CE9F4FF44E681C46DF934E6F13477EDB282AE0A0AEB3C1EAE1FE7BD0F6DE854793C6EBB102BA640EE2A1937B205F1275AE2A18BEEEA6F56A75ACE6F8742D16A82839984> |-/g <1C60D8A8C9B7A73DB582976F6FA2EE84F51D64198201D65DA0379D449296CB33756AB3A7AE8A175ECCFBAEFE2D4D26FE981086B935FAC40322E1F0B8F7350D4069F2282387985119CD3420DA7C6AF69B6593DDE216B952D8FCDCBEF2F469E8089D575BA41CC65444D1B22A9D24CFC1E970C8B6BEDF22A18DB852FFB88FE3E61676AF1B587C8BEDC7F57FDC2C2A66C537084478A0CE11D64537C41EBBD5BF312EA203B1D25DC925907A26C5096A56920B8D980F1FDE4021D766D9EBB9E2D5040E1243BA22D72996312BD29C454816BAAC378D28EAD1B4E006AFB191F0E63614E1C1D12BF3C0816D46C6B4BFA439751F894732123CB9417F879A9079FEB665894A238DC5E00C5560672D49ED3BE797BB9B40B81D47DC4D6525BAC3E19A2463521FF7137CAAF2A9FB5F4F7C0D469F6100DFA27CAFCE39CE1E106B3138E3B02A642CB6CBDE836A606594170908768F9F84598AA082C678AA176A30FCE7778326054A4DB4C2521DC0835CAFB81BC8AFB272F07932AA37EF69999C6D26587244DB681D773B8265D77C46AB4A99012FE89850D5F97C81D2ACDC98A50506471087EB40F5> |-/h <1C60D8A8C9B7A73DC549024A8346FEB2B78E908B5A6E113B6B1D9F55576FB6430AA363CC7EA7A85866229D47A648E16050AC3817C69AC198992A95DC887E9C2F4E126428A388941BC547CF3DFD3AF002591B6C465CE80F6B0C8E3BF1745FFB044EE609634601B3F272E0A2A1613C8D3DAD607A9DF002A5DBDCD953AE67BA74F625AAC084AEBD78F5D55004D7E5DC895C1EC4CADD91BABB3BE394835C4CCB41B4BC3CDD> |-/i <1C60D8A8C9B854D08887A954377F4C214D4B21F7492A7553FF39CC630E801180DD16566EA992053D08DFDDD90B69C61E00DD73FA9F14D9F9BA0BA5DE6F463B9913A4C5B8DB11D33C1FDD97C4AED671CB9420D4160C0D8849042FEC7B7C3AD6164404608E93E91AD41C497AA4F0BFEC99AE40E5> |-/l <1C60D8A8C9B854D08887A955C7D68D8C5333C31878F574AA9AE5E3E7AADBE1B3A329F6AE772A2FA9E3BCD7AD6B2EB2F08C5C060E81EC0A70F41E9D6D0E7B19D3FEF21F30C39B12829A5A4E4EDD48F68C41B6A233A2DBED> |-/m <1C60D8A8C9B6FF86E3B590DB9FE94810D7AFBFE7B946F15ADC4969344E90E1A3F6BB0EC423A0839831AD6C986649A08BE59C9A3AF60608A974950B299379DB00149450A78653D6D4B9B18966FB51AC5B75CCA0334B3300F064709EE5249490C1CB7C6E6F7A3DBD6837889932B38C16FA553F6A7BD9185FFB7638767BBEB1CC928CF2A5534FC32F6F3027FAF68DC8EE9A75EC980BD894ADC4F0B26421A336F0F6A40AAD70D4278736A8FEA511C2ED4A971DB961B998B0AA6DA2144859946854D246CD2A6E94B7321CC1214550> |-/n <1C60D8A8C9B7A73DC549024A80DEC09E4F713BEC6C634F1E9284F6FC7263711D03C47F22A203EB41F88268C104BC4A61C7649DA42D5BE18FE7F731730EB4D130993D14FEE046DD67E78C9CE5C5598D396AB18A5366D9E71D2D6A292A91089ACF40B09098B729C4807DB1C9D54B7EE1602D3D091D4525D3E7868AFA4B4D0DEB009172C2D67F26ED44CA4931A6533F30AB34> |-/o <1C60D8A8C9B7A73DCF4402F5174BF7DD0D28D0C5665CB34A93F0BF7A993E7B76B394E0DD4E0D515EE382B893A080E29B40A4402A4A406056947B5B2334F6D5909CCB56B0284CEFC066661E9D6B7471673D105428B9DFDD7F> |-/p <1C60D8A8C9B7A73DB581186A9391F1059D96F459FFDB82B44DD4DA245FA507D024F28401075285D307468CE0D757751AAB4F3490756973E462106B10BD7663199C4B8A27D5695A680192DE86699DAAF1A89717FDB65265476969999FB7D7847B55845008C66520A977913643311D83941F927D5B958DBE761028866277B01C9604CB3013C82C039B9AE8C95A3C2834B9ED8E05831C8156944A7F9B872094AF1AB63EB96F8DF66A491A85E4F72D480F637D538DE8> |-/r <1C60D8A8C9B81F2C46F2EFD1B3B81533015C6076AEA2DF2F336244DA608D0666A9C39147579BE5F84064BA5DCF6CD4C576D0177C42EAE7438D00AB1D65956107D443F0AD6F08A63F5306BE8A1920B3CB273D9CF24739F3E4740FB53EC981D22501D5AF8E600BA9EEBFA742EC328561AB6E257A9B7C3C0B4F8CAC20D46ECDF05FEB5C54162C09AD2C0169673C> |-/s <1C60D8A8C9B7361F743FE5C092782516B89C667F24852F2833C914D372741C204CB19829CF798EC00B6F60FD56301EF9B4136E1F422FAA9773C81ADFC08AFD24624819F92289BABB5D2A560D29B4C37B5C72F295B1A8757B2DDC4F96A3A7A76D5B8850E9D3B3108E173E7C2AC94ED9F5B4EBB2AC4F74997A581EAA1D8190963213A6DBA3FD99B4DDDF91DEB606EB29DAC3E030DB9A2BEA3B60C98F55A0A9B8097DA00FD849056413A4E04E950801ED07C405C45837491E4864754EBADCC32B5232850305BAEEDA0A345554138E3B49E2F7260D37E80E4C37FED6327D7438DA6B2E0355D0043D6795C50CA3> |-/t <1C60D8A8C9B854D082F829CADA24029904B667043F82AAF5798ADB1AF63787A08D89C04AC22E998B93D82023FC776DB3B03794FD10AD1A9169D67270B70CC8030C1164B605608F8ED713A3CC4AFDDB0825DD3A8B4DD78D9148075B5FF6> |-/u <1C60D8A8C9B7A73DE1FEDB846BC597269D9E0C51D8C22F2B722B34AEBAF190658C0559601B266D7A25A55FD43DDD5BEFD1643FDA15DB9307B56B392B5AC68F81B580F46B71CB6DE1A21AE03B91093587C26F113B0055E84FDB8C5EDADEE628F85456B6D1B0C90F3F4C6B66407F7C61F465E76A627C6E1AC486C9BC9506FCF303D0A507D5D7D5D700213EA098FC6A864FC4203B659E> |-/v <1C60D8A8C9B7A73DDC2846ECA263567D5FF766DAF6EDECBDA59981A2B8D852D5F3C735E0CB09E278E085C85902E93B6730AC94976F06C86CE79902DFE3D63F4327D345589E5D6D8E4470DC068DE92C7775CDBCE234CF63D9048B83B5B8225EB38A3E7FD244643B093F0131528FD6DE23> |-/w <1C60D8A8C9B6079F073CF9E9FD4DD755103DBBF986FA4805E36E84A4ECDE5D22075F7DCF210C6B1EBA68713659F633DB777AF20557A55192976916F7539FBF60FD9581CC24839D0FB84FEDB8D55FB604997EF9376D1DB0C150E41998C0DD7332B70334BC2A16949E085C7559C48EDDB465613BB3B4A21037C818DEE65F274EC082BD0BF16541E3A6DC67D01E45FCE5987C6993A634C7751F403C64619D5D34EDF98783774454B5C36C735A22C2> |-/x <1C60D8A8C9B7A73DC5490245197C6A10ADDC3E0FA58392059EC7D8F6B66FB0930B38EB119ACB6A2A3F634D77F5CF7C8D99C62501D6684A6FD07A49AFAD748B3BD4468AD4BA11802E815F7DDC3EFDD84C4D7209BF92B0439CDE5D6763248366DFBFD06A148E86014B62BD462267E2267FF702B3FE0C2F56259689794C288E394AE4382AFC6AC04373CAD56E7F81CE52F61834C7721A873F0194632E517E056B975C> |-/y <1C60D8A8C9B7A73DB5828C8EB66C86A2A0178950C8A5D2BCDF7E587CE4AD01DF8AD4603198C6F5DF9E7F658259AE7FF6DC72080528C2A7D419F982E298CCAED2E6BCC85E06532CEB363664FB4449960341BAA9D39DAAAF5C47EC79D4FFB0F446C4E2A0FDC91EAC4399171E6DFD5F8C5B3A9EDD053AD9BFC6A562A7DCD44F19646282D2DDE100CDBBA0EDB34E355DB469767675AF6D94185E4181FCCDCD20A6CA572AF5532989> |-/fi <1C60D8A8C9B7EF32570AFF8232948072BEC4C50248C1208A69B28B65AADBCA92759C919FA1E9FEED9805553A4DA719E642BF818FA1F207BFFFA261F4684EEDEC74D5FA21E60ACFC86CCDCCAB1F34855657DE53C09E74BC643E809747A4490D6E2D525AF43CE58C8030D80DD7C648C3036BD5C3D4AD9A69D5D31C9A067EA77341991BEAF0722208EC7CF6FF370325F44116B8F101A9BC9394B7572AA8CB6FD53542F5362A92C681DCE3150EDF3158D05182681F9FAFCE92EDE83E3B17EF7235AE203955993A0D562648749B3CC0> |-/endash <1C60D8A8C9B7A73DB978107C16F615C37E967E89077DBDCC25BC1145> |-systemdict /gcheck known {setglobal} if end {end} ifendVSISRS+Times-Roman /Encoding getdup 45 /hyphen putdup 56 /eight putdup 58 /colon putdup 70 /F putdup 71 /G putdup 84 /T putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 118 /v putdup 119 /w putdup 120 /x putdup 121 /y putdup 174 /fi putdup 177 /endash putpop%ADOEndSubsetFont
/VSISRS+Times-Roman*1 [40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight /nine /colon 6{/.notdef}rp /A /.notdef /C /.notdef /E /F /G /H /I /.notdef /K /L 3{/.notdef}rp /P /.notdef /R /S /T /.notdef /V /W /.notdef /Y 7{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /w /x /y 52{/.notdef}rp /fi 2{/.notdef}rp /endash 78{/.notdef}rp]VSISRS+Times-Roman nfVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf52.497 146.012 mo(FIG.3.Schematicviewofthemeasurementsetup\(seedetailed)[4.98442 2.98485 6.47285 5.19334 4.4823 6.02991 4.98441 3.98019 4.4823 3.98018 6.97496 3.98019 2.49176 2.49176 6.9122 4.4823 2.49176 3.75334 9.39589 4.4823 5.90431 2.49176 4.4823 6.90323 6.97496 3.98018 3.98019 3.48709 4.4823 2.98486 3.98019 6.97495 3.98019 4.48233 5.4184 3.49246 3.98019 2.49176 4.48233 7.39816 2.98486 3.48712 3.98019 6.89426 4.4823 3.98019 2.49176 3.98019 2.49179 2.49176 3.98019 0 ]xsh40.5358 156.965 mo(descriptioninthetext\).)[4.4832 3.98108 3.488 3.98108 2.98574 2.49266 4.4832 2.49265 2.49266 4.4832 6.73198 2.49265 6.72301 2.49265 4.4832 6.2191 2.49266 3.843 4.4832 2.49266 2.98575 0 ]xshVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf40.536 182.885 mo(detectorswereemployedsimultaneously:Theisobutane-\256lled)[4.9803 4.4224 2.7686 4.4224 4.4224 2.76861 4.98031 3.31647 5.93082 7.19101 4.42239 3.31647 6.46174 4.41942 7.74989 4.98032 2.7686 4.87769 4.9803 4.42241 7.03757 3.87454 2.7686 7.74989 4.98032 2.7686 2.7686 4.42239 4.9803 4.42241 4.9803 4.9803 3.87453 2.7686 4.9803 4.82388 6.08409 4.98032 6.46173 2.76862 3.87454 4.98032 4.77905 4.98032 2.76862 4.42241 4.9803 4.42242 3.3165 5.53821 2.76862 2.76862 4.42239 0 ]xsh%ADOBeginSubsetFont: CMKQMX+MTMI Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /CMKQMX+MTMI def/FontInfo 8 dict dup begin/Notice (Copyright (C) 1992, 1993 The TeXplorators Corporation) def/Weight (Medium) def/ItalicAngle -14.0361 def/BaseFontName (MTMI) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 49 /Delta1 putdup 65 /A putdup 69 /E putdef/FontBBox {0 -213 987 680} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-18 -0 653 672 428 441] def/OtherBlues [268 271 -211 -192] def/BlueScale 0.0479599 def/StdHW [34] def/StdVW [73] def/StemSnapH [20 34] def/StemSnapV [55 73] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/Delta1 <1C60D8A8C9B6D9EA3241F431594FF7B80F1EE10F3107D9AF096DDDF73436F96A22AB19A5AF3FB91C171702B64817DA974C51> |-/A <1C60D8A8C9B60F082D5B0CF0AD21F1E9B18C2FB6116F4C05A40D7A877CD420692695C395E3E54AEAD8BDBB2DDB549F2F3762D88FF05B6E653231BA0B532286A7FA27791D3F510431623B0E91D745FD3E94C2BFA930A9F0D10599E42252982068FF2017FA32F27E05DA2B3229212D07B4052DF450247B6C55897AE4F78E> |-/E <1C60D8A8C9B605F8AF5A9AF85419300CC62BF363748D5BBE7BA8D653DFA08D644E5D56CC345D856C2F57339C8772D24C3CAF27246D6227383AB8E23E3B7323891569B8889832B67CC97D708F8DDB61F822D5011FAD3F33E2F795260F52BFD7536AB4588CBE19634D5CE5A8BD69E6D6E17C369DC9FCAB40C10E954A26163A3292EB0E795EEC758A842011EE6AA45E9A603E1860C6A9896E308AFFAA649D8A24D5FDBA99D39ACADC182E7169FCC9ECCFCCBDF49F8501447D1EC8D41053B310> |-/.notdef <1C60D8A8C9B81F2CC3> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/VSISRW+MTMI /CMKQMX+MTMI findfont ct_VMDictPut/VSISRW+MTMI*1 [49{/.notdef}rp /Delta1 15{/.notdef}rp /A 3{/.notdef}rp /E 186{/.notdef}rp]VSISRW+MTMI nfVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf40.536 194.342 mo(1E)[8.00994 0 ]xshVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf60.1832 194.342 mo(detectortelescopeensuredalowenergythresholdand)[4.97931 4.4214 2.76761 4.4214 4.42141 2.76761 4.9793 7.3075 2.76761 4.42141 2.76761 4.42141 3.87354 4.4214 4.97931 4.97931 8.40645 4.4214 4.97931 3.87354 4.97929 3.31548 4.4214 8.95538 8.39748 2.77161 4.72525 11.1601 4.4214 4.97931 4.4214 3.14113 4.97931 8.96434 2.76759 4.97931 3.31548 4.4214 3.87354 4.97931 4.97931 2.76758 8.95541 4.42142 4.97928 0 ]xsh40.536 205.799 mo(perfectidenti\256cationofallregisteredioncharges,andtwo)[4.9803 4.4224 3.31647 3.31647 4.4224 4.4224 6.87618 2.76861 4.9803 4.4224 4.9803 2.76861 2.7686 5.53821 4.42239 4.42241 2.7686 2.7686 4.9803 9.08987 4.97733 7.41608 4.41942 2.7686 6.86722 3.31647 4.26599 4.9803 2.7686 3.87453 2.7686 4.42241 3.31647 4.42239 9.08092 2.76862 4.98032 9.08089 4.42241 4.98032 4.42241 3.14113 4.98032 4.42241 3.87454 6.59724 4.42241 4.98032 9.0809 2.76862 7.09238 0 ]xsh40.536 217.256 mo(silicon\(Rutherford\)detectorsplacedatforwardanglesof38)[3.87453 2.7686 2.7686 2.76861 4.4224 4.9803 7.46099 3.31647 6.64413 4.9803 2.76861 4.9803 4.4224 3.31647 3.31648 4.9803 3.31647 4.9803 5.8141 4.9803 4.42239 2.76862 4.42239 4.42239 2.76862 4.9803 3.31647 6.37216 4.97731 2.7686 4.42239 4.42241 4.42239 7.47893 4.42239 5.25627 3.31648 4.98032 3.31648 7.09238 4.42241 3.31648 7.46996 4.42241 4.98032 4.98032 2.76862 4.42241 6.37216 4.98032 5.80515 4.98029 0 ]xsh%ADOBeginSubsetFont: KVXQMX+MTSY Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /KVXQMX+MTSY def/FontInfo 8 dict dup begin/Notice (Copyright (C) 1992, 1993 The TeXplorators Corporation and Y&Y, Inc. (508) 371-3286. All Rights Reserved.) def/Weight (Medium) def/ItalicAngle 0 def/BaseFontName (MTSY) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 68 /equal putdup 177 /openbullet putdef/FontBBox {0 -954 1043 796} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 -0 465 484 501 506 657 676] def/OtherBlues [-209 -186] def/BlueScale 0.0479599 def/StdHW [50] def/StdVW [50] def/StemSnapH [20 50] def/StemSnapV [30 50] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/equal <1C60D8A8C9B6C180329C486F337E2637810D8548FE31FA7E089C659A5FA4521910F4A25ADF4E42AFDF85360EA65D> |-/openbullet <1C60D8A8C9B7A73DE6C27D577B58CF0E80FC15DDE445150B7A33A2DE3E753853E9F310F6921530C3CE006D5E590F1E3A05E9355AE43E8CBB017F13F405FF7171AC45A9A143F7C8C0C5749270645BEC342D> |-/.notdef <1C60D8A8C9B81F2CC3> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/VSISRX+MTSY /KVXQMX+MTSY findfont ct_VMDictPut/VSISRX+MTSY*1 [68{/.notdef}rp /equal 108{/.notdef}rp /openbullet 78{/.notdef}rp]VSISRX+MTSY nfVSISRX+MTSY*1 [6.9738 0 0 -6.9738 0 0 ]msf281.628 213.638 mo(\261)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf40.536 228.713 mo(\(inthelaboratorysystem\)wereusedtomonitorthebeam)[3.31647 2.7686 9.33297 2.7716 4.9803 8.78403 2.76861 4.4224 4.9803 4.98031 3.31647 4.4224 2.76861 4.9803 3.31647 9.35091 3.8795 4.9803 3.87453 2.7686 4.42241 7.74989 7.67711 7.192 4.42241 3.31647 8.78403 4.9803 3.87453 4.42241 9.34192 2.76862 9.34193 7.74991 4.98032 4.9803 2.76862 2.76862 4.98032 7.68607 2.77159 4.98032 8.78403 4.98032 4.42242 4.42239 0 ]xsh40.536 240.17 mo(energy.Thedataanalysisgaveusproductionprobabilitiesfor)[4.42141 4.97931 4.42141 3.14113 4.97931 4.32875 5.04008 6.08409 4.97931 6.96585 4.97931 4.4214 2.76761 6.96585 4.4214 4.97932 4.4214 2.76761 4.97929 3.87354 2.76761 6.41699 4.92351 4.22116 4.82388 6.97482 4.97929 6.40802 4.97931 3.31548 4.97929 4.97931 4.97931 4.4214 2.76761 2.76761 4.97929 7.53273 4.97729 3.31549 4.97929 4.97931 4.4214 4.97931 2.76759 2.76761 2.76761 2.76761 2.76761 4.42142 6.41699 3.32043 4.97931 0 ]xsh40.536 251.627 mo(ionsofmassesintherange)[2.76761 4.97931 4.97931 8.0638 4.97931 7.51472 7.7489 4.42141 3.87354 3.87354 4.4214 8.05484 2.77159 9.17056 2.77161 4.97929 8.60371 3.31548 4.4214 4.97931 4.97929 0 ]xshVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf160.83 251.627 mo(A)shVSISRX+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf172.287 251.627 mo(D)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf184.24 251.627 mo(12\26122.Themainresults)[4.97931 4.97931 4.97931 4.97931 4.97931 6.69586 6.08508 4.97929 8.61267 7.74892 4.4214 2.76761 9.17058 3.32147 4.42139 3.87354 4.97931 2.76761 2.76761 0 ]xsh40.536 263.084 mo(arepresentedinFig.)[4.4224 3.31647 7.55066 4.97731 3.31647 4.4224 3.87453 4.4224 4.9803 2.76861 4.4224 8.12749 2.7686 8.10857 5.5382 2.76861 4.9803 0 ]xsh.883635 .769161 0 0 cmyk
VSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf126.927 263.084 mo(4)sh1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LWYAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginVSISRS+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/bracketleft <1C60D8A8C9B81F2C36B2094B9ED0E07AA432BA5CE2E30656FAF6FD647FB4730E81C90D45CA2A3E2357B2F5E09E9C4D9F27ADC522DE90> |-systemdict /gcheck known {setglobal} if end {end} ifendVSISRS+Times-Roman /Encoding getdup 91 /bracketleft putpop%ADOEndSubsetFont
/VSISRS+Times-Roman*1 [40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight /nine /colon 6{/.notdef}rp /A /.notdef /C /.notdef /E /F /G /H /I /.notdef /K /L 3{/.notdef}rp /P /.notdef /R /S /T /.notdef /V /W /.notdef /Y /.notdef /bracketleft 5{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /w /x /y 52{/.notdef}rp /fi 2{/.notdef}rp /endash 78{/.notdef}rp]VSISRS+Times-Roman nfVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf131.904 263.084 mo(.Thesecomplementandconstitutean)[5.62488 6.08409 4.97931 4.4214 3.87354 7.55962 4.4214 4.97931 7.74892 4.97931 2.76761 4.4214 7.74892 4.4214 4.97931 5.92177 4.4214 4.97931 8.11752 4.4214 4.97931 4.97929 3.87354 2.76761 2.76761 2.76761 4.97931 2.76758 7.55963 4.42142 0 ]xsh40.536 274.541 mo(improvementontheearlierresultsofRef.[)[2.7686 7.7499 4.9803 3.31647 4.82389 4.8239 4.4194 7.74991 4.42239 4.98031 5.29213 4.98031 7.47892 2.7686 4.9803 6.91206 4.42239 4.4224 3.31648 2.76859 2.76862 4.42239 5.8141 3.32047 4.42239 3.87453 4.98032 2.7686 2.7686 6.36317 4.98032 5.81409 6.64413 4.42239 3.31648 4.98628 0 ]xsh.883635 .769161 0 0 cmyk
VSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf212.894 274.541 mo(18)[4.97731 0 ]xsh1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LWYAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginVSISRS+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/percent <1C60D8A8C9B6B41CC7B7C23F654D8876BCF8210DB8E537449FC21E454F6BFC6A033D6264FCB9BA5C79C4E7AA7227BD3E1DE864D7864C7B18726524232E8431D8253A76C435C89541EA478453FEECDF6C9E27B0BB0EE977A12009EF6F2CDD847AFB437D494D039B0F49232B38E2277C2A8CAC5D1C4F6352623248C100A575E3C3A6A5824D0D0713CA3421F744402B75AFFC898E79686E10CC7D5C2F5C93F81A756FFC15AEA3877E726C38C497DC546B3283280F5FFDD2D1A096C544EE7DCBE6A55141B2D058A7727D561809ABCC814E7B08A994678E8486E5E8226EE68BB842C2584BF5C1E0231A52F647B814B3CF8853CC9D613153C972BD44D64163567FD498C84324779F05A69DA29DFF0309F46A3F18DFB876897072454E50FF70C99203A28974AA24B2F2AD0BF65FACA902CFE3A0967B21> |-/seven <1C60D8A8C9B7A73DD6FE362CD24F05334B0EB647AEFE5409105064A3E2149E3F071B4B7682CB4AAE846128CC40E4FE81E9AE8C264167A3B3D819A723> |-/Z <1C60D8A8C9B7D8BE6A6EDEC9185C38B8A1B4E98DDBA0ADD0EBC62DF4F1DF2AC115152950B1B4300CAF5FD3A9831ED4BE2B0CBABB56F1E7F1E4D47831FA59792540FD9554FFC78A64DC234E66A3D7> |-/bracketright <1C60D8A8C9B81F2C36B2094B9ED0E07AB0AE245978D415C9B35A8D321C0AFE31914517F88ADB7E52176ED8827A777F14FE6FD4341F74> |-/j <1C60D8A8C9B854D0F8036B9E41E00749D27292159EBFE77AC2277EF5488334291DD30C4B9C3E7C953150698FE31B2CBE1624AFD85A81A9069F8F47C4285F33A4C9AD85DA78A27DB5C06356F829273C4740DFB56B8B0FDC43D66AC99A3ABDAF5532DEF5D91EF8D649F7038A091BBD40D049C74BB965EB68080498527B94AE> |-/k <1C60D8A8C9B7A73DC549024AEE55A01243B0ED1B2825DB74E3D4409DAB03360E64EE70A07ED7B69F115EEF98820D21F1DE6EF3BB4358612BA07FC9A40921C0AD30EF197C3D695EFDC35D3C9730116E52E0ABEFC9769B9302392F123FDEAA4AA885495C7D34579141F0B531400B42BB4E124EADD24EC34F713FF7466019E554EC1582FC6D1F609CBE080383D47963691E73E752C0BDF5CFFA1CA9F764FD810298046BFCBC263AE7BCB74C096697F8A00B5877DC20F2A2> |-/q <1C60D8A8C9B7A73DB5811938DD329AF571F14FFDE692A057FCB729720A5BED4D1F9C0C23BDB1CB452F40EB6D848BE0932F4C760F5C2503004914FFB4B67682FA186AE228665B2BFEA6ACC885BEC05363FF79301DC87EB9E5C026E33B1707B560B235E300E90D1225B3F5646ADDE05DCB20F259A4A8F9EE35B417CA23FCC315BAD2FB6734C0B8BCA0E27A3A137C64206716203345A864EDB66059A017842F1314A9089CC31918917957F569> |-systemdict /gcheck known {setglobal} if end {end} ifendVSISRS+Times-Roman /Encoding getdup 37 /percent putdup 55 /seven putdup 90 /Z putdup 93 /bracketright putdup 106 /j putdup 107 /k putdup 113 /q putpop%ADOEndSubsetFont
/VSISRS+Times-Roman*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine /colon 6{/.notdef}rp /A /.notdef /C /.notdef /E /F /G /H /I /.notdef /K /L 3{/.notdef}rp /P /.notdef /R /S /T /.notdef /V /W /.notdef /Y /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y 52{/.notdef}rp /fi 2{/.notdef}rp /endash 78{/.notdef}rp]VSISRS+Times-Roman nfVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf222.848 274.541 mo(].)[3.32047 0 ]xsh52.4961 285.998 mo(Themoststrikingresultisthatthetotaltransfercross)[6.08607 4.9803 9.24331 7.74891 4.9803 3.87453 7.57756 3.87952 2.7686 3.31647 2.76861 4.9803 2.76861 4.9803 9.78326 3.32146 4.42241 3.87451 4.98032 2.7686 7.58653 2.77158 8.68549 2.77158 4.98032 4.42239 7.58652 2.7686 4.9803 9.23433 2.77161 4.9803 2.76862 4.42241 7.5865 2.76862 3.31648 4.42241 4.98032 3.87454 3.31648 4.42241 8.12741 4.4194 3.31647 4.98035 3.87451 0 ]xsh40.535 297.455 mo(sectionsforthe)[3.87354 4.4214 4.42141 2.76761 2.76761 4.97931 4.97931 9.24338 3.31548 4.97932 8.67635 2.77159 4.97931 0 ]xshVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf112.509 293.837 mo(90)[3.48341 0 ]xshVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf119.979 297.455 mo(Zrand)[6.08309 8.69429 4.4194 4.97731 0 ]xshVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf154.503 293.837 mo(92)[3.48341 0 ]xshVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf161.982 297.455 mo(Zrtargetsareessentiallythe)[6.08707 8.69429 2.76961 4.4234 3.14113 4.98129 4.4234 2.76961 9.24338 4.4194 3.31747 9.78326 4.4234 3.87553 3.87553 4.42339 4.98131 2.76959 2.76961 4.42339 2.76962 2.76959 10.3412 2.76959 4.98129 0 ]xsh40.5369 308.912 mo(same,namely,3.46\(17\)and3.74\(19\)mb)[3.87354 4.4214 7.74891 4.42141 6.97481 4.97931 4.4214 7.74892 4.4214 2.76761 4.32875 6.98378 4.97932 2.48866 4.97931 4.97931 3.31548 4.97931 4.97931 7.8116 4.4214 4.97931 9.46844 4.97931 2.48865 4.97931 4.97931 3.31548 4.97931 4.97929 7.81161 7.7489 0 ]xsh%ADOBeginSubsetFont: CMKQMX+MTMI AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginVSISRW+MTMI dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/slash <1C60D8A8C9B745265DB920B47933B671A6716EFB8EB6DAEE719CDC462CFE1483DCAB3C27> |-systemdict /gcheck known {setglobal} if end {end} ifendVSISRW+MTMI /Encoding getdup 61 /slash putpop%ADOEndSubsetFont
/VSISRW+MTMI*1 [49{/.notdef}rp /Delta1 11{/.notdef}rp /slash 3{/.notdef}rp /A 3{/.notdef}rp /E 186{/.notdef}rp]VSISRW+MTMI nfVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf212.24 308.912 mo(=)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf216.921 308.912 mo(ster,respectively)[3.87453 2.76862 4.42239 2.92494 6.96585 3.32047 4.42239 3.87454 4.9803 4.42239 4.42239 2.76862 2.52054 4.82388 4.42239 2.76862 0 ]xsh40.5379 320.369 mo(\(just6%ofthetotalquasielasticscatteringatthisangle\).This)[3.31647 2.7686 4.9803 3.87453 5.16561 4.97732 10.7008 4.97732 5.72343 2.77159 4.9803 6.82239 2.76861 4.9803 2.76861 4.42239 5.17458 4.9803 4.9803 4.42239 3.87454 2.7686 4.42241 2.76859 4.42241 3.87453 2.76862 2.76859 6.8224 3.87453 4.42239 4.42241 2.7686 2.7686 4.42239 3.31648 2.7686 4.9803 7.38925 4.42241 5.17458 2.76862 4.9803 2.76862 6.27353 4.42241 4.9803 4.98032 2.76862 4.42241 3.31647 4.89563 6.08411 4.98029 2.76862 0 ]xsh40.5379 331.826 mo(equalityimpliesthatwhiletransferscan,inprinciple,playa)[4.4224 4.9803 4.9803 4.4224 2.7686 2.76861 2.76861 8.18128 2.76861 7.74991 4.9803 2.76861 2.7686 4.42239 7.07452 2.77159 4.9803 4.4224 5.95763 7.192 4.9803 2.7686 2.7686 7.61443 2.7686 3.31647 4.42241 4.9803 3.87453 3.31648 4.42239 3.31647 7.06555 4.42241 4.42239 4.98032 5.69661 2.76862 8.16336 4.98032 3.31648 2.76862 4.9803 4.42241 2.76862 4.98032 2.76862 4.42241 5.68765 4.98029 2.76862 4.42242 8.18127 0 ]xsh40.5379 343.283 mo(signi\256cantroleintheshapeofbarrierdistributions\(see,e.g.,)[3.87453 2.7686 4.9803 4.9803 2.7686 5.5382 4.42241 4.42239 4.98031 5.63385 3.31647 4.9803 2.7686 7.26274 2.7686 7.82064 2.76861 4.9803 7.2717 3.87952 4.9803 4.42241 4.98029 7.27171 4.9803 6.16479 4.98029 4.42241 3.31647 3.31648 2.7686 4.42239 6.16478 4.9803 2.76862 3.87453 2.76862 3.31648 2.76862 4.77907 4.97731 2.7686 2.76862 4.98032 4.98032 6.72284 3.31648 3.87454 4.42241 4.42239 5.328 4.42242 2.48965 4.98032 2.48965 0 ]xsh40.5379 354.74 mo(Ref.[)[6.64513 4.4234 3.31747 5.33696 0 ]xsh.883635 .769161 0 0 cmyk
VSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf63.5774 354.74 mo(19)[4.97732 0 ]xsh1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LWYAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginVSISRS+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/z <1C60D8A8C9B77FE2B2232EA49D913A839F944BFBD58B5F9C53AFDB3D34F4E5415E4B3404E59C07E141AA5433E3E87B3F0CD3EE7F94ADC8BC88439282D910FBCA4AB475DDE170B794FDC643F3659C48C39F39> |-systemdict /gcheck known {setglobal} if end {end} ifendVSISRS+Times-Roman /Encoding getdup 122 /z putpop%ADOEndSubsetFont
/VSISRS+Times-Roman*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine /colon 6{/.notdef}rp /A /.notdef /C /.notdef /E /F /G /H /I /.notdef /K /L 3{/.notdef}rp /P /.notdef /R /S /T /.notdef /V /W /.notdef /Y /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z 51{/.notdef}rp /fi 2{/.notdef}rp /endash 78{/.notdef}rp]VSISRS+Times-Roman nfVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf73.5311 354.74 mo(]\),someothermechanismisresponsibleforthevery)[3.31647 3.31647 5.328 3.87453 4.9803 7.74991 7.26273 4.98031 2.76861 4.9803 4.42239 6.16478 7.74991 4.42239 4.42239 4.98032 4.42239 4.98032 2.76859 3.87454 10.6112 2.7686 6.70491 3.31648 4.42239 3.87454 4.98029 4.98032 4.98029 3.87454 2.76859 4.98032 2.76859 7.2717 3.3165 4.98032 6.15582 2.77158 4.98032 7.26276 4.82388 4.4194 3.31647 0 ]xsh40.5369 366.197 mo(markeddifferencebetweenthebarrierdistributionsforthetwo)[7.7499 4.4224 3.31647 4.87769 4.4224 6.86723 4.98031 2.7686 3.0694 3.32046 4.4224 3.31647 4.42239 4.9803 4.42241 6.30931 4.9803 4.42241 2.7686 7.192 4.42239 4.42239 6.87619 2.7686 4.9803 6.30035 4.9803 4.42241 3.31647 3.31648 2.7686 4.42239 5.19344 4.9803 2.7686 3.87454 2.7686 3.31648 2.76862 4.77907 4.97731 2.76862 2.7686 4.98032 4.98032 5.75148 3.31648 4.9803 5.19341 2.77161 4.98032 6.30035 2.76862 7.09238 0 ]xsh40.5369 377.654 mo(zirconiumisotopes.)[4.4224 2.7686 3.31647 4.4224 4.9803 4.98031 2.7686 4.98031 10.2605 2.76861 3.87453 4.9803 2.7686 4.9803 4.9803 4.42241 3.87453 0 ]xsh52.498 389.111 mo(ThemostlikelyexplanationcanbeseeninFig.)[6.08508 4.97931 6.37209 7.7489 4.97931 3.87354 4.72527 2.76761 2.76761 4.87769 4.42142 2.76761 6.92998 4.26599 4.97931 4.97931 2.76761 4.4214 4.97931 4.4214 2.76761 2.76761 4.97929 6.95689 4.4214 4.4214 6.93895 4.97929 6.37209 3.87352 4.4214 4.4214 6.93895 2.76762 6.92102 5.5372 2.76761 4.97931 0 ]xsh.883635 .769161 0 0 cmyk
VSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf238.294 389.111 mo(5)sh1 /0 /CSD get_res sepcs
1 sep
VSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf243.271 389.111 mo(,wherewe)[4.4463 7.19101 4.97931 4.42139 3.31549 6.38104 7.19101 0 ]xsh40.5379 400.568 mo(comparethe)[4.42041 4.97831 7.74791 4.97831 4.42041 3.31448 7.68616 2.77159 4.9783 0 ]xsh%ADOBeginSubsetFont: CMKQMX+MTMI AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginVSISRW+MTMI dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Q <1C60D8A8C9B68526F8CE277F69C50E315DA1AFB3CF74BC68725E3B28111EC7AE2F9552D742AB23417643D7C5209367BF315A5A3AF9616C0FE4A96399BF366140F216A75510B2434D6E2653267FFCA6351459F03E510730AF26850AAEDCB22BE84C5C771171AD29C92D6F1B7FA784E00D0DFC4E842C442761B11AD223588912A8B87CBDFE73B2117A5D22439AA3FFA67918C0261FA708CB53C8011D11B3360C7A4A205B4D7EF25032EE33E0AC756F3EAF0F3963A0A62981D35DAE7B27559A83305B7457E269F46B899A68F4F9FDD1F55D639601DB687C769322424F7C262DCF8A> |-systemdict /gcheck known {setglobal} if end {end} ifendVSISRW+MTMI /Encoding getdup 81 /Q putpop%ADOEndSubsetFont
/VSISRW+MTMI*1 [49{/.notdef}rp /Delta1 11{/.notdef}rp /slash 3{/.notdef}rp /A 3{/.notdef}rp /E 11{/.notdef}rp /Q 174{/.notdef}rp]VSISRW+MTMI nfVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf93.5031 400.568 mo(Q)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf101.954 400.568 mo(-valuespectrafor\(nontransfer\)backscattered)[3.31647 4.72527 4.42239 2.76861 4.98031 7.67719 3.87453 4.9803 4.42239 4.42241 2.7686 3.31647 7.66823 3.31647 4.9803 6.56129 3.32047 4.9803 4.9803 4.9803 2.76862 3.31647 4.42239 4.9803 3.87453 3.31648 4.42239 3.31648 6.56128 4.98032 4.42239 4.42239 4.98032 3.87451 4.42239 4.42242 2.76859 2.76862 4.42242 3.31647 4.42242 0 ]xsh78.272 593.984 mo
165.105 593.984 li
165.105 586.523 li
78.272 586.523 li
cp
.694423 .677272 .637385 .738643 cmyk
f
.466 lw
1 lc
1 lj
78.272 586.523 mo
165.105 586.523 li
165.105 593.984 li
78.272 593.984 li
cp
@
gsave
67.454 433.195 mo
284.581 433.195 li
284.581 594.077 li
67.454 594.077 li
cp
eclp
78.272 593.984 mo
78.272 586.523 li
165.105 586.523 mo
165.105 593.984 li
78.272 586.523 mo
165.105 586.523 li
@
grestore
186.837 593.984 mo
273.668 593.984 li
273.668 575.89 li
186.837 575.89 li
cp
f
186.837 575.89 mo
273.668 575.89 li
273.668 593.984 li
186.837 593.984 li
cp
@
gsave
67.454 433.195 mo
284.581 433.195 li
284.581 594.077 li
67.454 594.077 li
cp
eclp
186.837 593.984 mo
186.837 575.89 li
273.668 575.89 mo
273.668 593.984 li
186.837 575.89 mo
273.668 575.89 li
@
grestore
161.094 586.336 mo
164.918 582.512 li
156.524 586.336 mo
164.918 577.943 li
151.954 586.336 mo
164.918 573.373 li
147.384 586.336 mo
164.918 568.802 li
142.814 586.336 mo
164.918 564.232 li
138.244 586.336 mo
164.918 559.663 li
133.673 586.336 mo
164.918 555.092 li
129.104 586.336 mo
164.918 550.522 li
124.533 586.336 mo
164.918 545.953 li
119.963 586.336 mo
164.918 541.382 li
115.393 586.336 mo
164.918 536.813 li
110.823 586.336 mo
164.918 532.242 li
106.253 586.336 mo
164.918 527.672 li
101.683 586.336 mo
164.918 523.103 li
97.113 586.336 mo
164.918 518.533 li
92.542 586.336 mo
164.918 513.963 li
87.973 586.336 mo
164.918 509.393 li
83.402 586.336 mo
164.918 504.823 li
78.832 586.336 mo
164.918 500.253 li
78.459 582.139 mo
164.918 495.683 li
78.459 577.569 mo
164.918 491.113 li
78.459 573 mo
160.722 490.74 li
78.459 568.429 mo
156.151 490.74 li
78.459 563.859 mo
151.581 490.74 li
78.459 559.29 mo
147.011 490.74 li
78.459 554.719 mo
142.441 490.74 li
78.459 550.15 mo
137.871 490.74 li
78.459 545.579 mo
133.301 490.74 li
78.459 541.009 mo
128.73 490.74 li
78.459 536.439 mo
124.161 490.74 li
78.459 531.87 mo
119.59 490.74 li
78.459 527.299 mo
115.02 490.74 li
78.459 522.729 mo
110.45 490.74 li
78.459 518.16 mo
105.88 490.74 li
78.459 513.589 mo
101.309 490.74 li
78.459 509.019 mo
96.74 490.74 li
78.459 504.45 mo
92.17 490.74 li
78.459 499.88 mo
87.6 490.74 li
78.459 495.31 mo
83.029 490.74 li
78.459 490.74 mo
78.459 490.74 li
.0161135 .957946 .906828 9.15541e-05 cmyk
@
78.272 586.523 mo
78.272 490.553 li
165.105 586.523 mo
78.272 586.523 li
165.105 490.553 mo
165.105 586.523 li
78.272 490.553 mo
165.105 490.553 li
.694423 .677272 .637385 .738643 cmyk
@
271.617 575.704 mo
273.481 573.838 li
267.048 575.704 mo
273.481 569.269 li
262.477 575.704 mo
273.481 564.698 li
257.906 575.704 mo
273.481 560.128 li
253.337 575.704 mo
273.481 555.559 li
248.767 575.704 mo
273.481 550.989 li
244.195 575.704 mo
273.481 546.418 li
239.626 575.704 mo
273.481 541.848 li
235.056 575.704 mo
273.481 537.279 li
230.486 575.704 mo
273.481 532.708 li
225.916 575.704 mo
273.481 528.138 li
221.345 575.704 mo
273.481 523.569 li
216.775 575.704 mo
273.481 518.999 li
212.206 575.704 mo
273.481 514.429 li
207.635 575.704 mo
273.481 509.859 li
203.064 575.704 mo
269.285 509.486 li
198.495 575.704 mo
264.716 509.486 li
193.925 575.704 mo
260.144 509.486 li
189.354 575.704 mo
255.574 509.486 li
187.023 573.466 mo
251.005 509.486 li
187.023 568.896 mo
246.435 509.486 li
187.023 564.327 mo
241.864 509.486 li
187.023 559.755 mo
237.294 509.486 li
187.023 555.185 mo
232.725 509.486 li
187.023 550.616 mo
228.154 509.486 li
187.023 546.045 mo
223.585 509.486 li
187.023 541.475 mo
219.014 509.486 li
187.023 536.906 mo
214.443 509.486 li
187.023 532.335 mo
209.874 509.486 li
187.023 527.766 mo
205.304 509.486 li
187.023 523.195 mo
200.733 509.486 li
187.023 518.626 mo
196.163 509.486 li
187.023 514.056 mo
191.593 509.486 li
187.023 509.486 mo
187.023 509.486 li
.0161135 .957946 .906828 9.15541e-05 cmyk
@
186.837 575.89 mo
186.837 509.3 li
273.668 575.89 mo
186.837 575.89 li
273.668 509.3 mo
273.668 575.89 li
186.837 509.3 mo
273.668 509.3 li
.694423 .677272 .637385 .738643 cmyk
@
160.722 484.584 mo
164.918 488.781 li
156.151 484.584 mo
161.934 490.367 li
151.581 484.584 mo
157.364 490.367 li
147.011 484.584 mo
152.794 490.367 li
142.441 484.584 mo
148.224 490.367 li
137.871 484.584 mo
143.653 490.367 li
133.301 484.584 mo
139.083 490.367 li
128.73 484.584 mo
134.513 490.367 li
124.161 484.584 mo
129.943 490.367 li
119.59 484.584 mo
125.373 490.367 li
115.02 484.584 mo
120.803 490.367 li
110.45 484.584 mo
116.232 490.367 li
105.88 484.584 mo
111.663 490.367 li
101.309 484.584 mo
107.092 490.367 li
96.74 484.584 mo
102.522 490.367 li
92.17 484.584 mo
97.952 490.367 li
87.6 484.584 mo
93.382 490.367 li
83.029 484.584 mo
88.811 490.367 li
78.459 484.584 mo
84.242 490.367 li
78.459 489.154 mo
79.671 490.367 li
78.459 484.584 mo
84.242 490.367 li
.460426 .311955 .994202 .0773327 cmyk
@
78.272 490.553 mo
78.272 484.398 li
165.105 490.553 mo
78.272 490.553 li
165.105 484.398 mo
165.105 490.553 li
78.272 484.398 mo
165.105 484.398 li
.694423 .677272 .637385 .738643 cmyk
@
269.285 502.771 mo
273.481 506.968 li
264.716 502.771 mo
271.057 509.113 li
260.144 502.771 mo
266.487 509.113 li
255.574 502.771 mo
261.917 509.113 li
251.005 502.771 mo
257.347 509.113 li
246.435 502.771 mo
252.776 509.113 li
241.864 502.771 mo
248.207 509.113 li
237.294 502.771 mo
243.637 509.113 li
232.725 502.771 mo
239.065 509.113 li
228.154 502.771 mo
234.496 509.113 li
223.585 502.771 mo
229.926 509.113 li
219.014 502.771 mo
225.356 509.113 li
214.443 502.771 mo
220.785 509.113 li
209.874 502.771 mo
216.216 509.113 li
205.304 502.771 mo
211.645 509.113 li
200.733 502.771 mo
207.076 509.113 li
196.163 502.771 mo
202.506 509.113 li
191.593 502.771 mo
197.935 509.113 li
187.023 502.771 mo
193.365 509.113 li
187.023 507.341 mo
188.795 509.113 li
187.023 502.771 mo
193.365 509.113 li
.460426 .311955 .994202 .0773327 cmyk
@
186.837 509.3 mo
186.837 502.584 li
273.668 509.3 mo
186.837 509.3 li
273.668 502.584 mo
273.668 509.3 li
186.837 502.584 mo
273.668 502.584 li
.694423 .677272 .637385 .738643 cmyk
@
269.285 486.636 mo
273.481 490.833 li
264.716 486.636 mo
273.481 495.403 li
260.144 486.636 mo
273.481 499.973 li
255.574 486.636 mo
271.336 502.398 li
251.005 486.636 mo
266.767 502.398 li
246.435 486.636 mo
262.197 502.398 li
241.864 486.636 mo
257.627 502.398 li
237.294 486.636 mo
253.057 502.398 li
232.725 486.636 mo
248.486 502.398 li
228.154 486.636 mo
243.916 502.398 li
223.585 486.636 mo
239.347 502.398 li
219.014 486.636 mo
234.776 502.398 li
214.443 486.636 mo
230.205 502.398 li
209.874 486.636 mo
225.636 502.398 li
205.304 486.636 mo
221.066 502.398 li
200.733 486.636 mo
216.496 502.398 li
196.163 486.636 mo
211.925 502.398 li
191.593 486.636 mo
207.355 502.398 li
187.023 486.636 mo
202.785 502.398 li
187.023 500.346 mo
189.074 502.398 li
187.023 495.776 mo
193.644 502.398 li
187.023 491.206 mo
198.216 502.398 li
187.023 486.636 mo
202.785 502.398 li
271.804 502.398 mo
273.481 500.719 li
267.232 502.398 mo
273.481 496.149 li
262.663 502.398 mo
273.481 491.579 li
258.093 502.398 mo
273.481 487.009 li
253.523 502.398 mo
269.285 486.636 li
248.952 502.398 mo
264.716 486.636 li
244.382 502.398 mo
260.144 486.636 li
239.812 502.398 mo
255.574 486.636 li
235.243 502.398 mo
251.005 486.636 li
230.672 502.398 mo
246.435 486.636 li
226.102 502.398 mo
241.864 486.636 li
221.532 502.398 mo
237.294 486.636 li
216.962 502.398 mo
232.725 486.636 li
212.393 502.398 mo
228.154 486.636 li
207.821 502.398 mo
223.585 486.636 li
203.251 502.398 mo
219.014 486.636 li
198.682 502.398 mo
214.443 486.636 li
194.112 502.398 mo
209.874 486.636 li
189.541 502.398 mo
205.304 486.636 li
187.023 500.346 mo
200.733 486.636 li
187.023 495.776 mo
196.163 486.636 li
187.023 491.206 mo
191.593 486.636 li
187.023 486.636 mo
187.023 486.636 li
.95346 .916228 .0104982 .0011902 cmyk
@
186.837 502.584 mo
186.837 486.45 li
273.668 502.584 mo
186.837 502.584 li
273.668 486.45 mo
273.668 502.584 li
186.837 486.45 mo
273.668 486.45 li
.694423 .677272 .637385 .738643 cmyk
@
271.896 481.32 mo
271.896 486.264 li
268.633 481.32 mo
268.633 486.264 li
265.368 481.32 mo
265.368 486.264 li
262.103 481.32 mo
262.103 486.264 li
258.839 481.32 mo
258.839 486.264 li
255.574 481.32 mo
255.574 486.264 li
252.31 481.32 mo
252.31 486.264 li
249.046 481.32 mo
249.046 486.264 li
245.782 481.32 mo
245.782 486.264 li
242.518 481.32 mo
242.518 486.264 li
239.252 481.32 mo
239.252 486.264 li
235.988 481.32 mo
235.988 486.264 li
232.725 481.32 mo
232.725 486.264 li
229.46 481.32 mo
229.46 486.264 li
226.195 481.32 mo
226.195 486.264 li
222.932 481.32 mo
222.932 486.264 li
219.667 481.32 mo
219.667 486.264 li
216.402 481.32 mo
216.402 486.264 li
213.139 481.32 mo
213.139 486.264 li
209.874 481.32 mo
209.874 486.264 li
206.609 481.32 mo
206.609 486.264 li
203.345 481.32 mo
203.345 486.264 li
200.08 481.32 mo
200.08 486.264 li
196.816 481.32 mo
196.816 486.264 li
193.552 481.32 mo
193.552 486.264 li
190.287 481.32 mo
190.287 486.264 li
187.023 481.32 mo
187.023 486.264 li
187.023 484.584 mo
273.481 484.584 li
187.023 481.32 mo
273.481 481.32 li
0 0 0 0 cmyk
@
186.837 486.45 mo
186.837 481.134 li
273.668 486.45 mo
186.837 486.45 li
273.668 481.134 mo
273.668 486.45 li
186.837 481.134 mo
273.668 481.134 li
.694423 .677272 .637385 .738643 cmyk
@
163.332 482.905 mo
163.332 484.211 li
160.069 482.905 mo
160.069 484.211 li
156.804 482.905 mo
156.804 484.211 li
153.539 482.905 mo
153.539 484.211 li
150.275 482.905 mo
150.275 484.211 li
147.011 482.905 mo
147.011 484.211 li
143.747 482.905 mo
143.747 484.211 li
140.483 482.905 mo
140.483 484.211 li
137.218 482.905 mo
137.218 484.211 li
133.954 482.905 mo
133.954 484.211 li
130.689 482.905 mo
130.689 484.211 li
127.425 482.905 mo
127.425 484.211 li
124.161 482.905 mo
124.161 484.211 li
120.896 482.905 mo
120.896 484.211 li
117.632 482.905 mo
117.632 484.211 li
114.367 482.905 mo
114.367 484.211 li
111.104 482.905 mo
111.104 484.211 li
107.839 482.905 mo
107.839 484.211 li
104.575 482.905 mo
104.575 484.211 li
101.309 482.905 mo
101.309 484.211 li
98.045 482.905 mo
98.045 484.211 li
94.781 482.905 mo
94.781 484.211 li
91.516 482.905 mo
91.516 484.211 li
88.252 482.905 mo
88.252 484.211 li
84.988 482.905 mo
84.988 484.211 li
81.724 482.905 mo
81.724 484.211 li
78.459 482.905 mo
78.459 484.211 li
.0149538 .94815 .00277714 0 cmyk
@
78.272 484.398 mo
78.272 482.719 li
165.105 484.398 mo
78.272 484.398 li
165.105 482.719 mo
165.105 484.398 li
78.272 482.719 mo
165.105 482.719 li
.694423 .677272 .637385 .738643 cmyk
@
271.896 473.859 mo
271.896 480.947 li
268.633 473.859 mo
268.633 480.947 li
265.368 473.859 mo
265.368 480.947 li
262.103 473.859 mo
262.103 480.947 li
258.839 473.859 mo
258.839 480.947 li
255.574 473.859 mo
255.574 480.947 li
252.31 473.859 mo
252.31 480.947 li
249.046 473.859 mo
249.046 480.947 li
245.782 473.859 mo
245.782 480.947 li
242.518 473.859 mo
242.518 480.947 li
239.252 473.859 mo
239.252 480.947 li
235.988 473.859 mo
235.988 480.947 li
232.725 473.859 mo
232.725 480.947 li
229.46 473.859 mo
229.46 480.947 li
226.195 473.859 mo
226.195 480.947 li
222.932 473.859 mo
222.932 480.947 li
219.667 473.859 mo
219.667 480.947 li
216.402 473.859 mo
216.402 480.947 li
213.139 473.859 mo
213.139 480.947 li
209.874 473.859 mo
209.874 480.947 li
206.609 473.859 mo
206.609 480.947 li
203.345 473.859 mo
203.345 480.947 li
200.08 473.859 mo
200.08 480.947 li
196.816 473.859 mo
196.816 480.947 li
193.552 473.859 mo
193.552 480.947 li
190.287 473.859 mo
190.287 480.947 li
187.023 473.859 mo
187.023 480.947 li
.0149538 .94815 .00277714 0 cmyk
@
186.837 481.134 mo
186.837 473.672 li
273.668 481.134 mo
186.837 481.134 li
273.668 473.672 mo
273.668 481.134 li
186.837 473.672 mo
273.668 473.672 li
.694423 .677272 .637385 .738643 cmyk
@
124.509 603.793 mo
124.509 604.335 124.509 603.793 124.509 604.335 cv
121.464 604.335 124.509 604.335 121.464 604.335 cv
121.46 604.201 121.482 604.069 121.53 603.944 cv
121.607 603.737 121.731 603.532 121.902 603.331 cv
122.073 603.129 122.32 602.898 122.643 602.633 cv
123.143 602.223 123.481 601.897 123.657 601.658 cv
123.833 601.417 123.921 601.191 123.921 600.977 cv
123.921 600.753 123.841 600.564 123.681 600.41 cv
123.52 600.257 123.311 600.179 123.054 600.179 cv
122.782 600.179 122.563 600.261 122.401 600.423 cv
122.237 600.587 122.154 600.814 122.152 601.103 cv
121.571 601.043 122.152 601.103 121.571 601.043 cv
121.61 600.609 121.761 600.28 122.02 600.052 cv
122.28 599.825 122.629 599.71 123.067 599.71 cv
123.509 599.71 123.858 599.833 124.116 600.079 cv
124.374 600.324 124.503 600.627 124.503 600.99 cv
124.503 601.174 124.465 601.356 124.39 601.533 cv
124.314 601.711 124.189 601.899 124.014 602.096 cv
123.839 602.292 123.548 602.563 123.142 602.907 cv
122.803 603.192 122.585 603.384 122.488 603.487 cv
122.391 603.588 122.312 603.691 122.249 603.793 cv
124.509 603.793 122.249 603.793 124.509 603.793 cv
f
230.01 603.121 mo
230.576 603.044 230.01 603.121 230.576 603.044 cv
230.64 603.366 230.751 603.596 230.907 603.738 cv
231.063 603.878 231.253 603.95 231.477 603.95 cv
231.743 603.95 231.969 603.857 232.15 603.673 cv
232.334 603.489 232.427 603.261 232.427 602.989 cv
232.427 602.729 232.341 602.514 232.172 602.346 cv
232.002 602.176 231.786 602.093 231.524 602.093 cv
231.418 602.093 231.284 602.114 231.126 602.156 cv
231.188 601.659 231.126 602.156 231.188 601.659 cv
231.226 601.664 231.256 601.666 231.279 601.666 cv
231.52 601.666 231.736 601.602 231.93 601.477 cv
232.122 601.352 232.219 601.158 232.219 600.896 cv
232.219 600.689 232.148 600.517 232.009 600.38 cv
231.868 600.244 231.686 600.176 231.465 600.176 cv
231.245 600.176 231.061 600.246 230.915 600.383 cv
230.769 600.522 230.673 600.729 230.632 601.005 cv
230.067 600.906 230.632 601.005 230.067 600.906 cv
230.136 600.526 230.293 600.231 230.538 600.023 cv
230.783 599.816 231.088 599.71 231.452 599.71 cv
231.703 599.71 231.935 599.765 232.146 599.873 cv
232.357 599.98 232.519 600.128 232.633 600.314 cv
232.744 600.5 232.8 600.699 232.8 600.909 cv
232.8 601.107 232.747 601.289 232.641 601.452 cv
232.533 601.615 232.375 601.745 232.165 601.841 cv
232.437 601.904 232.649 602.035 232.8 602.233 cv
232.951 602.431 233.026 602.678 233.026 602.976 cv
233.026 603.378 232.88 603.719 232.587 603.999 cv
232.293 604.278 231.923 604.418 231.475 604.418 cv
231.069 604.418 230.734 604.297 230.467 604.056 cv
230.2 603.816 230.048 603.503 230.01 603.121 cv
f
58.225 593.243 mo
58.225 594.328 58.352 595.049 58.606 595.409 cv
58.86 595.768 59.173 595.948 59.546 595.948 cv
59.919 595.948 60.232 595.768 60.486 595.407 cv
60.74 595.045 60.867 594.325 60.867 593.243 cv
60.867 592.155 60.74 591.432 60.486 591.075 cv
60.232 590.716 59.916 590.537 59.537 590.537 cv
59.165 590.537 58.867 590.695 58.645 591.011 cv
58.365 591.414 58.225 592.158 58.225 593.243 cv
cp
57.391 593.243 mo
57.391 592.46 57.471 591.832 57.632 591.355 cv
57.793 590.879 58.032 590.511 58.349 590.253 cv
58.666 589.996 59.065 589.866 59.546 589.866 cv
59.901 589.866 60.212 589.937 60.479 590.08 cv
60.747 590.223 60.968 590.428 61.142 590.697 cv
61.316 590.966 61.453 591.294 61.552 591.68 cv
61.651 592.066 61.701 592.587 61.701 593.243 cv
61.701 594.018 61.622 594.643 61.462 595.121 cv
61.303 595.597 61.064 595.965 60.747 596.225 cv
60.431 596.485 60.03 596.616 59.546 596.616 cv
58.909 596.616 58.408 596.387 58.044 595.929 cv
57.609 595.379 57.391 594.484 57.391 593.243 cv
f
60.448 564.327 mo
59.636 564.327 60.448 564.327 59.636 564.327 cv
59.636 559.155 59.636 564.327 59.636 559.155 cv
59.44 559.34 59.184 559.527 58.867 559.713 cv
58.55 559.9 58.266 560.041 58.013 560.133 cv
58.013 559.347 58.013 560.133 58.013 559.347 cv
58.467 559.134 58.864 558.876 59.203 558.573 cv
59.543 558.269 59.783 557.975 59.925 557.689 cv
60.448 557.689 59.925 557.689 60.448 557.689 cv
60.448 564.327 60.448 557.689 60.448 564.327 cv
f
61.656 531.369 mo
61.656 532.149 61.656 531.369 61.656 532.149 cv
57.287 532.149 61.656 532.149 57.287 532.149 cv
57.281 531.954 57.313 531.766 57.382 531.585 cv
57.493 531.289 57.671 530.996 57.916 530.706 cv
58.161 530.418 58.515 530.084 58.978 529.707 cv
59.696 529.117 60.182 528.65 60.434 528.305 cv
60.686 527.962 60.813 527.636 60.813 527.331 cv
60.813 527.007 60.698 526.738 60.468 526.516 cv
60.238 526.295 59.938 526.184 59.568 526.184 cv
59.178 526.184 58.865 526.302 58.631 526.536 cv
58.396 526.771 58.277 527.095 58.274 527.509 cv
57.441 527.424 58.274 527.509 57.441 527.424 cv
57.497 526.802 57.712 526.328 58.085 526.001 cv
58.458 525.676 58.958 525.512 59.586 525.512 cv
60.221 525.512 60.723 525.689 61.093 526.041 cv
61.462 526.392 61.647 526.828 61.647 527.348 cv
61.647 527.613 61.593 527.873 61.484 528.127 cv
61.376 528.384 61.197 528.653 60.946 528.935 cv
60.695 529.217 60.278 529.605 59.695 530.097 cv
59.208 530.506 58.895 530.785 58.757 530.929 cv
58.619 531.076 58.505 531.222 58.415 531.369 cv
61.656 531.369 58.415 531.369 61.656 531.369 cv
f
57.395 498.322 mo
58.207 498.213 57.395 498.322 58.207 498.213 cv
58.3 498.673 58.459 499.004 58.683 499.207 cv
58.906 499.411 59.18 499.512 59.501 499.512 cv
59.882 499.512 60.204 499.379 60.468 499.115 cv
60.731 498.85 60.863 498.523 60.863 498.132 cv
60.863 497.759 60.741 497.453 60.497 497.21 cv
60.254 496.968 59.944 496.847 59.568 496.847 cv
59.415 496.847 59.224 496.877 58.996 496.937 cv
59.086 496.225 58.996 496.937 59.086 496.225 cv
59.141 496.231 59.184 496.234 59.217 496.234 cv
59.562 496.234 59.874 496.144 60.15 495.964 cv
60.427 495.783 60.565 495.505 60.565 495.13 cv
60.565 494.832 60.464 494.586 60.263 494.39 cv
60.062 494.195 59.802 494.097 59.483 494.097 cv
59.167 494.097 58.904 494.196 58.693 494.394 cv
58.483 494.593 58.348 494.891 58.288 495.287 cv
57.476 495.143 58.288 495.287 57.476 495.143 cv
57.576 494.599 57.801 494.177 58.152 493.878 cv
58.505 493.58 58.942 493.43 59.465 493.43 cv
59.826 493.43 60.158 493.507 60.461 493.662 cv
60.765 493.817 60.997 494.028 61.158 494.295 cv
61.319 494.563 61.399 494.847 61.399 495.147 cv
61.399 495.433 61.323 495.693 61.169 495.928 cv
61.016 496.162 60.789 496.348 60.488 496.487 cv
60.879 496.577 61.183 496.764 61.399 497.048 cv
61.616 497.332 61.724 497.687 61.724 498.114 cv
61.724 498.691 61.513 499.181 61.093 499.581 cv
60.672 499.983 60.14 500.184 59.496 500.184 cv
58.916 500.184 58.434 500.011 58.051 499.665 cv
57.668 499.319 57.45 498.872 57.395 498.322 cv
f
59.992 465.563 mo
59.992 462.583 59.992 465.563 59.992 462.583 cv
57.923 465.563 59.992 462.583 57.923 465.563 cv
59.992 465.563 57.923 465.563 59.992 465.563 cv
cp
59.992 467.89 mo
59.992 466.307 59.992 467.89 59.992 466.307 cv
57.125 466.307 59.992 466.307 57.125 466.307 cv
57.125 465.563 57.125 466.307 57.125 465.563 cv
60.141 461.28 57.125 465.563 60.141 461.28 cv
60.804 461.28 60.141 461.28 60.804 461.28 cv
60.804 465.563 60.804 461.28 60.804 465.563 cv
61.696 465.563 60.804 465.563 61.696 465.563 cv
61.696 466.307 61.696 465.563 61.696 466.307 cv
60.804 466.307 61.696 466.307 60.804 466.307 cv
60.804 467.89 60.804 466.307 60.804 467.89 cv
59.992 467.89 60.804 467.89 59.992 467.89 cv
f
57.391 433.982 mo
58.243 433.91 57.391 433.982 58.243 433.91 cv
58.306 434.325 58.453 434.637 58.683 434.846 cv
58.912 435.055 59.19 435.159 59.514 435.159 cv
59.905 435.159 60.236 435.012 60.506 434.717 cv
60.777 434.423 60.912 434.032 60.912 433.545 cv
60.912 433.082 60.782 432.717 60.522 432.449 cv
60.262 432.182 59.922 432.048 59.501 432.048 cv
59.239 432.048 59.003 432.107 58.793 432.226 cv
58.582 432.345 58.417 432.499 58.297 432.688 cv
57.535 432.589 58.297 432.688 57.535 432.589 cv
58.176 429.194 57.535 432.589 58.176 429.194 cv
61.462 429.194 58.176 429.194 61.462 429.194 cv
61.462 429.97 61.462 429.194 61.462 429.97 cv
58.825 429.97 61.462 429.97 58.825 429.97 cv
58.469 431.746 58.825 429.97 58.469 431.746 cv
58.865 431.47 59.282 431.332 59.717 431.332 cv
60.294 431.332 60.782 431.531 61.178 431.931 cv
61.575 432.331 61.773 432.845 61.773 433.473 cv
61.773 434.071 61.599 434.588 61.25 435.023 cv
60.826 435.559 60.248 435.826 59.514 435.826 cv
58.913 435.826 58.422 435.658 58.042 435.321 cv
57.662 434.985 57.445 434.539 57.391 433.982 cv
f
gsave
284.814 422.75 mo
40.581 422.75 li
40.581 621.311 li
284.814 621.311 li
cp
clp
.653 lw
284.488 593.984 mo
284.488 433.195 li
281.316 433.195 li
284.488 449.237 mo
282.902 449.237 li
284.488 465.372 mo
281.316 465.372 li
284.488 481.413 mo
282.902 481.413 li
284.488 497.548 mo
281.316 497.548 li
284.488 513.589 mo
282.902 513.589 li
284.488 529.631 mo
281.316 529.631 li
284.488 545.765 mo
282.902 545.765 li
284.488 561.808 mo
281.316 561.808 li
284.488 577.943 mo
282.902 577.943 li
284.488 593.984 mo
281.316 593.984 li
67.454 433.195 mo
284.488 433.195 li
284.488 434.781 li
230.205 433.195 mo
230.205 436.366 li
176.017 433.195 mo
176.017 434.781 li
121.735 433.195 mo
121.735 436.366 li
67.454 433.195 mo
67.454 434.781 li
67.454 593.984 mo
67.454 433.195 li
64.282 433.195 mo
67.454 433.195 li
65.868 449.237 mo
67.454 449.237 li
64.282 465.372 mo
67.454 465.372 li
65.868 481.413 mo
67.454 481.413 li
64.282 497.548 mo
67.454 497.548 li
65.868 513.589 mo
67.454 513.589 li
64.282 529.631 mo
67.454 529.631 li
65.868 545.765 mo
67.454 545.765 li
64.282 561.808 mo
67.454 561.808 li
65.868 577.943 mo
67.454 577.943 li
64.282 593.984 mo
284.488 593.984 li
284.488 595.57 mo
284.488 593.984 li
230.205 597.155 mo
230.205 593.984 li
176.017 595.57 mo
176.017 593.984 li
121.735 597.155 mo
121.735 593.984 li
67.454 595.57 mo
67.454 593.984 li
@
grestore
161.747 465.465 mo
235.895 465.465 li
235.895 423.59 li
161.747 423.59 li
cp
0 0 0 0 cmyk
f
gsave
284.814 422.75 mo
40.581 422.75 li
40.581 621.311 li
284.814 621.311 li
cp
clp
.373 lw
161.747 423.589 mo
235.895 423.589 li
235.895 465.464 li
161.747 465.464 li
cp
.694423 .677272 .637385 .738643 cmyk
@
grestore
180.774 436.739 mo
185.064 432.449 li
176.204 436.739 mo
183.572 429.372 li
171.634 436.739 mo
179.002 429.372 li
167.063 436.739 mo
174.432 429.372 li
165.292 433.941 mo
169.862 429.372 li
165.292 429.372 mo
165.292 429.372 li
.0161135 .957946 .906828 9.15541e-05 cmyk
@
165.105 436.926 mo
165.105 429.185 li
185.251 436.926 mo
165.105 436.926 li
185.251 429.185 mo
185.251 436.926 li
165.105 429.185 mo
185.251 429.185 li
.694423 .677272 .637385 .738643 cmyk
@
191.524 434.095 mo
191.375 433.526 191.183 433.129 190.948 432.904 cv
190.713 432.679 190.475 432.566 190.23 432.566 cv
189.96 432.566 189.734 432.715 189.555 433.012 cv
189.376 433.309 189.286 433.782 189.286 434.431 cv
189.286 434.815 189.324 435.117 189.402 435.336 cv
189.479 435.556 189.597 435.726 189.752 435.846 cv
189.908 435.966 190.073 436.026 190.248 436.026 cv
190.461 436.026 190.654 435.929 190.831 435.732 cv
191.071 435.467 191.303 434.921 191.524 434.095 cv
cp
192.025 432.384 mo
192.713 432.384 192.025 432.384 192.713 432.384 cv
192.175 434.269 192.713 432.384 192.175 434.269 cv
192.139 434.388 192.082 434.575 192.005 434.829 cv
192.109 435.254 192.188 435.508 192.241 435.591 cv
192.34 435.743 192.466 435.819 192.618 435.819 cv
192.728 435.819 192.831 435.773 192.925 435.683 cv
193.019 435.591 193.081 435.449 193.111 435.255 cv
193.277 435.255 193.111 435.255 193.277 435.255 cv
193.238 435.653 193.154 435.929 193.025 436.081 cv
192.897 436.232 192.749 436.308 192.58 436.308 cv
192.424 436.308 192.28 436.242 192.151 436.109 cv
192.023 435.977 191.908 435.692 191.806 435.255 cv
191.684 435.496 191.565 435.678 191.449 435.803 cv
191.286 435.974 191.109 436.102 190.919 436.186 cv
190.728 436.27 190.512 436.312 190.269 436.312 cv
189.658 436.312 189.209 436.109 188.921 435.704 cv
188.634 435.297 188.49 434.834 188.49 434.315 cv
188.49 433.707 188.658 433.215 188.996 432.838 cv
189.332 432.46 189.727 432.272 190.181 432.272 cv
190.496 432.272 190.774 432.368 191.015 432.56 cv
191.255 432.752 191.473 433.109 191.669 433.631 cv
192.025 432.384 191.669 433.631 192.025 432.384 cv
f
196.354 434.751 mo
197.157 434.625 196.354 434.751 197.157 434.625 cv
197.201 434.946 197.328 435.192 197.532 435.364 cv
197.738 435.535 198.027 435.621 198.395 435.621 cv
198.769 435.621 199.045 435.545 199.226 435.393 cv
199.406 435.241 199.497 435.063 199.497 434.859 cv
199.497 434.675 199.417 434.531 199.257 434.426 cv
199.146 434.354 198.87 434.262 198.428 434.151 cv
197.833 434.001 197.42 433.871 197.19 433.761 cv
196.961 433.651 196.786 433.499 196.667 433.306 cv
196.549 433.112 196.49 432.898 196.49 432.663 cv
196.49 432.45 196.538 432.252 196.635 432.071 cv
196.733 431.889 196.866 431.738 197.034 431.618 cv
197.161 431.524 197.334 431.445 197.552 431.38 cv
197.769 431.316 198.003 431.284 198.252 431.284 cv
198.628 431.284 198.958 431.338 199.241 431.446 cv
199.526 431.554 199.736 431.701 199.87 431.885 cv
200.006 432.071 200.099 432.317 200.15 432.627 cv
199.356 432.735 200.15 432.627 199.356 432.735 cv
199.321 432.489 199.216 432.296 199.043 432.159 cv
198.871 432.02 198.627 431.951 198.31 431.951 cv
197.937 431.951 197.672 432.013 197.513 432.136 cv
197.353 432.259 197.273 432.403 197.273 432.568 cv
197.273 432.674 197.306 432.768 197.373 432.852 cv
197.439 432.94 197.543 433.012 197.684 433.069 cv
197.766 433.099 198.005 433.168 198.4 433.276 cv
198.975 433.429 199.375 433.555 199.602 433.653 cv
199.829 433.75 200.008 433.893 200.137 434.079 cv
200.266 434.265 200.33 434.497 200.33 434.773 cv
200.33 435.043 200.252 435.298 200.094 435.538 cv
199.936 435.776 199.709 435.961 199.41 436.092 cv
199.113 436.223 198.776 436.288 198.4 436.288 cv
197.779 436.288 197.304 436.159 196.978 435.9 cv
196.652 435.642 196.443 435.258 196.354 434.751 cv
f
203.113 435.454 mo
203.231 436.171 203.113 435.454 203.231 436.171 cv
203.003 436.219 202.798 436.243 202.617 436.243 cv
202.324 436.243 202.095 436.196 201.933 436.103 cv
201.77 436.01 201.656 435.887 201.59 435.736 cv
201.523 435.584 201.491 435.264 201.491 434.778 cv
201.491 432.023 201.491 434.778 201.491 432.023 cv
200.895 432.023 201.491 432.023 200.895 432.023 cv
200.895 431.392 200.895 432.023 200.895 431.392 cv
201.491 431.392 200.895 431.392 201.491 431.392 cv
201.491 430.207 201.491 431.392 201.491 430.207 cv
202.298 429.719 201.491 430.207 202.298 429.719 cv
202.298 431.392 202.298 429.719 202.298 431.392 cv
203.113 431.392 202.298 431.392 203.113 431.392 cv
203.113 432.023 203.113 431.392 203.113 432.023 cv
202.298 432.023 203.113 432.023 202.298 432.023 cv
202.298 434.823 202.298 432.023 202.298 434.823 cv
202.298 435.055 202.312 435.203 202.341 435.269 cv
202.369 435.335 202.416 435.388 202.479 435.427 cv
202.545 435.466 202.637 435.486 202.758 435.486 cv
202.848 435.486 202.967 435.475 203.113 435.454 cv
f
203.944 436.18 mo
203.944 431.392 203.944 436.18 203.944 431.392 cv
204.676 431.392 203.944 431.392 204.676 431.392 cv
204.676 432.118 204.676 431.392 204.676 432.118 cv
204.861 431.778 205.032 431.554 205.191 431.446 cv
205.349 431.338 205.522 431.284 205.711 431.284 cv
205.985 431.284 206.263 431.371 206.545 431.545 cv
206.267 432.298 206.545 431.545 206.267 432.298 cv
206.067 432.181 205.869 432.122 205.671 432.122 cv
205.493 432.122 205.335 432.176 205.193 432.283 cv
205.052 432.389 204.951 432.537 204.892 432.727 cv
204.801 433.015 204.756 433.331 204.756 433.673 cv
204.756 436.18 204.756 433.673 204.756 436.18 cv
203.944 436.18 204.756 436.18 203.944 436.18 cv
f
207.036 436.18 mo
207.036 431.392 207.036 436.18 207.036 431.392 cv
207.847 431.392 207.036 431.392 207.847 431.392 cv
207.847 436.18 207.847 431.392 207.847 436.18 cv
207.036 436.18 207.847 436.18 207.036 436.18 cv
cp
207.036 430.503 mo
207.036 429.571 207.036 430.503 207.036 429.571 cv
207.847 429.571 207.036 429.571 207.847 429.571 cv
207.847 430.503 207.847 429.571 207.847 430.503 cv
207.036 430.503 207.847 430.503 207.036 430.503 cv
f
209.818 433.813 mo
209.818 434.429 209.942 434.884 210.192 435.179 cv
210.441 435.473 210.744 435.621 211.1 435.621 cv
211.459 435.621 211.769 435.468 212.025 435.163 cv
212.282 434.858 212.411 434.385 212.411 433.745 cv
212.411 433.135 212.285 432.678 212.034 432.375 cv
211.783 432.071 211.482 431.919 211.135 431.919 cv
210.789 431.919 210.483 432.081 210.217 432.404 cv
209.95 432.727 209.818 433.197 209.818 433.813 cv
cp
209.083 438.015 mo
209.083 431.392 209.083 438.015 209.083 431.392 cv
209.823 431.392 209.083 431.392 209.823 431.392 cv
209.823 432.014 209.823 431.392 209.823 432.014 cv
209.996 431.77 210.193 431.588 210.413 431.466 cv
210.632 431.344 210.899 431.284 211.211 431.284 cv
211.62 431.284 211.981 431.389 212.293 431.599 cv
212.605 431.81 212.842 432.106 213.001 432.49 cv
213.16 432.873 213.239 433.293 213.239 433.749 cv
213.239 434.24 213.152 434.681 212.977 435.073 cv
212.8 435.465 212.545 435.766 212.21 435.975 cv
211.874 436.184 211.521 436.288 211.152 436.288 cv
210.881 436.288 210.639 436.231 210.424 436.117 cv
210.209 436.002 210.033 435.858 209.894 435.684 cv
209.894 438.015 209.894 435.684 209.894 438.015 cv
209.083 438.015 209.894 438.015 209.083 438.015 cv
f
214.947 433.813 mo
214.947 434.429 215.072 434.884 215.322 435.179 cv
215.571 435.473 215.874 435.621 216.227 435.621 cv
216.589 435.621 216.896 435.468 217.155 435.163 cv
217.412 434.858 217.54 434.385 217.54 433.745 cv
217.54 433.135 217.415 432.678 217.164 432.375 cv
216.912 432.071 216.612 431.919 216.264 431.919 cv
215.919 431.919 215.612 432.081 215.347 432.404 cv
215.08 432.727 214.947 433.197 214.947 433.813 cv
cp
214.213 438.015 mo
214.213 431.392 214.213 438.015 214.213 431.392 cv
214.952 431.392 214.213 431.392 214.952 431.392 cv
214.952 432.014 214.952 431.392 214.952 432.014 cv
215.126 431.77 215.323 431.588 215.543 431.466 cv
215.762 431.344 216.028 431.284 216.341 431.284 cv
216.75 431.284 217.109 431.389 217.423 431.599 cv
217.735 431.81 217.971 432.106 218.131 432.49 cv
218.29 432.873 218.369 433.293 218.369 433.749 cv
218.369 434.24 218.282 434.681 218.105 435.073 cv
217.93 435.465 217.675 435.766 217.34 435.975 cv
217.004 436.184 216.651 436.288 216.282 436.288 cv
216.011 436.288 215.769 436.231 215.554 436.117 cv
215.339 436.002 215.162 435.858 215.024 435.684 cv
215.024 438.015 215.024 435.684 215.024 438.015 cv
214.213 438.015 215.024 438.015 214.213 438.015 cv
f
219.347 436.18 mo
219.347 431.392 219.347 436.18 219.347 431.392 cv
220.158 431.392 219.347 431.392 220.158 431.392 cv
220.158 436.18 220.158 431.392 220.158 436.18 cv
219.347 436.18 220.158 436.18 219.347 436.18 cv
cp
219.347 430.503 mo
219.347 429.571 219.347 430.503 219.347 429.571 cv
220.158 429.571 219.347 429.571 220.158 429.571 cv
220.158 430.503 220.158 429.571 220.158 430.503 cv
219.347 430.503 220.158 430.503 219.347 430.503 cv
f
221.394 436.18 mo
221.394 431.392 221.394 436.18 221.394 431.392 cv
222.125 431.392 221.394 431.392 222.125 431.392 cv
222.125 432.073 222.125 431.392 222.125 432.073 cv
222.476 431.546 222.985 431.284 223.648 431.284 cv
223.936 431.284 224.201 431.335 224.444 431.439 cv
224.686 431.543 224.867 431.679 224.987 431.847 cv
225.108 432.015 225.191 432.215 225.239 432.447 cv
225.269 432.597 225.285 432.86 225.285 433.236 cv
225.285 436.18 225.285 433.236 225.285 436.18 cv
224.474 436.18 225.285 436.18 224.474 436.18 cv
224.474 433.268 224.474 436.18 224.474 433.268 cv
224.474 432.936 224.443 432.69 224.379 432.526 cv
224.316 432.362 224.203 432.231 224.044 432.133 cv
223.882 432.036 223.693 431.987 223.477 431.987 cv
223.131 431.987 222.833 432.097 222.583 432.316 cv
222.332 432.536 222.206 432.952 222.206 433.565 cv
222.206 436.18 222.206 433.565 222.206 436.18 cv
221.394 436.18 222.206 436.18 221.394 436.18 cv
f
227.047 433.7 mo
227.047 434.329 227.172 434.787 227.421 435.075 cv
227.67 435.364 227.983 435.508 228.359 435.508 cv
228.731 435.508 229.044 435.364 229.297 435.078 cv
229.549 434.79 229.676 434.34 229.676 433.727 cv
229.676 433.141 229.545 432.7 229.285 432.402 cv
229.025 432.104 228.712 431.956 228.346 431.956 cv
227.984 431.956 227.679 432.102 227.425 432.395 cv
227.173 432.688 227.047 433.123 227.047 433.7 cv
cp
226.375 436.577 mo
227.164 436.694 226.375 436.577 227.164 436.694 cv
227.197 436.937 227.289 437.115 227.439 437.226 cv
227.641 437.376 227.916 437.451 228.264 437.451 cv
228.64 437.451 228.93 437.376 229.134 437.226 cv
229.339 437.075 229.477 436.865 229.549 436.595 cv
229.591 436.429 229.611 436.082 229.608 435.553 cv
229.254 435.971 228.811 436.18 228.282 436.18 cv
227.624 436.18 227.114 435.942 226.754 435.467 cv
226.394 434.993 226.213 434.423 226.213 433.759 cv
226.213 433.302 226.295 432.88 226.461 432.494 cv
226.627 432.108 226.866 431.81 227.18 431.599 cv
227.494 431.389 227.862 431.284 228.286 431.284 cv
228.852 431.284 229.317 431.512 229.685 431.969 cv
229.685 431.392 229.685 431.969 229.685 431.392 cv
230.433 431.392 229.685 431.392 230.433 431.392 cv
230.433 435.531 230.433 431.392 230.433 435.531 cv
230.433 436.276 230.356 436.804 230.205 437.116 cv
230.054 437.426 229.812 437.672 229.483 437.852 cv
229.154 438.033 228.75 438.123 228.269 438.123 cv
227.698 438.123 227.236 437.995 226.885 437.738 cv
226.533 437.48 226.362 437.093 226.375 436.577 cv
f
183.572 440.749 mo
185.064 442.242 li
179.002 440.749 mo
185.064 446.812 li
174.432 440.749 mo
181.8 448.118 li
169.862 440.749 mo
177.229 448.118 li
165.292 440.749 mo
172.66 448.118 li
165.292 445.32 mo
168.09 448.118 li
165.292 440.749 mo
172.66 448.118 li
180.774 448.118 mo
185.064 443.828 li
176.204 448.118 mo
183.572 440.749 li
171.634 448.118 mo
179.002 440.749 li
167.063 448.118 mo
174.432 440.749 li
165.292 445.32 mo
169.862 440.749 li
165.292 440.749 mo
165.292 440.749 li
.95346 .916228 .0104982 .0011902 cmyk
@
165.105 448.304 mo
165.105 440.563 li
185.251 448.304 mo
165.105 448.304 li
185.251 440.563 mo
185.251 448.304 li
165.105 440.563 mo
185.251 440.563 li
.694423 .677272 .637385 .738643 cmyk
@
191.583 447.558 mo
190.77 447.558 191.583 447.558 190.77 447.558 cv
190.77 442.387 190.77 447.558 190.77 442.387 cv
190.575 442.573 190.318 442.76 190.001 442.946 cv
189.685 443.133 189.4 443.272 189.147 443.366 cv
189.147 442.581 189.147 443.366 189.147 442.581 cv
189.602 442.368 189.998 442.109 190.338 441.805 cv
190.678 441.502 190.919 441.207 191.059 440.922 cv
191.583 440.922 191.059 440.922 191.583 440.922 cv
191.583 447.558 191.583 440.922 191.583 447.558 cv
f
193.88 447.558 mo
193.88 442.77 193.88 447.558 193.88 442.77 cv
194.611 442.77 193.88 442.77 194.611 442.77 cv
194.611 443.451 194.611 442.77 194.611 443.451 cv
194.963 442.925 195.471 442.662 196.135 442.662 cv
196.423 442.662 196.689 442.714 196.932 442.817 cv
197.173 442.921 197.353 443.057 197.474 443.226 cv
197.595 443.394 197.679 443.594 197.726 443.825 cv
197.756 443.975 197.771 444.239 197.771 444.614 cv
197.771 447.558 197.771 444.614 197.771 447.558 cv
196.96 447.558 197.771 447.558 196.96 447.558 cv
196.96 444.646 196.96 447.558 196.96 444.646 cv
196.96 444.315 196.929 444.067 196.864 443.904 cv
196.802 443.74 196.69 443.609 196.529 443.512 cv
196.368 443.414 196.18 443.366 195.963 443.366 cv
195.618 443.366 195.319 443.475 195.068 443.694 cv
194.817 443.914 194.691 444.331 194.691 444.943 cv
194.691 447.558 194.691 444.943 194.691 447.558 cv
193.88 447.558 194.691 447.558 193.88 447.558 cv
f
202.356 445.191 mo
202.356 445.807 202.48 446.263 202.731 446.557 cv
202.98 446.852 203.282 446.999 203.638 446.999 cv
203.998 446.999 204.307 446.847 204.563 446.541 cv
204.82 446.237 204.949 445.764 204.949 445.123 cv
204.949 444.513 204.823 444.057 204.572 443.753 cv
204.321 443.45 204.022 443.298 203.673 443.298 cv
203.327 443.298 203.021 443.459 202.756 443.782 cv
202.49 444.105 202.356 444.575 202.356 445.191 cv
cp
201.621 449.393 mo
201.621 442.77 201.621 449.393 201.621 442.77 cv
202.361 442.77 201.621 442.77 202.361 442.77 cv
202.361 443.393 202.361 442.77 202.361 443.393 cv
202.536 443.149 202.732 442.966 202.952 442.845 cv
203.171 442.723 203.437 442.662 203.749 442.662 cv
204.158 442.662 204.519 442.767 204.831 442.977 cv
205.144 443.188 205.38 443.485 205.54 443.868 cv
205.698 444.251 205.778 444.671 205.778 445.128 cv
205.778 445.618 205.69 446.059 205.516 446.452 cv
205.339 446.843 205.084 447.144 204.748 447.353 cv
204.413 447.562 204.061 447.666 203.69 447.666 cv
203.42 447.666 203.179 447.609 202.963 447.495 cv
202.748 447.381 202.571 447.237 202.433 447.062 cv
202.433 449.393 202.433 447.062 202.433 449.393 cv
201.621 449.393 202.433 449.393 201.621 449.393 cv
f
206.755 447.558 mo
206.755 442.77 206.755 447.558 206.755 442.77 cv
207.567 442.77 206.755 442.77 207.567 442.77 cv
207.567 447.558 207.567 442.77 207.567 447.558 cv
206.755 447.558 207.567 447.558 206.755 447.558 cv
cp
206.755 441.882 mo
206.755 440.949 206.755 441.882 206.755 440.949 cv
207.567 440.949 206.755 440.949 207.567 440.949 cv
207.567 441.882 207.567 440.949 207.567 441.882 cv
206.755 441.882 207.567 441.882 206.755 441.882 cv
f
211.928 445.804 mo
212.726 445.908 211.928 445.804 212.726 445.908 cv
212.639 446.458 212.416 446.889 212.057 447.199 cv
211.696 447.511 211.256 447.666 210.733 447.666 cv
210.078 447.666 209.551 447.452 209.152 447.024 cv
208.755 446.596 208.556 445.982 208.556 445.182 cv
208.556 444.665 208.641 444.213 208.812 443.825 cv
208.984 443.437 209.244 443.147 209.594 442.953 cv
209.944 442.759 210.326 442.662 210.737 442.662 cv
211.257 442.662 211.683 442.793 212.014 443.057 cv
212.344 443.319 212.556 443.693 212.649 444.177 cv
211.86 444.298 212.649 444.177 211.86 444.298 cv
211.785 443.977 211.652 443.735 211.461 443.573 cv
211.269 443.41 211.039 443.329 210.769 443.329 cv
210.359 443.329 210.028 443.476 209.772 443.769 cv
209.517 444.061 209.39 444.525 209.39 445.16 cv
209.39 445.803 209.513 446.27 209.759 446.562 cv
210.006 446.853 210.327 446.999 210.724 446.999 cv
211.042 446.999 211.309 446.901 211.521 446.706 cv
211.735 446.511 211.87 446.21 211.928 445.804 cv
f
213.472 447.558 mo
213.472 440.949 213.472 447.558 213.472 440.949 cv
214.282 440.949 213.472 440.949 214.282 440.949 cv
214.282 444.718 214.282 440.949 214.282 444.718 cv
216.203 442.77 214.282 444.718 216.203 442.77 cv
217.253 442.77 216.203 442.77 217.253 442.77 cv
215.424 444.547 217.253 442.77 215.424 444.547 cv
217.438 447.558 215.424 444.547 217.438 447.558 cv
216.437 447.558 217.438 447.558 216.437 447.558 cv
214.855 445.11 216.437 447.558 214.855 445.11 cv
214.282 445.66 214.855 445.11 214.282 445.66 cv
214.282 447.558 214.282 445.66 214.282 447.558 cv
213.472 447.558 214.282 447.558 213.472 447.558 cv
f
217.814 445.574 mo
217.814 444.758 217.814 445.574 217.814 444.758 cv
220.308 444.758 217.814 444.758 220.308 444.758 cv
220.308 445.574 220.308 444.758 220.308 445.574 cv
217.814 445.574 220.308 445.574 217.814 445.574 cv
f
224.346 447.558 mo
224.346 446.855 224.346 447.558 224.346 446.855 cv
223.973 447.396 223.467 447.666 222.826 447.666 cv
222.544 447.666 222.279 447.612 222.034 447.504 cv
221.79 447.396 221.608 447.26 221.49 447.096 cv
221.37 446.933 221.287 446.731 221.239 446.494 cv
221.206 446.334 221.189 446.082 221.189 445.737 cv
221.189 442.77 221.189 445.737 221.189 442.77 cv
222.001 442.77 221.189 442.77 222.001 442.77 cv
222.001 445.426 222.001 442.77 222.001 445.426 cv
222.001 445.85 222.018 446.135 222.05 446.282 cv
222.102 446.496 222.21 446.663 222.376 446.785 cv
222.541 446.907 222.745 446.967 222.988 446.967 cv
223.232 446.967 223.46 446.905 223.674 446.781 cv
223.887 446.655 224.039 446.486 224.127 446.271 cv
224.215 446.056 224.261 445.745 224.261 445.335 cv
224.261 442.77 224.261 445.335 224.261 442.77 cv
225.071 442.77 224.261 442.77 225.071 442.77 cv
225.071 447.558 225.071 442.77 225.071 447.558 cv
224.346 447.558 225.071 447.558 224.346 447.558 cv
f
227.072 445.191 mo
227.072 445.807 227.197 446.263 227.446 446.557 cv
227.696 446.852 227.998 446.999 228.353 446.999 cv
228.713 446.999 229.022 446.847 229.279 446.541 cv
229.536 446.237 229.665 445.764 229.665 445.123 cv
229.665 444.513 229.539 444.057 229.288 443.753 cv
229.037 443.45 228.736 443.298 228.389 443.298 cv
228.043 443.298 227.737 443.459 227.472 443.782 cv
227.205 444.105 227.072 444.575 227.072 445.191 cv
cp
226.337 449.393 mo
226.337 442.77 226.337 449.393 226.337 442.77 cv
227.077 442.77 226.337 442.77 227.077 442.77 cv
227.077 443.393 227.077 442.77 227.077 443.393 cv
227.251 443.149 227.447 442.966 227.668 442.845 cv
227.887 442.723 228.153 442.662 228.465 442.662 cv
228.874 442.662 229.235 442.767 229.547 442.977 cv
229.86 443.188 230.096 443.485 230.256 443.868 cv
230.414 444.251 230.494 444.671 230.494 445.128 cv
230.494 445.618 230.406 446.059 230.23 446.452 cv
230.055 446.843 229.799 447.144 229.464 447.353 cv
229.128 447.562 228.776 447.666 228.406 447.666 cv
228.137 447.666 227.894 447.609 227.679 447.495 cv
227.464 447.381 227.287 447.237 227.149 447.062 cv
227.149 449.393 227.149 447.062 227.149 449.393 cv
226.337 449.393 227.149 449.393 226.337 449.393 cv
f
184.878 452.128 mo
184.878 459.496 li
181.613 452.128 mo
181.613 459.496 li
178.349 452.128 mo
178.349 459.496 li
175.084 452.128 mo
175.084 459.496 li
171.82 452.128 mo
171.82 459.496 li
168.557 452.128 mo
168.557 459.496 li
165.292 452.128 mo
165.292 459.496 li
165.292 458.657 mo
185.064 458.657 li
165.292 455.393 mo
185.064 455.393 li
165.292 452.128 mo
185.064 452.128 li
0 0 0 0 cmyk
@
165.105 459.682 mo
165.105 451.942 li
185.251 459.682 mo
165.105 459.682 li
185.251 451.942 mo
185.251 459.682 li
165.105 451.942 mo
185.251 451.942 li
.694423 .677272 .637385 .738643 cmyk
@
192.79 458.156 mo
192.79 458.937 192.79 458.156 192.79 458.937 cv
188.421 458.937 192.79 458.937 188.421 458.937 cv
188.416 458.741 188.447 458.553 188.517 458.373 cv
188.628 458.076 188.806 457.783 189.051 457.494 cv
189.295 457.205 189.649 456.872 190.112 456.493 cv
190.831 455.904 191.316 455.437 191.568 455.093 cv
191.821 454.749 191.947 454.424 191.947 454.117 cv
191.947 453.795 191.832 453.524 191.602 453.303 cv
191.372 453.082 191.072 452.972 190.703 452.972 cv
190.312 452.972 189.999 453.089 189.765 453.323 cv
189.53 453.558 189.412 453.883 189.409 454.297 cv
188.575 454.212 189.409 454.297 188.575 454.212 cv
188.632 453.589 188.847 453.115 189.22 452.789 cv
189.593 452.463 190.093 452.3 190.721 452.3 cv
191.355 452.3 191.857 452.476 192.227 452.828 cv
192.598 453.179 192.781 453.615 192.781 454.135 cv
192.781 454.399 192.727 454.66 192.619 454.915 cv
192.511 455.17 192.331 455.439 192.081 455.722 cv
191.83 456.004 191.412 456.393 190.829 456.885 cv
190.342 457.294 190.03 457.571 189.892 457.717 cv
189.753 457.863 189.639 458.009 189.549 458.156 cv
192.79 458.156 189.549 458.156 192.79 458.156 cv
f
193.88 458.937 mo
193.88 454.148 193.88 458.937 193.88 454.148 cv
194.611 454.148 193.88 454.148 194.611 454.148 cv
194.611 454.829 194.611 454.148 194.611 454.829 cv
194.963 454.303 195.471 454.04 196.135 454.04 cv
196.423 454.04 196.689 454.092 196.932 454.196 cv
197.173 454.299 197.353 454.435 197.474 454.603 cv
197.595 454.772 197.679 454.972 197.726 455.204 cv
197.756 455.354 197.771 455.617 197.771 455.993 cv
197.771 458.937 197.771 455.993 197.771 458.937 cv
196.96 458.937 197.771 458.937 196.96 458.937 cv
196.96 456.024 196.96 458.937 196.96 456.024 cv
196.96 455.693 196.929 455.446 196.864 455.283 cv
196.802 455.119 196.69 454.988 196.529 454.89 cv
196.368 454.792 196.18 454.744 195.963 454.744 cv
195.618 454.744 195.319 454.853 195.068 455.073 cv
194.817 455.292 194.691 455.708 194.691 456.321 cv
194.691 458.937 194.691 456.321 194.691 458.937 cv
193.88 458.937 194.691 458.937 193.88 458.937 cv
f
202.356 456.57 mo
202.356 457.185 202.48 457.641 202.731 457.935 cv
202.98 458.23 203.282 458.377 203.638 458.377 cv
203.998 458.377 204.307 458.225 204.563 457.919 cv
204.82 457.615 204.949 457.142 204.949 456.502 cv
204.949 455.892 204.823 455.435 204.572 455.131 cv
204.321 454.828 204.022 454.676 203.673 454.676 cv
203.327 454.676 203.021 454.837 202.756 455.161 cv
202.49 455.484 202.356 455.954 202.356 456.57 cv
cp
201.621 460.771 mo
201.621 454.148 201.621 460.771 201.621 454.148 cv
202.361 454.148 201.621 454.148 202.361 454.148 cv
202.361 454.771 202.361 454.148 202.361 454.771 cv
202.536 454.527 202.732 454.345 202.952 454.223 cv
203.171 454.101 203.437 454.04 203.749 454.04 cv
204.158 454.04 204.519 454.145 204.831 454.356 cv
205.144 454.566 205.38 454.863 205.54 455.246 cv
205.698 455.63 205.778 456.05 205.778 456.506 cv
205.778 456.997 205.69 457.437 205.516 457.83 cv
205.339 458.222 205.084 458.522 204.748 458.731 cv
204.413 458.94 204.061 459.045 203.69 459.045 cv
203.42 459.045 203.179 458.988 202.963 458.873 cv
202.748 458.759 202.571 458.615 202.433 458.44 cv
202.433 460.771 202.433 458.44 202.433 460.771 cv
201.621 460.771 202.433 460.771 201.621 460.771 cv
f
206.755 458.937 mo
206.755 454.148 206.755 458.937 206.755 454.148 cv
207.567 454.148 206.755 454.148 207.567 454.148 cv
207.567 458.937 207.567 454.148 207.567 458.937 cv
206.755 458.937 207.567 458.937 206.755 458.937 cv
cp
206.755 453.261 mo
206.755 452.327 206.755 453.261 206.755 452.327 cv
207.567 452.327 206.755 452.327 207.567 452.327 cv
207.567 453.261 207.567 452.327 207.567 453.261 cv
206.755 453.261 207.567 453.261 206.755 453.261 cv
f
211.928 457.183 mo
212.726 457.286 211.928 457.183 212.726 457.286 cv
212.639 457.836 212.416 458.267 212.057 458.578 cv
211.696 458.889 211.256 459.045 210.733 459.045 cv
210.078 459.045 209.551 458.831 209.152 458.402 cv
208.755 457.974 208.556 457.36 208.556 456.56 cv
208.556 456.044 208.641 455.591 208.812 455.204 cv
208.984 454.815 209.244 454.525 209.594 454.331 cv
209.944 454.138 210.326 454.04 210.737 454.04 cv
211.257 454.04 211.683 454.172 212.014 454.435 cv
212.344 454.698 212.556 455.071 212.649 455.555 cv
211.86 455.677 212.649 455.555 211.86 455.677 cv
211.785 455.355 211.652 455.113 211.461 454.951 cv
211.269 454.789 211.039 454.707 210.769 454.707 cv
210.359 454.707 210.028 454.854 209.772 455.147 cv
209.517 455.44 209.39 455.904 209.39 456.538 cv
209.39 457.181 209.513 457.649 209.759 457.94 cv
210.006 458.232 210.327 458.377 210.724 458.377 cv
211.042 458.377 211.309 458.28 211.521 458.084 cv
211.735 457.889 211.87 457.589 211.928 457.183 cv
f
213.472 458.937 mo
213.472 452.327 213.472 458.937 213.472 452.327 cv
214.282 452.327 213.472 452.327 214.282 452.327 cv
214.282 456.096 214.282 452.327 214.282 456.096 cv
216.203 454.148 214.282 456.096 216.203 454.148 cv
217.253 454.148 216.203 454.148 217.253 454.148 cv
215.424 455.925 217.253 454.148 215.424 455.925 cv
217.438 458.937 215.424 455.925 217.438 458.937 cv
216.437 458.937 217.438 458.937 216.437 458.937 cv
214.855 456.489 216.437 458.937 214.855 456.489 cv
214.282 457.039 214.855 456.489 214.282 457.039 cv
214.282 458.937 214.282 457.039 214.282 458.937 cv
213.472 458.937 214.282 458.937 213.472 458.937 cv
f
217.814 456.953 mo
217.814 456.137 217.814 456.953 217.814 456.137 cv
220.308 456.137 217.814 456.137 220.308 456.137 cv
220.308 456.953 220.308 456.137 220.308 456.953 cv
217.814 456.953 220.308 456.953 217.814 456.953 cv
f
224.346 458.937 mo
224.346 458.233 224.346 458.937 224.346 458.233 cv
223.973 458.774 223.467 459.045 222.826 459.045 cv
222.544 459.045 222.279 458.991 222.034 458.882 cv
221.79 458.774 221.608 458.638 221.49 458.474 cv
221.37 458.31 221.287 458.11 221.239 457.873 cv
221.206 457.713 221.189 457.461 221.189 457.115 cv
221.189 454.148 221.189 457.115 221.189 454.148 cv
222.001 454.148 221.189 454.148 222.001 454.148 cv
222.001 456.804 222.001 454.148 222.001 456.804 cv
222.001 457.228 222.018 457.513 222.05 457.661 cv
222.102 457.874 222.21 458.041 222.376 458.163 cv
222.541 458.285 222.745 458.346 222.988 458.346 cv
223.232 458.346 223.46 458.283 223.674 458.159 cv
223.887 458.034 224.039 457.865 224.127 457.649 cv
224.215 457.435 224.261 457.123 224.261 456.714 cv
224.261 454.148 224.261 456.714 224.261 454.148 cv
225.071 454.148 224.261 454.148 225.071 454.148 cv
225.071 458.937 225.071 454.148 225.071 458.937 cv
224.346 458.937 225.071 458.937 224.346 458.937 cv
f
227.072 456.57 mo
227.072 457.185 227.197 457.641 227.446 457.935 cv
227.696 458.23 227.998 458.377 228.353 458.377 cv
228.713 458.377 229.022 458.225 229.279 457.919 cv
229.536 457.615 229.665 457.142 229.665 456.502 cv
229.665 455.892 229.539 455.435 229.288 455.131 cv
229.037 454.828 228.736 454.676 228.389 454.676 cv
228.043 454.676 227.737 454.837 227.472 455.161 cv
227.205 455.484 227.072 455.954 227.072 456.57 cv
cp
226.337 460.771 mo
226.337 454.148 226.337 460.771 226.337 454.148 cv
227.077 454.148 226.337 454.148 227.077 454.148 cv
227.077 454.771 227.077 454.148 227.077 454.771 cv
227.251 454.527 227.447 454.345 227.668 454.223 cv
227.887 454.101 228.153 454.04 228.465 454.04 cv
228.874 454.04 229.235 454.145 229.547 454.356 cv
229.86 454.566 230.096 454.863 230.256 455.246 cv
230.414 455.63 230.494 456.05 230.494 456.506 cv
230.494 456.997 230.406 457.437 230.23 457.83 cv
230.055 458.222 229.799 458.522 229.464 458.731 cv
229.128 458.94 228.776 459.045 228.406 459.045 cv
228.137 459.045 227.894 458.988 227.679 458.873 cv
227.464 458.759 227.287 458.615 227.149 458.44 cv
227.149 460.771 227.149 458.44 227.149 460.771 cv
226.337 460.771 227.149 460.771 226.337 460.771 cv
f
74.355 465.932 mo
159.509 465.932 li
159.509 422.937 li
74.355 422.937 li
cp
0 0 0 0 cmyk
f
gsave
284.814 422.75 mo
40.581 422.75 li
40.581 621.311 li
284.814 621.311 li
cp
clp
.373 lw
74.355 422.936 mo
159.509 422.936 li
159.509 465.931 li
74.355 465.931 li
cp
.694423 .677272 .637385 .738643 cmyk
@
grestore
77.62 436.832 mo
97.765 436.832 li
97.765 429.091 li
77.62 429.091 li
cp
.694423 .677272 .637385 .738643 cmyk
f
77.62 429.092 mo
97.765 429.092 li
97.765 436.833 li
77.62 436.833 li
cp
@
104.097 436.086 mo
103.286 436.086 104.097 436.086 103.286 436.086 cv
103.286 430.915 103.286 436.086 103.286 430.915 cv
103.09 431.102 102.834 431.289 102.517 431.474 cv
102.2 431.661 101.915 431.8 101.662 431.894 cv
101.662 431.109 101.662 431.894 101.662 431.109 cv
102.116 430.896 102.513 430.637 102.853 430.334 cv
103.192 430.03 103.433 429.736 103.574 429.45 cv
104.097 429.45 103.574 429.45 104.097 429.45 cv
104.097 436.086 104.097 429.45 104.097 436.086 cv
f
107.13 433.72 mo
107.13 434.336 107.255 434.791 107.504 435.086 cv
107.754 435.38 108.056 435.528 108.411 435.528 cv
108.771 435.528 109.08 435.374 109.337 435.07 cv
109.594 434.765 109.723 434.292 109.723 433.652 cv
109.723 433.042 109.598 432.585 109.346 432.282 cv
109.095 431.978 108.795 431.826 108.447 431.826 cv
108.101 431.826 107.795 431.988 107.529 432.311 cv
107.263 432.634 107.13 433.103 107.13 433.72 cv
cp
106.395 437.921 mo
106.395 431.299 106.395 437.921 106.395 431.299 cv
107.135 431.299 106.395 431.299 107.135 431.299 cv
107.135 431.921 107.135 431.299 107.135 431.921 cv
107.309 431.677 107.506 431.495 107.725 431.373 cv
107.945 431.251 108.211 431.19 108.523 431.19 cv
108.932 431.19 109.293 431.295 109.605 431.506 cv
109.918 431.716 110.154 432.013 110.313 432.396 cv
110.473 432.78 110.552 433.2 110.552 433.657 cv
110.552 434.146 110.464 434.587 110.288 434.98 cv
110.112 435.373 109.857 435.672 109.522 435.881 cv
109.187 436.09 108.834 436.195 108.465 436.195 cv
108.194 436.195 107.952 436.138 107.736 436.024 cv
107.521 435.91 107.345 435.765 107.206 435.59 cv
107.206 437.921 107.206 435.59 107.206 437.921 cv
106.395 437.921 107.206 437.921 106.395 437.921 cv
f
113.812 434.658 mo
114.614 434.531 113.812 434.658 114.614 434.531 cv
114.66 434.853 114.785 435.099 114.991 435.271 cv
115.197 435.441 115.484 435.528 115.854 435.528 cv
116.227 435.528 116.503 435.452 116.684 435.3 cv
116.864 435.148 116.954 434.97 116.954 434.766 cv
116.954 434.582 116.874 434.438 116.715 434.333 cv
116.604 434.261 116.328 434.169 115.886 434.058 cv
115.29 433.907 114.878 433.778 114.648 433.668 cv
114.418 433.559 114.244 433.406 114.125 433.212 cv
114.007 433.019 113.947 432.805 113.947 432.57 cv
113.947 432.356 113.996 432.159 114.093 431.977 cv
114.191 431.795 114.324 431.644 114.493 431.524 cv
114.619 431.431 114.791 431.352 115.009 431.288 cv
115.227 431.223 115.46 431.19 115.71 431.19 cv
116.086 431.19 116.415 431.245 116.7 431.352 cv
116.983 431.461 117.193 431.608 117.328 431.792 cv
117.464 431.977 117.557 432.225 117.608 432.534 cv
116.815 432.642 117.608 432.534 116.815 432.642 cv
116.778 432.395 116.674 432.203 116.501 432.065 cv
116.329 431.926 116.084 431.858 115.768 431.858 cv
115.395 431.858 115.13 431.919 114.971 432.042 cv
114.811 432.166 114.731 432.31 114.731 432.476 cv
114.731 432.581 114.765 432.675 114.831 432.759 cv
114.897 432.847 115.001 432.919 115.141 432.976 cv
115.223 433.005 115.462 433.075 115.859 433.183 cv
116.433 433.336 116.833 433.462 117.06 433.56 cv
117.287 433.658 117.465 433.799 117.595 433.986 cv
117.724 434.172 117.788 434.404 117.788 434.68 cv
117.788 434.951 117.709 435.205 117.551 435.444 cv
117.394 435.683 117.166 435.868 116.869 435.998 cv
116.571 436.13 116.234 436.195 115.859 436.195 cv
115.237 436.195 114.763 436.065 114.436 435.807 cv
114.11 435.548 113.902 435.165 113.812 434.658 cv
f
120.572 435.36 mo
120.689 436.078 120.572 435.36 120.689 436.078 cv
120.461 436.125 120.256 436.15 120.076 436.15 cv
119.781 436.15 119.553 436.103 119.391 436.01 cv
119.228 435.917 119.114 435.794 119.047 435.643 cv
118.982 435.491 118.948 435.171 118.948 434.684 cv
118.948 431.93 118.948 434.684 118.948 431.93 cv
118.354 431.93 118.948 431.93 118.354 431.93 cv
118.354 431.299 118.354 431.93 118.354 431.299 cv
118.948 431.299 118.354 431.299 118.948 431.299 cv
118.948 430.113 118.948 431.299 118.948 430.113 cv
119.756 429.626 118.948 430.113 119.756 429.626 cv
119.756 431.299 119.756 429.626 119.756 431.299 cv
120.572 431.299 119.756 431.299 120.572 431.299 cv
120.572 431.93 120.572 431.299 120.572 431.93 cv
119.756 431.93 120.572 431.93 119.756 431.93 cv
119.756 434.73 119.756 431.93 119.756 434.73 cv
119.756 434.961 119.77 435.11 119.798 435.176 cv
119.827 435.242 119.873 435.295 119.938 435.333 cv
120.002 435.373 120.095 435.393 120.215 435.393 cv
120.306 435.393 120.424 435.382 120.572 435.36 cv
f
121.402 436.086 mo
121.402 431.299 121.402 436.086 121.402 431.299 cv
122.133 431.299 121.402 431.299 122.133 431.299 cv
122.133 432.024 122.133 431.299 122.133 432.024 cv
122.319 431.685 122.491 431.461 122.649 431.352 cv
122.807 431.245 122.98 431.19 123.17 431.19 cv
123.443 431.19 123.721 431.277 124.003 431.452 cv
123.724 432.205 124.003 431.452 123.724 432.205 cv
123.526 432.087 123.327 432.029 123.129 432.029 cv
122.952 432.029 122.792 432.082 122.651 432.189 cv
122.51 432.296 122.409 432.444 122.349 432.633 cv
122.259 432.922 122.214 433.237 122.214 433.58 cv
122.214 436.086 122.214 433.58 122.214 436.086 cv
121.402 436.086 122.214 436.086 121.402 436.086 cv
f
124.494 436.086 mo
124.494 431.299 124.494 436.086 124.494 431.299 cv
125.305 431.299 124.494 431.299 125.305 431.299 cv
125.305 436.086 125.305 431.299 125.305 436.086 cv
124.494 436.086 125.305 436.086 124.494 436.086 cv
cp
124.494 430.41 mo
124.494 429.477 124.494 430.41 124.494 429.477 cv
125.305 429.477 124.494 429.477 125.305 429.477 cv
125.305 430.41 125.305 429.477 125.305 430.41 cv
124.494 430.41 125.305 430.41 124.494 430.41 cv
f
127.276 433.72 mo
127.276 434.336 127.4 434.791 127.65 435.086 cv
127.9 435.38 128.201 435.528 128.557 435.528 cv
128.917 435.528 129.225 435.374 129.483 435.07 cv
129.74 434.765 129.868 434.292 129.868 433.652 cv
129.868 433.042 129.743 432.585 129.492 432.282 cv
129.241 431.978 128.941 431.826 128.592 431.826 cv
128.246 431.826 127.941 431.988 127.675 432.311 cv
127.409 432.634 127.276 433.103 127.276 433.72 cv
cp
126.54 437.921 mo
126.54 431.299 126.54 437.921 126.54 431.299 cv
127.28 431.299 126.54 431.299 127.28 431.299 cv
127.28 431.921 127.28 431.299 127.28 431.921 cv
127.455 431.677 127.651 431.495 127.871 431.373 cv
128.09 431.251 128.356 431.19 128.669 431.19 cv
129.078 431.19 129.438 431.295 129.751 431.506 cv
130.063 431.716 130.3 432.013 130.458 432.396 cv
130.618 432.78 130.698 433.2 130.698 433.657 cv
130.698 434.146 130.61 434.587 130.434 434.98 cv
130.258 435.373 130.002 435.672 129.667 435.881 cv
129.333 436.09 128.98 436.195 128.61 436.195 cv
128.34 436.195 128.098 436.138 127.882 436.024 cv
127.668 435.91 127.491 435.765 127.352 435.59 cv
127.352 437.921 127.352 435.59 127.352 437.921 cv
126.54 437.921 127.352 437.921 126.54 437.921 cv
f
132.406 433.72 mo
132.406 434.336 132.53 434.791 132.78 435.086 cv
133.029 435.38 133.331 435.528 133.686 435.528 cv
134.046 435.528 134.355 435.374 134.612 435.07 cv
134.869 434.765 134.998 434.292 134.998 433.652 cv
134.998 433.042 134.872 432.585 134.621 432.282 cv
134.371 431.978 134.071 431.826 133.722 431.826 cv
133.376 431.826 133.071 431.988 132.804 432.311 cv
132.538 432.634 132.406 433.103 132.406 433.72 cv
cp
131.67 437.921 mo
131.67 431.299 131.67 437.921 131.67 431.299 cv
132.41 431.299 131.67 431.299 132.41 431.299 cv
132.41 431.921 132.41 431.299 132.41 431.921 cv
132.584 431.677 132.781 431.495 133 431.373 cv
133.22 431.251 133.486 431.19 133.799 431.19 cv
134.208 431.19 134.568 431.295 134.881 431.506 cv
135.193 431.716 135.43 432.013 135.588 432.396 cv
135.748 432.78 135.827 433.2 135.827 433.657 cv
135.827 434.146 135.739 434.587 135.564 434.98 cv
135.388 435.373 135.132 435.672 134.797 435.881 cv
134.462 436.09 134.109 436.195 133.74 436.195 cv
133.469 436.195 133.227 436.138 133.012 436.024 cv
132.797 435.91 132.621 435.765 132.482 435.59 cv
132.482 437.921 132.482 435.59 132.482 437.921 cv
131.67 437.921 132.482 437.921 131.67 437.921 cv
f
136.805 436.086 mo
136.805 431.299 136.805 436.086 136.805 431.299 cv
137.616 431.299 136.805 431.299 137.616 431.299 cv
137.616 436.086 137.616 431.299 137.616 436.086 cv
136.805 436.086 137.616 436.086 136.805 436.086 cv
cp
136.805 430.41 mo
136.805 429.477 136.805 430.41 136.805 429.477 cv
137.616 429.477 136.805 429.477 137.616 429.477 cv
137.616 430.41 137.616 429.477 137.616 430.41 cv
136.805 430.41 137.616 430.41 136.805 430.41 cv
f
138.852 436.086 mo
138.852 431.299 138.852 436.086 138.852 431.299 cv
139.582 431.299 138.852 431.299 139.582 431.299 cv
139.582 431.979 139.582 431.299 139.582 431.979 cv
139.934 431.454 140.442 431.19 141.106 431.19 cv
141.395 431.19 141.66 431.242 141.902 431.346 cv
142.144 431.45 142.325 431.585 142.446 431.754 cv
142.566 431.922 142.65 432.122 142.698 432.354 cv
142.727 432.504 142.743 432.767 142.743 433.143 cv
142.743 436.086 142.743 433.143 142.743 436.086 cv
141.932 436.086 142.743 436.086 141.932 436.086 cv
141.932 433.174 141.932 436.086 141.932 433.174 cv
141.932 432.844 141.9 432.597 141.837 432.433 cv
141.774 432.269 141.662 432.138 141.501 432.04 cv
141.34 431.942 141.152 431.894 140.935 431.894 cv
140.59 431.894 140.291 432.003 140.04 432.223 cv
139.789 432.442 139.663 432.858 139.663 433.472 cv
139.663 436.086 139.663 433.472 139.663 436.086 cv
138.852 436.086 139.663 436.086 138.852 436.086 cv
f
144.505 433.607 mo
144.505 434.235 144.629 434.693 144.879 434.982 cv
145.128 435.271 145.441 435.415 145.817 435.415 cv
146.19 435.415 146.502 435.271 146.755 434.984 cv
147.007 434.697 147.133 434.247 147.133 433.634 cv
147.133 433.048 147.003 432.606 146.744 432.309 cv
146.483 432.011 146.17 431.862 145.803 431.862 cv
145.443 431.862 145.136 432.009 144.884 432.302 cv
144.631 432.595 144.505 433.03 144.505 433.607 cv
cp
143.833 436.483 mo
144.622 436.601 143.833 436.483 144.622 436.601 cv
144.655 436.844 144.747 437.021 144.897 437.133 cv
145.099 437.283 145.373 437.358 145.722 437.358 cv
146.098 437.358 146.388 437.283 146.592 437.133 cv
146.796 436.982 146.935 436.772 147.007 436.501 cv
147.049 436.336 147.069 435.989 147.066 435.46 cv
146.711 435.877 146.269 436.086 145.74 436.086 cv
145.081 436.086 144.573 435.849 144.211 435.374 cv
143.851 434.899 143.67 434.33 143.67 433.665 cv
143.67 433.208 143.753 432.787 143.919 432.401 cv
144.084 432.014 144.323 431.716 144.638 431.506 cv
144.952 431.295 145.321 431.19 145.745 431.19 cv
146.31 431.19 146.775 431.419 147.143 431.875 cv
147.143 431.299 147.143 431.875 147.143 431.299 cv
147.891 431.299 147.143 431.299 147.891 431.299 cv
147.891 435.437 147.891 431.299 147.891 435.437 cv
147.891 436.183 147.815 436.711 147.663 437.022 cv
147.511 437.333 147.271 437.579 146.942 437.759 cv
146.613 437.939 146.207 438.029 145.727 438.029 cv
145.156 438.029 144.694 437.901 144.343 437.644 cv
143.991 437.387 143.821 437 143.833 436.483 cv
f
97.393 440.657 mo
97.393 448.024 li
94.128 440.657 mo
94.128 448.024 li
90.864 440.657 mo
90.864 448.024 li
87.6 440.657 mo
87.6 448.024 li
84.335 440.657 mo
84.335 448.024 li
81.071 440.657 mo
81.071 448.024 li
77.806 440.657 mo
77.806 448.024 li
.0149538 .94815 .00277714 0 cmyk
@
77.62 448.211 mo
77.62 440.47 li
97.766 448.211 mo
77.62 448.211 li
97.766 440.47 mo
97.766 448.211 li
77.62 440.47 mo
97.766 440.47 li
.694423 .677272 .637385 .738643 cmyk
@
105.305 446.685 mo
105.305 447.465 105.305 446.685 105.305 447.465 cv
100.936 447.465 105.305 447.465 100.936 447.465 cv
100.931 447.269 100.962 447.081 101.031 446.901 cv
101.143 446.604 101.321 446.31 101.566 446.022 cv
101.81 445.734 102.164 445.4 102.627 445.021 cv
103.345 444.433 103.831 443.965 104.083 443.622 cv
104.336 443.277 104.462 442.952 104.462 442.645 cv
104.462 442.324 104.348 442.053 104.117 441.832 cv
103.887 441.611 103.588 441.5 103.218 441.5 cv
102.827 441.5 102.515 441.618 102.28 441.852 cv
102.045 442.086 101.927 442.411 101.924 442.826 cv
101.089 442.74 101.924 442.826 101.089 442.74 cv
101.147 442.118 101.362 441.644 101.734 441.318 cv
102.107 440.992 102.608 440.828 103.236 440.828 cv
103.87 440.828 104.372 441.004 104.742 441.356 cv
105.111 441.707 105.296 442.144 105.296 442.664 cv
105.296 442.928 105.242 443.187 105.134 443.443 cv
105.026 443.699 104.846 443.968 104.595 444.25 cv
104.344 444.533 103.927 444.92 103.344 445.414 cv
102.857 445.823 102.544 446.1 102.407 446.246 cv
102.268 446.391 102.154 446.538 102.063 446.685 cv
105.305 446.685 102.063 446.685 105.305 446.685 cv
f
107.13 445.098 mo
107.13 445.714 107.255 446.169 107.504 446.464 cv
107.754 446.758 108.056 446.906 108.411 446.906 cv
108.771 446.906 109.08 446.753 109.337 446.448 cv
109.594 446.144 109.723 445.67 109.723 445.03 cv
109.723 444.42 109.598 443.963 109.346 443.66 cv
109.095 443.356 108.795 443.205 108.447 443.205 cv
108.101 443.205 107.795 443.366 107.529 443.689 cv
107.263 444.012 107.13 444.481 107.13 445.098 cv
cp
106.395 449.3 mo
106.395 442.677 106.395 449.3 106.395 442.677 cv
107.135 442.677 106.395 442.677 107.135 442.677 cv
107.135 443.299 107.135 442.677 107.135 443.299 cv
107.309 443.056 107.506 442.873 107.725 442.751 cv
107.945 442.629 108.211 442.568 108.523 442.568 cv
108.932 442.568 109.293 442.674 109.605 442.884 cv
109.918 443.095 110.154 443.392 110.313 443.775 cv
110.473 444.158 110.552 444.578 110.552 445.035 cv
110.552 445.524 110.464 445.966 110.288 446.358 cv
110.112 446.75 109.857 447.051 109.522 447.26 cv
109.187 447.469 108.834 447.573 108.465 447.573 cv
108.194 447.573 107.952 447.516 107.736 447.401 cv
107.521 447.288 107.345 447.144 107.206 446.969 cv
107.206 449.3 107.206 446.969 107.206 449.3 cv
106.395 449.3 107.206 449.3 106.395 449.3 cv
f
113.812 446.036 mo
114.614 445.909 113.812 446.036 114.614 445.909 cv
114.66 446.231 114.785 446.478 114.991 446.648 cv
115.197 446.82 115.484 446.906 115.854 446.906 cv
116.227 446.906 116.503 446.83 116.684 446.678 cv
116.864 446.526 116.954 446.348 116.954 446.144 cv
116.954 445.961 116.874 445.816 116.715 445.711 cv
116.604 445.639 116.328 445.547 115.886 445.436 cv
115.29 445.286 114.878 445.156 114.648 445.046 cv
114.418 444.936 114.244 444.785 114.125 444.591 cv
114.007 444.397 113.947 444.183 113.947 443.948 cv
113.947 443.735 113.996 443.537 114.093 443.355 cv
114.191 443.173 114.324 443.023 114.493 442.903 cv
114.619 442.81 114.791 442.73 115.009 442.665 cv
115.227 442.601 115.46 442.568 115.71 442.568 cv
116.086 442.568 116.415 442.623 116.7 442.731 cv
116.983 442.839 117.193 442.985 117.328 443.171 cv
117.464 443.355 117.557 443.602 117.608 443.912 cv
116.815 444.02 117.608 443.912 116.815 444.02 cv
116.778 443.774 116.674 443.582 116.501 443.443 cv
116.329 443.305 116.084 443.236 115.768 443.236 cv
115.395 443.236 115.13 443.298 114.971 443.421 cv
114.811 443.544 114.731 443.688 114.731 443.853 cv
114.731 443.958 114.765 444.054 114.831 444.138 cv
114.897 444.225 115.001 444.297 115.141 444.354 cv
115.223 444.384 115.462 444.453 115.859 444.561 cv
116.433 444.715 116.833 444.84 117.06 444.938 cv
117.287 445.036 117.465 445.178 117.595 445.364 cv
117.724 445.55 117.788 445.782 117.788 446.059 cv
117.788 446.329 117.709 446.584 117.551 446.822 cv
117.394 447.061 117.166 447.246 116.869 447.377 cv
116.571 447.507 116.234 447.573 115.859 447.573 cv
115.237 447.573 114.763 447.444 114.436 447.185 cv
114.11 446.927 113.902 446.543 113.812 446.036 cv
f
120.572 446.739 mo
120.689 447.456 120.572 446.739 120.689 447.456 cv
120.461 447.504 120.256 447.528 120.076 447.528 cv
119.781 447.528 119.553 447.481 119.391 447.388 cv
119.228 447.295 119.114 447.173 119.047 447.021 cv
118.982 446.869 118.948 446.55 118.948 446.063 cv
118.948 443.308 118.948 446.063 118.948 443.308 cv
118.354 443.308 118.948 443.308 118.354 443.308 cv
118.354 442.677 118.354 443.308 118.354 442.677 cv
118.948 442.677 118.354 442.677 118.948 442.677 cv
118.948 441.491 118.948 442.677 118.948 441.491 cv
119.756 441.004 118.948 441.491 119.756 441.004 cv
119.756 442.677 119.756 441.004 119.756 442.677 cv
120.572 442.677 119.756 442.677 120.572 442.677 cv
120.572 443.308 120.572 442.677 120.572 443.308 cv
119.756 443.308 120.572 443.308 119.756 443.308 cv
119.756 446.107 119.756 443.308 119.756 446.107 cv
119.756 446.339 119.77 446.488 119.798 446.554 cv
119.827 446.62 119.873 446.673 119.938 446.712 cv
120.002 446.751 120.095 446.77 120.215 446.77 cv
120.306 446.77 120.424 446.76 120.572 446.739 cv
f
121.402 447.465 mo
121.402 442.677 121.402 447.465 121.402 442.677 cv
122.133 442.677 121.402 442.677 122.133 442.677 cv
122.133 443.403 122.133 442.677 122.133 443.403 cv
122.319 443.063 122.491 442.839 122.649 442.731 cv
122.807 442.623 122.98 442.568 123.17 442.568 cv
123.443 442.568 123.721 442.656 124.003 442.831 cv
123.724 443.583 124.003 442.831 123.724 443.583 cv
123.526 443.466 123.327 443.407 123.129 443.407 cv
122.952 443.407 122.792 443.461 122.651 443.567 cv
122.51 443.674 122.409 443.822 122.349 444.012 cv
122.259 444.3 122.214 444.615 122.214 444.958 cv
122.214 447.465 122.214 444.958 122.214 447.465 cv
121.402 447.465 122.214 447.465 121.402 447.465 cv
f
124.494 447.465 mo
124.494 442.677 124.494 447.465 124.494 442.677 cv
125.305 442.677 124.494 442.677 125.305 442.677 cv
125.305 447.465 125.305 442.677 125.305 447.465 cv
124.494 447.465 125.305 447.465 124.494 447.465 cv
cp
124.494 441.789 mo
124.494 440.855 124.494 441.789 124.494 440.855 cv
125.305 440.855 124.494 440.855 125.305 440.855 cv
125.305 441.789 125.305 440.855 125.305 441.789 cv
124.494 441.789 125.305 441.789 124.494 441.789 cv
f
127.276 445.098 mo
127.276 445.714 127.4 446.169 127.65 446.464 cv
127.9 446.758 128.201 446.906 128.557 446.906 cv
128.917 446.906 129.225 446.753 129.483 446.448 cv
129.74 446.144 129.868 445.67 129.868 445.03 cv
129.868 444.42 129.743 443.963 129.492 443.66 cv
129.241 443.356 128.941 443.205 128.592 443.205 cv
128.246 443.205 127.941 443.366 127.675 443.689 cv
127.409 444.012 127.276 444.481 127.276 445.098 cv
cp
126.54 449.3 mo
126.54 442.677 126.54 449.3 126.54 442.677 cv
127.28 442.677 126.54 442.677 127.28 442.677 cv
127.28 443.299 127.28 442.677 127.28 443.299 cv
127.455 443.056 127.651 442.873 127.871 442.751 cv
128.09 442.629 128.356 442.568 128.669 442.568 cv
129.078 442.568 129.438 442.674 129.751 442.884 cv
130.063 443.095 130.3 443.392 130.458 443.775 cv
130.618 444.158 130.698 444.578 130.698 445.035 cv
130.698 445.524 130.61 445.966 130.434 446.358 cv
130.258 446.75 130.002 447.051 129.667 447.26 cv
129.333 447.469 128.98 447.573 128.61 447.573 cv
128.34 447.573 128.098 447.516 127.882 447.401 cv
127.668 447.288 127.491 447.144 127.352 446.969 cv
127.352 449.3 127.352 446.969 127.352 449.3 cv
126.54 449.3 127.352 449.3 126.54 449.3 cv
f
132.406 445.098 mo
132.406 445.714 132.53 446.169 132.78 446.464 cv
133.029 446.758 133.331 446.906 133.686 446.906 cv
134.046 446.906 134.355 446.753 134.612 446.448 cv
134.869 446.144 134.998 445.67 134.998 445.03 cv
134.998 444.42 134.872 443.963 134.621 443.66 cv
134.371 443.356 134.071 443.205 133.722 443.205 cv
133.376 443.205 133.071 443.366 132.804 443.689 cv
132.538 444.012 132.406 444.481 132.406 445.098 cv
cp
131.67 449.3 mo
131.67 442.677 131.67 449.3 131.67 442.677 cv
132.41 442.677 131.67 442.677 132.41 442.677 cv
132.41 443.299 132.41 442.677 132.41 443.299 cv
132.584 443.056 132.781 442.873 133 442.751 cv
133.22 442.629 133.486 442.568 133.799 442.568 cv
134.208 442.568 134.568 442.674 134.881 442.884 cv
135.193 443.095 135.43 443.392 135.588 443.775 cv
135.748 444.158 135.827 444.578 135.827 445.035 cv
135.827 445.524 135.739 445.966 135.564 446.358 cv
135.388 446.75 135.132 447.051 134.797 447.26 cv
134.462 447.469 134.109 447.573 133.74 447.573 cv
133.469 447.573 133.227 447.516 133.012 447.401 cv
132.797 447.288 132.621 447.144 132.482 446.969 cv
132.482 449.3 132.482 446.969 132.482 449.3 cv
131.67 449.3 132.482 449.3 131.67 449.3 cv
f
136.805 447.465 mo
136.805 442.677 136.805 447.465 136.805 442.677 cv
137.616 442.677 136.805 442.677 137.616 442.677 cv
137.616 447.465 137.616 442.677 137.616 447.465 cv
136.805 447.465 137.616 447.465 136.805 447.465 cv
cp
136.805 441.789 mo
136.805 440.855 136.805 441.789 136.805 440.855 cv
137.616 440.855 136.805 440.855 137.616 440.855 cv
137.616 441.789 137.616 440.855 137.616 441.789 cv
136.805 441.789 137.616 441.789 136.805 441.789 cv
f
138.852 447.465 mo
138.852 442.677 138.852 447.465 138.852 442.677 cv
139.582 442.677 138.852 442.677 139.582 442.677 cv
139.582 443.358 139.582 442.677 139.582 443.358 cv
139.934 442.831 140.442 442.568 141.106 442.568 cv
141.395 442.568 141.66 442.621 141.902 442.724 cv
142.144 442.828 142.325 442.964 142.446 443.133 cv
142.566 443.3 142.65 443.5 142.698 443.732 cv
142.727 443.882 142.743 444.145 142.743 444.521 cv
142.743 447.465 142.743 444.521 142.743 447.465 cv
141.932 447.465 142.743 447.465 141.932 447.465 cv
141.932 444.553 141.932 447.465 141.932 444.553 cv
141.932 444.222 141.9 443.974 141.837 443.81 cv
141.774 443.646 141.662 443.516 141.501 443.418 cv
141.34 443.321 141.152 443.272 140.935 443.272 cv
140.59 443.272 140.291 443.382 140.04 443.602 cv
139.789 443.82 139.663 444.237 139.663 444.85 cv
139.663 447.465 139.663 444.85 139.663 447.465 cv
138.852 447.465 139.663 447.465 138.852 447.465 cv
f
144.505 444.985 mo
144.505 445.614 144.629 446.072 144.879 446.36 cv
145.128 446.648 145.441 446.793 145.817 446.793 cv
146.19 446.793 146.502 446.649 146.755 446.363 cv
147.007 446.076 147.133 445.625 147.133 445.012 cv
147.133 444.426 147.003 443.984 146.744 443.687 cv
146.483 443.389 146.17 443.241 145.803 443.241 cv
145.443 443.241 145.136 443.387 144.884 443.68 cv
144.631 443.973 144.505 444.409 144.505 444.985 cv
cp
143.833 447.862 mo
144.622 447.979 143.833 447.862 144.622 447.979 cv
144.655 448.222 144.747 448.4 144.897 448.511 cv
145.099 448.661 145.373 448.736 145.722 448.736 cv
146.098 448.736 146.388 448.661 146.592 448.511 cv
146.796 448.36 146.935 448.15 147.007 447.88 cv
147.049 447.714 147.069 447.367 147.066 446.838 cv
146.711 447.256 146.269 447.465 145.74 447.465 cv
145.081 447.465 144.573 447.227 144.211 446.752 cv
143.851 446.278 143.67 445.708 143.67 445.044 cv
143.67 444.587 143.753 444.165 143.919 443.779 cv
144.084 443.393 144.323 443.095 144.638 442.884 cv
144.952 442.674 145.321 442.568 145.745 442.568 cv
146.31 442.568 146.775 442.797 147.143 443.254 cv
147.143 442.677 147.143 443.254 147.143 442.677 cv
147.891 442.677 147.143 442.677 147.891 442.677 cv
147.891 446.816 147.891 442.677 147.891 446.816 cv
147.891 447.561 147.815 448.09 147.663 448.4 cv
147.511 448.711 147.271 448.957 146.942 449.137 cv
146.613 449.318 146.207 449.408 145.727 449.408 cv
145.156 449.408 144.694 449.279 144.343 449.022 cv
143.991 448.766 143.821 448.378 143.833 447.862 cv
f
96.087 452.035 mo
97.579 453.527 li
91.516 452.035 mo
97.579 458.097 li
86.947 452.035 mo
94.314 459.403 li
82.377 452.035 mo
89.745 459.403 li
77.806 452.035 mo
85.175 459.403 li
77.806 456.605 mo
80.604 459.403 li
77.806 452.035 mo
85.175 459.403 li
.460426 .311955 .994202 .0773327 cmyk
@
77.62 459.589 mo
77.62 451.849 li
97.766 459.589 mo
77.62 459.589 li
97.766 451.849 mo
97.766 459.589 li
77.62 451.849 mo
97.766 451.849 li
.694423 .677272 .637385 .738643 cmyk
@
101.072 456.72 mo
101.896 456.647 101.072 456.72 101.896 456.647 cv
101.936 456.978 102.027 457.249 102.17 457.461 cv
102.312 457.673 102.534 457.845 102.835 457.976 cv
103.135 458.106 103.474 458.171 103.849 458.171 cv
104.183 458.171 104.477 458.122 104.733 458.023 cv
104.988 457.923 105.178 457.788 105.303 457.614 cv
105.428 457.442 105.49 457.253 105.49 457.049 cv
105.49 456.841 105.43 456.66 105.31 456.506 cv
105.189 456.351 104.991 456.221 104.715 456.116 cv
104.537 456.046 104.145 455.939 103.537 455.793 cv
102.931 455.647 102.505 455.51 102.262 455.38 cv
101.946 455.215 101.711 455.01 101.557 454.766 cv
101.402 454.52 101.325 454.246 101.325 453.942 cv
101.325 453.609 101.419 453.297 101.608 453.007 cv
101.798 452.717 102.074 452.497 102.438 452.347 cv
102.802 452.196 103.206 452.121 103.65 452.121 cv
104.141 452.121 104.573 452.2 104.947 452.357 cv
105.321 452.516 105.608 452.748 105.81 453.055 cv
106.012 453.361 106.12 453.708 106.135 454.096 cv
105.296 454.159 106.135 454.096 105.296 454.159 cv
105.251 453.741 105.099 453.425 104.839 453.212 cv
104.579 452.998 104.194 452.892 103.687 452.892 cv
103.158 452.892 102.772 452.989 102.53 453.183 cv
102.288 453.377 102.167 453.61 102.167 453.884 cv
102.167 454.122 102.253 454.317 102.424 454.47 cv
102.592 454.623 103.032 454.78 103.743 454.941 cv
104.454 455.102 104.941 455.243 105.207 455.363 cv
105.591 455.54 105.875 455.765 106.058 456.037 cv
106.241 456.309 106.333 456.622 106.333 456.977 cv
106.333 457.329 106.232 457.66 106.031 457.971 cv
105.83 458.282 105.54 458.524 105.163 458.696 cv
104.786 458.87 104.362 458.956 103.889 458.956 cv
103.291 458.956 102.79 458.869 102.386 458.694 cv
101.982 458.52 101.665 458.258 101.435 457.908 cv
101.205 457.558 101.083 457.162 101.072 456.72 cv
f
109.193 458.117 mo
109.311 458.834 109.193 458.117 109.311 458.834 cv
109.082 458.882 108.877 458.906 108.697 458.906 cv
108.402 458.906 108.174 458.86 108.012 458.767 cv
107.849 458.673 107.735 458.551 107.669 458.399 cv
107.603 458.247 107.57 457.928 107.57 457.441 cv
107.57 454.686 107.57 457.441 107.57 454.686 cv
106.975 454.686 107.57 454.686 106.975 454.686 cv
106.975 454.055 106.975 454.686 106.975 454.055 cv
107.57 454.055 106.975 454.055 107.57 454.055 cv
107.57 452.87 107.57 454.055 107.57 452.87 cv
108.377 452.383 107.57 452.87 108.377 452.383 cv
108.377 454.055 108.377 452.383 108.377 454.055 cv
109.193 454.055 108.377 454.055 109.193 454.055 cv
109.193 454.686 109.193 454.055 109.193 454.686 cv
108.377 454.686 109.193 454.686 108.377 454.686 cv
108.377 457.486 108.377 454.686 108.377 457.486 cv
108.377 457.717 108.391 457.867 108.42 457.933 cv
108.449 457.999 108.495 458.051 108.56 458.091 cv
108.624 458.129 108.716 458.149 108.837 458.149 cv
108.927 458.149 109.045 458.139 109.193 458.117 cv
f
110.023 458.844 mo
110.023 454.055 110.023 458.844 110.023 454.055 cv
110.754 454.055 110.023 454.055 110.754 454.055 cv
110.754 454.781 110.754 454.055 110.754 454.781 cv
110.94 454.442 111.113 454.218 111.27 454.109 cv
111.428 454.001 111.601 453.947 111.791 453.947 cv
112.064 453.947 112.343 454.034 112.625 454.209 cv
112.345 454.962 112.625 454.209 112.345 454.962 cv
112.147 454.844 111.949 454.786 111.75 454.786 cv
111.573 454.786 111.413 454.839 111.272 454.945 cv
111.131 455.052 111.031 455.201 110.97 455.39 cv
110.88 455.678 110.835 455.994 110.835 456.336 cv
110.835 458.844 110.835 456.336 110.835 458.844 cv
110.023 458.844 110.835 458.844 110.023 458.844 cv
f
113.115 458.844 mo
113.115 454.055 113.115 458.844 113.115 454.055 cv
113.927 454.055 113.115 454.055 113.927 454.055 cv
113.927 458.844 113.927 454.055 113.927 458.844 cv
113.115 458.844 113.927 458.844 113.115 458.844 cv
cp
113.115 453.167 mo
113.115 452.234 113.115 453.167 113.115 452.234 cv
113.927 452.234 113.115 452.234 113.927 452.234 cv
113.927 453.167 113.927 452.234 113.927 453.167 cv
113.115 453.167 113.927 453.167 113.115 453.167 cv
f
115.897 456.477 mo
115.897 457.092 116.022 457.548 116.272 457.842 cv
116.521 458.137 116.823 458.284 117.178 458.284 cv
117.538 458.284 117.847 458.131 118.104 457.827 cv
118.361 457.521 118.489 457.049 118.489 456.409 cv
118.489 455.798 118.364 455.341 118.113 455.038 cv
117.862 454.735 117.562 454.582 117.213 454.582 cv
116.868 454.582 116.562 454.745 116.296 455.068 cv
116.03 455.391 115.897 455.86 115.897 456.477 cv
cp
115.162 460.678 mo
115.162 454.055 115.162 460.678 115.162 454.055 cv
115.901 454.055 115.162 454.055 115.901 454.055 cv
115.901 454.678 115.901 454.055 115.901 454.678 cv
116.076 454.434 116.273 454.251 116.493 454.129 cv
116.712 454.008 116.977 453.947 117.29 453.947 cv
117.699 453.947 118.059 454.052 118.372 454.263 cv
118.685 454.473 118.921 454.77 119.08 455.153 cv
119.24 455.537 119.319 455.956 119.319 456.413 cv
119.319 456.903 119.231 457.344 119.055 457.736 cv
118.88 458.129 118.624 458.429 118.289 458.638 cv
117.954 458.847 117.601 458.952 117.231 458.952 cv
116.961 458.952 116.719 458.894 116.504 458.78 cv
116.289 458.666 116.112 458.522 115.974 458.347 cv
115.974 460.678 115.974 458.347 115.974 460.678 cv
115.162 460.678 115.974 460.678 115.162 460.678 cv
f
121.027 456.477 mo
121.027 457.092 121.152 457.548 121.401 457.842 cv
121.651 458.137 121.953 458.284 122.308 458.284 cv
122.668 458.284 122.977 458.131 123.233 457.827 cv
123.491 457.521 123.619 457.049 123.619 456.409 cv
123.619 455.798 123.494 455.341 123.243 455.038 cv
122.992 454.735 122.692 454.582 122.343 454.582 cv
121.997 454.582 121.692 454.745 121.426 455.068 cv
121.16 455.391 121.027 455.86 121.027 456.477 cv
cp
120.292 460.678 mo
120.292 454.055 120.292 460.678 120.292 454.055 cv
121.031 454.055 120.292 454.055 121.031 454.055 cv
121.031 454.678 121.031 454.055 121.031 454.678 cv
121.206 454.434 121.402 454.251 121.622 454.129 cv
121.841 454.008 122.107 453.947 122.42 453.947 cv
122.829 453.947 123.189 454.052 123.502 454.263 cv
123.815 454.473 124.051 454.77 124.21 455.153 cv
124.37 455.537 124.449 455.956 124.449 456.413 cv
124.449 456.903 124.361 457.344 124.185 457.736 cv
124.01 458.129 123.754 458.429 123.419 458.638 cv
123.083 458.847 122.731 458.952 122.361 458.952 cv
122.091 458.952 121.848 458.894 121.633 458.78 cv
121.418 458.666 121.242 458.522 121.103 458.347 cv
121.103 460.678 121.103 458.347 121.103 460.678 cv
120.292 460.678 121.103 460.678 120.292 460.678 cv
f
125.652 458.844 mo
125.652 457.919 125.652 458.844 125.652 457.919 cv
126.576 457.919 125.652 457.919 126.576 457.919 cv
126.576 458.844 126.576 457.919 126.576 458.844 cv
125.652 458.844 126.576 458.844 125.652 458.844 cv
f
130.423 457.098 mo
131.235 456.99 130.423 457.098 131.235 456.99 cv
131.329 457.45 131.487 457.782 131.711 457.985 cv
131.934 458.187 132.208 458.289 132.529 458.289 cv
132.911 458.289 133.233 458.156 133.496 457.892 cv
133.759 457.627 133.891 457.3 133.891 456.909 cv
133.891 456.537 133.769 456.229 133.526 455.987 cv
133.282 455.745 132.973 455.624 132.597 455.624 cv
132.444 455.624 132.252 455.654 132.024 455.714 cv
132.115 455.002 132.024 455.714 132.115 455.002 cv
132.168 455.008 132.212 455.011 132.245 455.011 cv
132.591 455.011 132.902 454.921 133.179 454.741 cv
133.454 454.56 133.594 454.282 133.594 453.907 cv
133.594 453.609 133.493 453.362 133.291 453.167 cv
133.09 452.972 132.83 452.874 132.512 452.874 cv
132.196 452.874 131.933 452.973 131.722 453.172 cv
131.512 453.37 131.377 453.668 131.316 454.064 cv
130.505 453.92 131.316 454.064 130.505 453.92 cv
130.604 453.376 130.829 452.955 131.181 452.655 cv
131.533 452.356 131.971 452.207 132.493 452.207 cv
132.854 452.207 133.186 452.285 133.49 452.439 cv
133.793 452.594 134.025 452.805 134.186 453.072 cv
134.347 453.34 134.427 453.624 134.427 453.925 cv
134.427 454.21 134.351 454.47 134.197 454.704 cv
134.044 454.939 133.817 455.125 133.516 455.263 cv
133.907 455.353 134.211 455.541 134.427 455.825 cv
134.643 456.109 134.752 456.464 134.752 456.891 cv
134.752 457.468 134.541 457.957 134.121 458.358 cv
133.7 458.76 133.168 458.96 132.525 458.96 cv
131.944 458.96 131.463 458.788 131.079 458.442 cv
130.697 458.097 130.478 457.648 130.423 457.098 cv
f
138.386 458.844 mo
138.386 454.055 138.386 458.844 138.386 454.055 cv
139.116 454.055 138.386 454.055 139.116 454.055 cv
139.116 454.736 139.116 454.055 139.116 454.736 cv
139.468 454.21 139.976 453.947 140.64 453.947 cv
140.929 453.947 141.194 453.999 141.435 454.103 cv
141.678 454.206 141.859 454.342 141.979 454.51 cv
142.1 454.679 142.183 454.879 142.231 455.11 cv
142.262 455.26 142.276 455.523 142.276 455.899 cv
142.276 458.844 142.276 455.899 142.276 458.844 cv
141.465 458.844 142.276 458.844 141.465 458.844 cv
141.465 455.931 141.465 458.844 141.465 455.931 cv
141.465 455.6 141.434 455.353 141.371 455.189 cv
141.308 455.025 141.195 454.895 141.035 454.797 cv
140.873 454.699 140.685 454.65 140.469 454.65 cv
140.123 454.65 139.825 454.76 139.574 454.979 cv
139.323 455.199 139.198 455.615 139.198 456.228 cv
139.198 458.844 139.198 456.228 139.198 458.844 cv
138.386 458.844 139.198 458.844 138.386 458.844 cv
f
146.653 458.844 mo
146.653 458.14 146.653 458.844 146.653 458.14 cv
146.28 458.681 145.774 458.952 145.134 458.952 cv
144.852 458.952 144.588 458.897 144.343 458.789 cv
144.098 458.681 143.916 458.545 143.797 458.381 cv
143.678 458.217 143.595 458.017 143.547 457.779 cv
143.514 457.62 143.498 457.368 143.498 457.022 cv
143.498 454.055 143.498 457.022 143.498 454.055 cv
144.309 454.055 143.498 454.055 144.309 454.055 cv
144.309 456.711 144.309 454.055 144.309 456.711 cv
144.309 457.135 144.325 457.42 144.359 457.567 cv
144.41 457.781 144.518 457.948 144.683 458.07 cv
144.849 458.192 145.053 458.252 145.296 458.252 cv
145.54 458.252 145.769 458.19 145.982 458.065 cv
146.195 457.941 146.346 457.771 146.435 457.556 cv
146.523 457.341 146.568 457.029 146.568 456.621 cv
146.568 454.055 146.568 456.621 146.568 454.055 cv
147.379 454.055 146.568 454.055 147.379 454.055 cv
147.379 458.844 147.379 454.055 147.379 458.844 cv
146.653 458.844 147.379 458.844 146.653 458.844 cv
f
151.769 457.089 mo
152.568 457.193 151.769 457.089 152.568 457.193 cv
152.48 457.743 152.257 458.173 151.898 458.484 cv
151.539 458.796 151.098 458.952 150.575 458.952 cv
149.919 458.952 149.393 458.738 148.995 458.309 cv
148.596 457.881 148.397 457.267 148.397 456.468 cv
148.397 455.95 148.483 455.498 148.654 455.11 cv
148.826 454.722 149.086 454.432 149.436 454.238 cv
149.787 454.044 150.168 453.947 150.579 453.947 cv
151.099 453.947 151.524 454.079 151.855 454.342 cv
152.186 454.604 152.398 454.978 152.491 455.462 cv
151.702 455.583 152.491 455.462 151.702 455.583 cv
151.627 455.262 151.494 455.02 151.303 454.858 cv
151.112 454.695 150.881 454.614 150.611 454.614 cv
150.202 454.614 149.87 454.761 149.614 455.054 cv
149.359 455.347 149.231 455.81 149.231 456.445 cv
149.231 457.088 149.354 457.556 149.601 457.847 cv
149.848 458.139 150.169 458.284 150.565 458.284 cv
150.884 458.284 151.15 458.187 151.364 457.991 cv
151.578 457.796 151.712 457.495 151.769 457.089 cv
f
153.29 458.844 mo
153.29 452.234 153.29 458.844 153.29 452.234 cv
154.102 452.234 153.29 452.234 154.102 452.234 cv
154.102 458.844 154.102 452.234 154.102 458.844 cv
153.29 458.844 154.102 458.844 153.29 458.844 cv
f
218.174 621.125 mo
243.264 621.125 li
243.264 597.807 li
218.174 597.807 li
cp
0 0 0 0 cmyk
f
gsave
284.814 422.75 mo
40.581 422.75 li
40.581 621.311 li
284.814 621.311 li
cp
clp
.373 lw
218.174 597.807 mo
243.264 597.807 li
243.264 621.125 li
218.174 621.125 li
cp
.694423 .677272 .637385 .738643 cmyk
@
grestore
223.128 604.172 mo
223.128 603.846 223.054 603.592 222.904 603.413 cv
222.754 603.233 222.581 603.143 222.385 603.143 cv
222.197 603.143 222.041 603.216 221.919 603.365 cv
221.795 603.512 221.733 603.754 221.733 604.088 cv
221.733 604.43 221.8 604.679 221.935 604.839 cv
222.068 605 222.236 605.079 222.437 605.079 cv
222.632 605.079 222.796 605.002 222.929 604.849 cv
223.062 604.695 223.128 604.469 223.128 604.172 cv
cp
220.841 606.381 mo
221.818 606.273 220.841 606.381 221.818 606.273 cv
221.843 606.471 221.906 606.62 222.006 606.716 cv
222.107 606.812 222.24 606.86 222.406 606.86 cv
222.614 606.86 222.792 606.764 222.938 606.572 cv
223.084 606.379 223.179 605.982 223.219 605.377 cv
222.965 605.672 222.646 605.82 222.265 605.82 cv
221.851 605.82 221.493 605.661 221.191 605.339 cv
220.891 605.02 220.74 604.603 220.74 604.088 cv
220.74 603.555 220.898 603.124 221.218 602.795 cv
221.534 602.469 221.939 602.305 222.431 602.305 cv
222.966 602.305 223.405 602.511 223.748 602.925 cv
224.091 603.339 224.263 604.019 224.263 604.966 cv
224.263 605.931 224.083 606.626 223.726 607.054 cv
223.369 607.481 222.903 607.694 222.33 607.694 cv
221.918 607.694 221.584 607.584 221.33 607.366 cv
221.076 607.146 220.913 606.817 220.841 606.381 cv
.694423 .677272 .637385 .738643 cmyk
f
228.337 606.662 mo
228.337 607.601 228.337 606.662 228.337 607.601 cv
224.793 607.601 228.337 607.601 224.793 607.601 cv
224.832 607.246 224.947 606.909 225.139 606.591 cv
225.331 606.273 225.709 605.853 226.275 605.327 cv
226.731 604.902 227.011 604.615 227.114 604.463 cv
227.253 604.254 227.322 604.048 227.322 603.844 cv
227.322 603.619 227.262 603.446 227.141 603.326 cv
227.019 603.204 226.852 603.143 226.639 603.143 cv
226.428 603.143 226.26 603.207 226.135 603.334 cv
226.011 603.46 225.938 603.671 225.919 603.967 cv
224.912 603.866 225.919 603.967 224.912 603.866 cv
224.972 603.31 225.16 602.911 225.477 602.668 cv
225.793 602.426 226.189 602.305 226.664 602.305 cv
227.185 602.305 227.594 602.446 227.892 602.725 cv
228.188 603.006 228.337 603.355 228.337 603.773 cv
228.337 604.01 228.294 604.236 228.209 604.451 cv
228.125 604.666 227.989 604.89 227.805 605.125 cv
227.683 605.282 227.462 605.505 227.143 605.798 cv
226.824 606.091 226.622 606.286 226.536 606.381 cv
226.451 606.477 226.383 606.571 226.329 606.662 cv
228.337 606.662 226.329 606.662 228.337 606.662 cv
f
228.848 614.595 mo
228.848 612.966 228.848 614.595 228.848 612.966 cv
233.547 607.163 228.848 612.966 233.547 607.163 cv
229.379 607.163 233.547 607.163 229.379 607.163 cv
229.379 605.65 229.379 607.163 229.379 605.65 cv
235.927 605.65 229.379 605.65 235.927 605.65 cv
235.927 607.053 235.927 605.65 235.927 607.053 cv
231.026 613.087 235.927 607.053 231.026 613.087 cv
236.116 613.087 231.026 613.087 236.116 613.087 cv
236.116 614.595 236.116 613.087 236.116 614.595 cv
228.848 614.595 236.116 614.595 228.848 614.595 cv
f
238.807 614.595 mo
237.092 614.595 238.807 614.595 237.092 614.595 cv
237.092 608.115 237.092 614.595 237.092 608.115 cv
238.685 608.115 237.092 608.115 238.685 608.115 cv
238.685 609.037 238.685 608.115 238.685 609.037 cv
238.957 608.6 239.203 608.314 239.42 608.175 cv
239.638 608.038 239.885 607.968 240.162 607.968 cv
240.552 607.968 240.929 608.076 241.291 608.292 cv
240.76 609.787 241.291 608.292 240.76 609.787 cv
240.471 609.599 240.203 609.507 239.954 609.507 cv
239.715 609.507 239.512 609.573 239.344 609.704 cv
239.177 609.836 239.046 610.076 238.95 610.421 cv
238.855 610.767 238.807 611.492 238.807 612.594 cv
238.807 614.595 238.807 612.594 238.807 614.595 cv
f
108.771 620.658 mo
134.793 620.658 li
134.793 596.782 li
108.771 596.782 li
cp
0 0 0 0 cmyk
f
gsave
284.814 422.75 mo
40.581 422.75 li
40.581 621.311 li
284.814 621.311 li
cp
clp
.373 lw
108.771 596.782 mo
134.793 596.782 li
134.793 620.658 li
108.771 620.658 li
cp
.694423 .677272 .637385 .738643 cmyk
@
grestore
114.192 603.425 mo
114.192 603.1 114.118 602.847 113.967 602.667 cv
113.817 602.487 113.644 602.398 113.447 602.398 cv
113.261 602.398 113.105 602.471 112.981 602.619 cv
112.858 602.766 112.796 603.007 112.796 603.343 cv
112.796 603.683 112.863 603.934 112.997 604.093 cv
113.132 604.252 113.3 604.332 113.501 604.332 cv
113.696 604.332 113.859 604.255 113.992 604.102 cv
114.125 603.949 114.192 603.724 114.192 603.425 cv
cp
111.904 605.635 mo
112.882 605.527 111.904 605.635 112.882 605.527 cv
112.906 605.726 112.969 605.875 113.07 605.969 cv
113.17 606.066 113.304 606.114 113.469 606.114 cv
113.677 606.114 113.855 606.017 114.002 605.826 cv
114.147 605.634 114.241 605.236 114.282 604.631 cv
114.028 604.926 113.71 605.074 113.329 605.074 cv
112.913 605.074 112.556 604.914 112.254 604.593 cv
111.954 604.273 111.803 603.856 111.803 603.343 cv
111.803 602.808 111.962 602.376 112.28 602.05 cv
112.598 601.722 113.002 601.559 113.495 601.559 cv
114.029 601.559 114.468 601.766 114.811 602.178 cv
115.154 602.593 115.326 603.274 115.326 604.221 cv
115.326 605.185 115.147 605.881 114.789 606.308 cv
114.432 606.735 113.967 606.949 113.393 606.949 cv
112.981 606.949 112.647 606.838 112.393 606.619 cv
112.139 606.399 111.976 606.072 111.904 605.635 cv
.694423 .677272 .637385 .738643 cmyk
f
117.695 602.398 mo
117.573 602.398 117.463 602.436 117.368 602.513 cv
117.272 602.591 117.197 602.732 117.145 602.933 cv
117.075 603.195 117.04 603.634 117.04 604.253 cv
117.04 604.872 117.071 605.297 117.134 605.529 cv
117.196 605.76 117.275 605.915 117.37 605.991 cv
117.464 606.069 117.573 606.106 117.695 606.106 cv
117.817 606.106 117.926 606.068 118.022 605.99 cv
118.119 605.912 118.192 605.771 118.246 605.57 cv
118.315 605.311 118.35 604.872 118.35 604.253 cv
118.35 603.634 118.319 603.209 118.256 602.978 cv
118.194 602.747 118.116 602.591 118.02 602.513 cv
117.926 602.436 117.817 602.398 117.695 602.398 cv
cp
117.695 601.559 mo
118.206 601.559 118.605 601.741 118.893 602.106 cv
119.236 602.537 119.408 603.252 119.408 604.253 cv
119.408 605.251 119.235 605.968 118.89 606.405 cv
118.604 606.764 118.206 606.945 117.695 606.945 cv
117.182 606.945 116.768 606.748 116.454 606.353 cv
116.14 605.958 115.983 605.254 115.983 604.243 cv
115.983 603.25 116.155 602.535 116.501 602.098 cv
116.786 601.739 117.184 601.559 117.695 601.559 cv
f
119.911 613.85 mo
119.911 612.22 119.911 613.85 119.911 612.22 cv
124.61 606.417 119.911 612.22 124.61 606.417 cv
120.442 606.417 124.61 606.417 120.442 606.417 cv
120.442 604.904 120.442 606.417 120.442 604.904 cv
126.99 604.904 120.442 604.904 126.99 604.904 cv
126.99 606.307 126.99 604.904 126.99 606.307 cv
122.09 612.342 126.99 606.307 122.09 612.342 cv
127.179 612.342 122.09 612.342 127.179 612.342 cv
127.179 613.85 127.179 612.342 127.179 613.85 cv
119.911 613.85 127.179 613.85 119.911 613.85 cv
f
129.87 613.85 mo
128.155 613.85 129.87 613.85 128.155 613.85 cv
128.155 607.37 128.155 613.85 128.155 607.37 cv
129.748 607.37 128.155 607.37 129.748 607.37 cv
129.748 608.291 129.748 607.37 129.748 608.291 cv
130.02 607.855 130.266 607.569 130.483 607.429 cv
130.701 607.292 130.948 607.222 131.225 607.222 cv
131.615 607.222 131.992 607.33 132.354 607.545 cv
131.823 609.041 132.354 607.545 131.823 609.041 cv
131.534 608.853 131.266 608.76 131.018 608.76 cv
130.777 608.76 130.574 608.826 130.407 608.958 cv
130.24 609.09 130.109 609.33 130.013 609.675 cv
129.918 610.021 129.87 610.746 129.87 611.847 cv
129.87 613.85 129.87 611.847 129.87 613.85 cv
f
48.768 568.79 mo
41.668 568.79 48.768 568.79 41.668 568.79 cv
41.668 571.443 41.668 568.79 41.668 571.443 cv
40.718 571.443 41.668 571.443 40.718 571.443 cv
40.718 565.063 40.718 571.443 40.718 565.063 cv
41.668 565.063 40.718 565.063 41.668 565.063 cv
41.668 567.725 41.668 565.063 41.668 567.725 cv
48.768 567.725 41.668 567.725 48.768 567.725 cv
48.768 568.79 48.768 567.725 48.768 568.79 cv
f
48.768 563.999 mo
42.936 563.999 48.768 563.999 42.936 563.999 cv
42.936 563.11 42.936 563.999 42.936 563.11 cv
43.82 563.11 42.936 563.11 43.82 563.11 cv
43.406 562.883 43.135 562.673 43.002 562.481 cv
42.871 562.29 42.805 562.078 42.805 561.847 cv
42.805 561.515 42.911 561.175 43.124 560.83 cv
44.04 561.171 43.124 560.83 44.04 561.171 cv
43.897 561.413 43.826 561.655 43.826 561.896 cv
43.826 562.112 43.891 562.306 44.02 562.478 cv
44.151 562.65 44.331 562.772 44.562 562.846 cv
44.913 562.956 45.298 563.009 45.715 563.009 cv
48.768 563.009 45.715 563.009 48.768 563.009 cv
48.768 563.999 48.768 563.009 48.768 563.999 cv
f
45.84 556.49 mo
45.987 556.849 46.112 557.387 46.214 558.105 cv
46.273 558.511 46.34 558.797 46.412 558.966 cv
46.486 559.133 46.593 559.263 46.733 559.356 cv
46.874 559.447 47.03 559.492 47.203 559.492 cv
47.466 559.492 47.685 559.393 47.861 559.195 cv
48.038 558.995 48.125 558.702 48.125 558.319 cv
48.125 557.938 48.041 557.599 47.876 557.302 cv
47.709 557.006 47.48 556.789 47.192 556.65 cv
46.968 556.543 46.639 556.49 46.203 556.49 cv
45.84 556.49 46.203 556.49 45.84 556.49 cv
cp
48.048 556.409 mo
48.359 556.775 48.579 557.126 48.707 557.466 cv
48.835 557.803 48.899 558.166 48.899 558.554 cv
48.899 559.195 48.742 559.686 48.43 560.032 cv
48.116 560.375 47.717 560.547 47.23 560.547 cv
46.945 560.547 46.684 560.483 46.448 560.353 cv
46.212 560.224 46.022 560.052 45.879 559.842 cv
45.737 559.632 45.628 559.395 45.556 559.131 cv
45.504 558.938 45.455 558.644 45.407 558.251 cv
45.311 557.456 45.199 556.868 45.067 556.49 cv
44.932 556.487 44.846 556.484 44.809 556.484 cv
44.406 556.484 44.122 556.579 43.957 556.764 cv
43.734 557.017 43.623 557.392 43.623 557.891 cv
43.623 558.355 43.704 558.698 43.868 558.919 cv
44.03 559.14 44.319 559.305 44.732 559.411 cv
44.6 560.376 44.732 559.411 44.6 560.376 cv
44.187 560.29 43.852 560.144 43.599 559.943 cv
43.344 559.743 43.147 559.452 43.011 559.071 cv
42.873 558.689 42.805 558.249 42.805 557.748 cv
42.805 557.25 42.864 556.845 42.98 556.534 cv
43.097 556.222 43.245 555.994 43.422 555.848 cv
43.601 555.701 43.824 555.599 44.095 555.541 cv
44.264 555.507 44.567 555.492 45.006 555.492 cv
46.324 555.492 45.006 555.492 46.324 555.492 cv
47.243 555.492 47.824 555.469 48.067 555.428 cv
48.31 555.386 48.545 555.303 48.768 555.178 cv
48.768 556.209 48.768 555.178 48.768 556.209 cv
48.562 556.313 48.322 556.379 48.048 556.409 cv
f
48.768 553.974 mo
42.936 553.974 48.768 553.974 42.936 553.974 cv
42.936 553.085 42.936 553.974 42.936 553.085 cv
43.766 553.085 42.936 553.085 43.766 553.085 cv
43.125 552.658 42.805 552.04 42.805 551.231 cv
42.805 550.878 42.869 550.556 42.994 550.261 cv
43.121 549.966 43.286 549.746 43.491 549.599 cv
43.696 549.452 43.939 549.351 44.222 549.292 cv
44.404 549.256 44.725 549.236 45.182 549.236 cv
48.768 549.236 45.182 549.236 48.768 549.236 cv
48.768 550.225 48.768 549.236 48.768 550.225 cv
45.221 550.225 48.768 550.225 45.221 550.225 cv
44.818 550.225 44.517 550.263 44.318 550.34 cv
44.118 550.417 43.958 550.555 43.84 550.749 cv
43.721 550.945 43.662 551.174 43.662 551.438 cv
43.662 551.86 43.795 552.222 44.062 552.529 cv
44.33 552.833 44.836 552.986 45.583 552.986 cv
48.768 552.986 45.583 552.986 48.768 552.986 cv
48.768 553.974 48.768 552.986 48.768 553.974 cv
f
47.027 548.133 mo
46.873 547.156 47.027 548.133 46.873 547.156 cv
47.265 547.099 47.565 546.949 47.774 546.698 cv
47.982 546.446 48.087 546.096 48.087 545.645 cv
48.087 545.192 47.995 544.855 47.809 544.635 cv
47.625 544.415 47.408 544.307 47.159 544.307 cv
46.935 544.307 46.759 544.404 46.632 544.598 cv
46.543 544.732 46.432 545.069 46.296 545.609 cv
46.114 546.332 45.955 546.833 45.822 547.115 cv
45.688 547.395 45.504 547.607 45.268 547.751 cv
45.031 547.896 44.77 547.967 44.485 547.967 cv
44.226 547.967 43.984 547.909 43.763 547.79 cv
43.542 547.671 43.357 547.508 43.211 547.304 cv
43.097 547.151 43.001 546.94 42.923 546.676 cv
42.844 546.409 42.805 546.125 42.805 545.823 cv
42.805 545.364 42.871 544.963 43.002 544.617 cv
43.135 544.27 43.313 544.015 43.538 543.851 cv
43.763 543.686 44.063 543.572 44.441 543.51 cv
44.573 544.477 44.441 543.51 44.573 544.477 cv
44.272 544.521 44.038 544.648 43.871 544.857 cv
43.702 545.069 43.617 545.366 43.617 545.75 cv
43.617 546.204 43.693 546.528 43.842 546.722 cv
43.993 546.917 44.167 547.013 44.37 547.013 cv
44.498 547.013 44.613 546.972 44.716 546.893 cv
44.822 546.812 44.909 546.686 44.979 546.513 cv
45.016 546.416 45.1 546.123 45.232 545.641 cv
45.418 544.941 45.57 544.454 45.689 544.177 cv
45.809 543.902 45.981 543.684 46.209 543.526 cv
46.435 543.369 46.717 543.291 47.054 543.291 cv
47.383 543.291 47.694 543.386 47.985 543.58 cv
48.276 543.77 48.502 544.047 48.661 544.411 cv
48.82 544.773 48.899 545.183 48.899 545.641 cv
48.899 546.398 48.741 546.974 48.427 547.372 cv
48.112 547.769 47.645 548.024 47.027 548.133 cv
f
48.768 541.837 mo
43.706 541.837 48.768 541.837 43.706 541.837 cv
43.706 542.711 43.706 541.837 43.706 542.711 cv
42.936 542.711 43.706 542.711 42.936 542.711 cv
42.936 541.837 42.936 542.711 42.936 541.837 cv
42.316 541.837 42.936 541.837 42.316 541.837 cv
41.925 541.837 41.634 541.803 41.443 541.735 cv
41.187 541.639 40.979 541.47 40.82 541.231 cv
40.661 540.992 40.581 540.658 40.581 540.224 cv
40.581 539.946 40.614 539.639 40.68 539.301 cv
41.542 539.451 40.68 539.301 41.542 539.451 cv
41.505 539.656 41.487 539.85 41.487 540.032 cv
41.487 540.333 41.551 540.545 41.68 540.67 cv
41.807 540.793 42.047 540.855 42.398 540.855 cv
42.936 540.855 42.398 540.855 42.936 540.855 cv
42.936 539.718 42.936 540.855 42.936 539.718 cv
43.706 539.718 42.936 539.718 43.706 539.718 cv
43.706 540.855 43.706 539.718 43.706 540.855 cv
48.768 540.855 43.706 540.855 48.768 540.855 cv
48.768 541.837 48.768 540.855 48.768 541.837 cv
f
45.292 538.209 mo
45.292 534.953 45.292 538.209 45.292 534.953 cv
44.801 534.999 44.434 535.122 44.188 535.327 cv
43.808 535.641 43.617 536.049 43.617 536.549 cv
43.617 537.006 43.769 537.386 44.073 537.697 cv
44.376 538.004 44.783 538.175 45.292 538.209 cv
cp
46.89 534.963 mo
47.016 533.943 46.89 534.963 47.016 533.943 cv
47.613 534.105 48.076 534.402 48.405 534.839 cv
48.735 535.273 48.899 535.83 48.899 536.506 cv
48.899 537.359 48.637 538.037 48.111 538.536 cv
47.586 539.036 46.85 539.285 45.901 539.285 cv
44.921 539.285 44.16 539.032 43.617 538.528 cv
43.076 538.022 42.805 537.368 42.805 536.562 cv
42.805 535.782 43.07 535.145 43.601 534.651 cv
44.131 534.157 44.878 533.911 45.84 533.911 cv
45.899 533.911 45.987 533.913 46.104 533.915 cv
46.104 538.263 46.104 533.915 46.104 538.263 cv
46.745 538.227 47.235 538.045 47.576 537.72 cv
47.916 537.394 48.087 536.988 48.087 536.501 cv
48.087 536.14 47.992 535.83 47.801 535.575 cv
47.61 535.318 47.307 535.115 46.89 534.963 cv
f
48.768 532.729 mo
42.936 532.729 48.768 532.729 42.936 532.729 cv
42.936 531.84 42.936 532.729 42.936 531.84 cv
43.82 531.84 42.936 531.84 43.82 531.84 cv
43.406 531.613 43.135 531.403 43.002 531.211 cv
42.871 531.019 42.805 530.808 42.805 530.577 cv
42.805 530.244 42.911 529.907 43.124 529.562 cv
44.04 529.902 43.124 529.562 44.04 529.902 cv
43.897 530.144 43.826 530.385 43.826 530.625 cv
43.826 530.842 43.891 531.037 44.02 531.208 cv
44.151 531.38 44.331 531.503 44.562 531.576 cv
44.913 531.686 45.298 531.742 45.715 531.742 cv
48.768 531.742 45.715 531.742 48.768 531.742 cv
48.768 532.729 48.768 531.742 48.768 532.729 cv
f
45.858 525.166 mo
46.604 525.166 47.162 525.008 47.533 524.693 cv
47.901 524.377 48.087 524.006 48.087 523.579 cv
48.087 523.146 47.91 522.779 47.556 522.478 cv
47.204 522.176 46.665 522.025 45.94 522.025 cv
45.142 522.025 44.556 522.179 44.184 522.486 cv
43.81 522.794 43.623 523.172 43.623 523.622 cv
43.623 524.062 43.803 524.428 44.161 524.722 cv
44.52 525.019 45.085 525.166 45.858 525.166 cv
cp
48.768 522.041 mo
48.031 522.041 48.768 522.041 48.031 522.041 cv
48.61 522.412 48.899 522.956 48.899 523.672 cv
48.899 524.136 48.771 524.564 48.515 524.955 cv
48.258 525.343 47.9 525.646 47.441 525.861 cv
46.982 526.075 46.454 526.18 45.858 526.18 cv
45.275 526.18 44.748 526.085 44.273 525.891 cv
43.8 525.697 43.437 525.406 43.184 525.017 cv
42.932 524.628 42.805 524.195 42.805 523.715 cv
42.805 523.366 42.879 523.051 43.027 522.776 cv
43.175 522.502 43.368 522.28 43.606 522.107 cv
40.718 522.107 43.606 522.107 40.718 522.107 cv
40.718 521.125 40.718 522.107 40.718 521.125 cv
48.768 521.125 40.718 521.125 48.768 521.125 cv
48.768 522.041 48.768 521.125 48.768 522.041 cv
f
44.904 517.021 mo
44.901 517.162 44.899 517.27 44.899 517.343 cv
44.899 517.946 45.034 518.394 45.304 518.685 cv
45.573 518.976 45.953 519.122 46.445 519.122 cv
47.088 519.122 47.604 518.947 47.995 518.602 cv
48.385 518.255 48.58 517.845 48.58 517.369 cv
48.58 516.973 48.439 516.646 48.154 516.39 cv
47.869 516.135 47.459 516.005 46.924 516.005 cv
46.15 516.005 45.477 516.344 44.904 517.021 cv
cp
44.904 514.38 mo
44.904 516.642 44.904 514.38 44.904 516.642 cv
45.187 516.135 45.5 515.748 45.844 515.486 cv
46.187 515.223 46.584 515.092 47.035 515.092 cv
47.554 515.092 47.998 515.302 48.368 515.718 cv
48.739 516.137 48.925 516.695 48.925 517.395 cv
48.925 518.131 48.673 518.753 48.171 519.258 cv
47.671 519.764 47.064 520.016 46.354 520.016 cv
45.927 520.016 45.539 519.91 45.192 519.698 cv
44.846 519.485 44.584 519.217 44.407 518.892 cv
44.23 518.568 44.142 518.069 44.142 517.4 cv
44.142 514.38 44.142 517.4 44.142 514.38 cv
44.904 514.38 44.142 514.38 44.904 514.38 cv
f
48.905 514.253 mo
40.581 511.92 48.905 514.253 40.581 511.92 cv
40.581 511.13 40.581 511.92 40.581 511.13 cv
48.905 513.457 40.581 511.13 48.905 513.457 cv
48.905 514.253 48.905 513.457 48.905 514.253 cv
f
45.858 509.736 mo
46.604 509.736 47.162 509.578 47.533 509.263 cv
47.901 508.948 48.087 508.577 48.087 508.148 cv
48.087 507.717 47.91 507.35 47.556 507.048 cv
47.204 506.746 46.665 506.594 45.94 506.594 cv
45.142 506.594 44.556 506.748 44.184 507.057 cv
43.81 507.364 43.623 507.742 43.623 508.192 cv
43.623 508.632 43.803 508.999 44.161 509.293 cv
44.52 509.588 45.085 509.736 45.858 509.736 cv
cp
48.768 506.611 mo
48.031 506.611 48.768 506.611 48.031 506.611 cv
48.61 506.981 48.899 507.524 48.899 508.243 cv
48.899 508.706 48.771 509.134 48.515 509.524 cv
48.258 509.913 47.9 510.215 47.441 510.43 cv
46.982 510.644 46.454 510.751 45.858 510.751 cv
45.275 510.751 44.748 510.654 44.273 510.46 cv
43.8 510.267 43.437 509.975 43.184 509.587 cv
42.932 509.199 42.805 508.766 42.805 508.286 cv
42.805 507.935 42.879 507.622 43.027 507.347 cv
43.175 507.072 43.368 506.85 43.606 506.678 cv
40.718 506.678 43.606 506.678 40.718 506.678 cv
40.718 505.694 40.718 506.678 40.718 505.694 cv
48.768 505.694 40.718 505.694 48.768 505.694 cv
48.768 506.611 48.768 505.694 48.768 506.611 cv
f
48.768 497.32 mo
48.768 500.184 48.768 497.32 48.768 500.184 cv
47.359 500.062 48.768 500.184 47.359 500.062 cv
47.16 499.587 46.877 499.238 46.51 499.014 cv
46.143 498.79 45.628 498.678 44.965 498.678 cv
44.049 498.678 43.347 498.901 42.857 499.347 cv
42.368 499.793 42.122 500.354 42.122 501.031 cv
42.122 501.685 42.371 502.236 42.867 502.687 cv
43.363 503.138 44.039 503.364 44.894 503.364 cv
45.567 503.364 46.104 503.248 46.505 503.018 cv
46.906 502.788 47.19 502.44 47.359 501.975 cv
48.768 501.849 47.359 501.975 48.768 501.849 cv
48.768 504.697 48.768 501.849 48.768 504.697 cv
47.359 504.697 48.768 504.697 47.359 504.697 cv
47.359 504.52 47.359 504.697 47.359 504.52 cv
47.564 504.511 47.703 504.457 47.778 504.359 cv
47.895 504.207 47.955 503.977 47.955 503.667 cv
47.955 502.304 47.955 503.667 47.955 502.304 cv
47.601 502.304 47.955 502.304 47.601 502.304 cv
47.395 503.011 47.044 503.556 46.545 503.943 cv
46.047 504.327 45.46 504.52 44.783 504.52 cv
43.935 504.52 43.22 504.206 42.637 503.578 cv
42.056 502.951 41.764 502.102 41.764 501.031 cv
41.764 500.375 41.888 499.771 42.135 499.221 cv
42.382 498.671 42.743 498.247 43.218 497.949 cv
43.693 497.65 44.214 497.501 44.783 497.501 cv
45.48 497.501 46.086 497.706 46.603 498.116 cv
47.121 498.524 47.453 499.059 47.601 499.719 cv
47.955 499.759 47.601 499.719 47.955 499.759 cv
47.955 498.371 47.955 499.759 47.955 498.371 cv
47.955 498.06 47.907 497.845 47.813 497.723 cv
47.719 497.602 47.567 497.532 47.359 497.511 cv
47.359 497.32 47.359 497.511 47.359 497.32 cv
48.768 497.32 47.359 497.32 48.768 497.32 cv
f
51.001 493.218 mo
40.718 493.218 51.001 493.218 40.718 493.218 cv
40.718 491.04 40.718 493.218 40.718 491.04 cv
41.537 491.04 40.718 491.04 41.537 491.04 cv
41.537 492.23 41.537 491.04 41.537 492.23 cv
50.184 492.23 41.537 492.23 50.184 492.23 cv
50.184 491.04 50.184 492.23 50.184 491.04 cv
51.001 491.04 50.184 491.04 51.001 491.04 cv
51.001 493.218 51.001 491.04 51.001 493.218 cv
f
48.768 490.122 mo
42.936 490.122 48.768 490.122 42.936 490.122 cv
42.936 489.237 42.936 490.122 42.936 489.237 cv
43.755 489.237 42.936 489.237 43.755 489.237 cv
43.469 489.056 43.24 488.811 43.065 488.507 cv
42.892 488.205 42.805 487.858 42.805 487.471 cv
42.805 487.038 42.894 486.684 43.074 486.408 cv
43.253 486.131 43.503 485.937 43.826 485.822 cv
43.145 485.362 42.805 484.762 42.805 484.022 cv
42.805 483.444 42.966 482.999 43.286 482.689 cv
43.605 482.377 44.099 482.222 44.765 482.222 cv
48.768 482.222 44.765 482.222 48.768 482.222 cv
48.768 483.204 48.768 482.222 48.768 483.204 cv
45.095 483.204 48.768 483.204 45.095 483.204 cv
44.699 483.204 44.414 483.236 44.24 483.3 cv
44.066 483.364 43.926 483.481 43.82 483.649 cv
43.714 483.817 43.662 484.016 43.662 484.242 cv
43.662 484.652 43.798 484.993 44.07 485.263 cv
44.343 485.534 44.78 485.669 45.38 485.669 cv
48.768 485.669 45.38 485.669 48.768 485.669 cv
48.768 486.657 48.768 485.669 48.768 486.657 cv
44.979 486.657 48.768 486.657 44.979 486.657 cv
44.54 486.657 44.21 486.738 43.991 486.899 cv
43.771 487.06 43.662 487.324 43.662 487.689 cv
43.662 487.968 43.734 488.225 43.881 488.461 cv
44.027 488.697 44.241 488.869 44.524 488.975 cv
44.804 489.081 45.211 489.133 45.742 489.133 cv
48.768 489.133 45.742 489.133 48.768 489.133 cv
48.768 490.122 48.768 489.133 48.768 490.122 cv
f
45.808 479.866 mo
46.507 479.866 47.013 479.77 47.324 479.579 cv
47.832 479.268 48.087 478.849 48.087 478.317 cv
48.087 477.885 47.899 477.512 47.524 477.197 cv
47.149 476.882 46.59 476.725 45.847 476.725 cv
45.085 476.725 44.524 476.876 44.161 477.178 cv
43.799 477.48 43.617 477.845 43.617 478.272 cv
43.617 478.705 43.805 479.078 44.18 479.393 cv
44.555 479.708 45.099 479.866 45.808 479.866 cv
cp
48.768 479.854 mo
48.768 480.771 48.768 479.854 48.768 480.771 cv
40.718 480.771 48.768 480.771 40.718 480.771 cv
40.718 479.783 40.718 480.771 40.718 479.783 cv
43.59 479.783 40.718 479.783 43.59 479.783 cv
43.067 479.365 42.805 478.833 42.805 478.185 cv
42.805 477.826 42.877 477.488 43.022 477.167 cv
43.167 476.846 43.369 476.583 43.631 476.376 cv
43.893 476.169 44.209 476.007 44.578 475.891 cv
44.948 475.774 45.343 475.715 45.764 475.715 cv
46.764 475.715 47.536 475.961 48.081 476.456 cv
48.626 476.95 48.899 477.543 48.899 478.234 cv
48.899 478.923 48.612 479.462 48.038 479.854 cv
48.768 479.854 48.038 479.854 48.768 479.854 cv
f
48.905 475.269 mo
40.581 472.936 48.905 475.269 40.581 472.936 cv
40.581 472.146 40.581 472.936 40.581 472.146 cv
48.905 474.473 40.581 472.146 48.905 474.473 cv
48.905 475.269 48.905 474.473 48.905 475.269 cv
f
47.027 471.805 mo
46.873 470.828 47.027 471.805 46.873 470.828 cv
47.265 470.773 47.565 470.62 47.774 470.369 cv
47.982 470.118 48.087 469.768 48.087 469.318 cv
48.087 468.864 47.995 468.527 47.809 468.308 cv
47.625 468.089 47.408 467.978 47.159 467.978 cv
46.935 467.978 46.759 468.075 46.632 468.269 cv
46.543 468.405 46.432 468.741 46.296 469.28 cv
46.114 470.004 45.955 470.507 45.822 470.787 cv
45.688 471.067 45.504 471.279 45.268 471.423 cv
45.031 471.567 44.77 471.64 44.485 471.64 cv
44.226 471.64 43.984 471.58 43.763 471.461 cv
43.542 471.343 43.357 471.181 43.211 470.976 cv
43.097 470.822 43.001 470.612 42.923 470.347 cv
42.844 470.082 42.805 469.797 42.805 469.494 cv
42.805 469.035 42.871 468.634 43.002 468.289 cv
43.135 467.942 43.313 467.686 43.538 467.522 cv
43.763 467.358 44.063 467.244 44.441 467.182 cv
44.573 468.148 44.441 467.182 44.573 468.148 cv
44.272 468.193 44.038 468.319 43.871 468.53 cv
43.702 468.74 43.617 469.038 43.617 469.422 cv
43.617 469.876 43.693 470.2 43.842 470.394 cv
43.993 470.587 44.167 470.685 44.37 470.685 cv
44.498 470.685 44.613 470.644 44.716 470.564 cv
44.822 470.483 44.909 470.357 44.979 470.185 cv
45.016 470.086 45.1 469.795 45.232 469.312 cv
45.418 468.612 45.57 468.125 45.689 467.848 cv
45.809 467.573 45.981 467.356 46.209 467.199 cv
46.435 467.042 46.717 466.962 47.054 466.962 cv
47.383 466.962 47.694 467.059 47.985 467.251 cv
48.276 467.443 48.502 467.72 48.661 468.082 cv
48.82 468.445 48.899 468.855 48.899 469.312 cv
48.899 470.069 48.741 470.647 48.427 471.044 cv
48.112 471.442 47.645 471.695 47.027 471.805 cv
f
47.884 463.589 mo
48.757 463.445 47.884 463.589 48.757 463.445 cv
48.815 463.724 48.844 463.973 48.844 464.193 cv
48.844 464.551 48.788 464.83 48.674 465.027 cv
48.561 465.225 48.412 465.364 48.227 465.445 cv
48.041 465.525 47.653 465.565 47.06 465.565 cv
43.706 465.565 47.06 465.565 43.706 465.565 cv
43.706 466.29 43.706 465.565 43.706 466.29 cv
42.936 466.29 43.706 466.29 42.936 466.29 cv
42.936 465.565 42.936 466.29 42.936 465.565 cv
41.492 465.565 42.936 465.565 41.492 465.565 cv
40.9 464.582 41.492 465.565 40.9 464.582 cv
42.936 464.582 40.9 464.582 42.936 464.582 cv
42.936 463.589 42.936 464.582 42.936 463.589 cv
43.706 463.589 42.936 463.589 43.706 463.589 cv
43.706 464.582 43.706 463.589 43.706 464.582 cv
47.115 464.582 43.706 464.582 47.115 464.582 cv
47.397 464.582 47.578 464.565 47.658 464.531 cv
47.739 464.495 47.802 464.438 47.851 464.361 cv
47.898 464.281 47.922 464.168 47.922 464.022 cv
47.922 463.913 47.909 463.768 47.884 463.589 cv
f
45.292 461.881 mo
45.292 458.626 45.292 461.881 45.292 458.626 cv
44.801 458.67 44.434 458.793 44.188 458.998 cv
43.808 459.313 43.617 459.722 43.617 460.223 cv
43.617 460.677 43.769 461.059 44.073 461.368 cv
44.376 461.677 44.783 461.849 45.292 461.881 cv
cp
46.89 458.637 mo
47.016 457.615 46.89 458.637 47.016 457.615 cv
47.613 457.776 48.076 458.075 48.405 458.51 cv
48.735 458.946 48.899 459.502 48.899 460.179 cv
48.899 461.032 48.637 461.708 48.111 462.207 cv
47.586 462.708 46.85 462.958 45.901 462.958 cv
44.921 462.958 44.16 462.705 43.617 462.2 cv
43.076 461.694 42.805 461.039 42.805 460.235 cv
42.805 459.454 43.07 458.817 43.601 458.324 cv
44.131 457.829 44.878 457.582 45.84 457.582 cv
45.899 457.582 45.987 457.584 46.104 457.588 cv
46.104 461.935 46.104 457.588 46.104 461.935 cv
46.745 461.898 47.235 461.718 47.576 461.392 cv
47.916 461.066 48.087 460.661 48.087 460.174 cv
48.087 459.812 47.992 459.502 47.801 459.246 cv
47.61 458.989 47.307 458.787 46.89 458.637 cv
f
48.768 456.402 mo
42.936 456.402 48.768 456.402 42.936 456.402 cv
42.936 455.512 42.936 456.402 42.936 455.512 cv
43.82 455.512 42.936 455.512 43.82 455.512 cv
43.406 455.286 43.135 455.076 43.002 454.883 cv
42.871 454.691 42.805 454.48 42.805 454.249 cv
42.805 453.916 42.911 453.578 43.124 453.233 cv
44.04 453.574 43.124 453.233 44.04 453.574 cv
43.897 453.815 43.826 454.057 43.826 454.298 cv
43.826 454.514 43.891 454.708 44.02 454.88 cv
44.151 455.053 44.331 455.176 44.562 455.248 cv
44.913 455.358 45.298 455.413 45.715 455.413 cv
48.768 455.413 45.715 455.413 48.768 455.413 cv
48.768 456.402 48.768 455.413 48.768 456.402 cv
f
51.001 450.963 mo
51.001 453.142 51.001 450.963 51.001 453.142 cv
50.184 453.142 51.001 453.142 50.184 453.142 cv
50.184 451.951 50.184 453.142 50.184 451.951 cv
41.537 451.951 50.184 451.951 41.537 451.951 cv
41.537 453.142 41.537 451.951 41.537 453.142 cv
40.718 453.142 41.537 453.142 40.718 453.142 cv
40.718 450.963 40.718 453.142 40.718 450.963 cv
51.001 450.963 40.718 450.963 51.001 450.963 cv
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LWYAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginVSISRS+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B6079F1E66B7565D0C0FE392D7D1AED8C6DCA6A1AA2DE51BB054073985C252F108C147E5B894B74E8DD41D4B2907B2971BD6DBC1DA40B30BE321EFA5013A17A623A37E171056FA1C8F8EA833B84DA2D5777727CE57C35BBEBB84A1CD5B36C6FDD2EDF02AB75D6D59B40E8D867EAC2EF07C9A4EC98494859463D49D6F36907EE221091971F8FF4FEE> |-/M <1C60D8A8C9B59F859BE0FB9A2A0F7654C6EDCAEDEE9F7FF916442D9C9F4ED6F42D0588BBB70AFF4A34C797748BF897F607B52C72A4CB4A45FE66E245A32A75D88FD8959E00389A6DBAED16321CC2D91DF069B6D6467D128CC5B30A96938452FCD034FAF7C4DC50E3464B901F68B77945A36B587B81F6A85C08C5E954DCBEA7AEB21BCCFA49> |-/N <1C60D8A8C9B6079F1E48848E88AD51D864EC24104C6DD11D55A63CFF3E9C756106D0E97B2A535F11521FC421A87DB7AA1BB7E5E72F9C1F26749CEA60879128C49F034519E4F1E3D0B2668109027E7AE954A9FBCDB8C98F28D8FD5566696AFD7E7E86478C98CFD0142A5D34CA87950DF8C96F24696E1A4263A162D3B7D0318A42AFF3> |-systemdict /gcheck known {setglobal} if end {end} ifendVSISRS+Times-Roman /Encoding getdup 68 /D putdup 77 /M putdup 78 /N putpop%ADOEndSubsetFont
/VSISRS+Times-Roman*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine /colon 6{/.notdef}rp /A /.notdef /C /D /E /F /G /H /I /.notdef /K /L /M /N /.notdef /P /.notdef /R /S /T /.notdef /V /W /.notdef /Y /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z 51{/.notdef}rp /fi 2{/.notdef}rp /endash 78{/.notdef}rp]VSISRS+Times-Roman nfVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf52.497 639.239 mo(FIG.4.\(Coloronline\)Comparisonofdifferentialtransfercross)[4.98532 2.98574 6.47374 5.19334 4.4832 6.0299 2.98574 5.98066 4.4832 2.49265 4.4832 5.88638 4.4832 4.4832 2.49266 2.49265 4.4832 3.98109 5.89534 5.98065 4.48322 6.97585 4.4832 3.98108 2.98575 2.49266 3.48799 4.48322 7.38922 4.4823 5.89532 4.48233 2.49265 2.7634 2.98572 3.98111 2.98572 3.98111 4.48318 2.49265 2.49268 3.98108 5.40048 2.49265 2.98575 3.98108 4.48322 3.48798 2.98575 3.98108 5.88638 3.97839 2.98575 4.48318 3.48801 0 ]xsh40.5358 650.201 mo(sectionsmeasuredforthe)[3.4871 3.98019 3.98019 2.49176 2.49176 4.48231 4.4823 5.82285 6.97496 3.98019 3.98019 3.4871 4.4823 2.98485 3.98019 6.81358 2.98483 4.48232 5.3188 2.49266 4.4823 0 ]xshVSISRS+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf134.514 646.943 mo(20)[2.9882 0 ]xshVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf140.994 650.201 mo(Ne)[6.47105 0 ]xsh%ADOBeginSubsetFont: KVXQMX+MTSY AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginVSISRX+MTSY dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/plus <1C60D8A8C9B6C180FE7E255088499B6A505EB6DB68D164488832FE8CE1A33AC5E060A59D03BCEB9639BC4D489466A32ABD040C578748437F6AB5A2> |-systemdict /gcheck known {setglobal} if end {end} ifendVSISRX+MTSY /Encoding getdup 67 /plus putpop%ADOEndSubsetFont
/VSISRX+MTSY*1 [67{/.notdef}rp /plus /equal 108{/.notdef}rp /openbullet 78{/.notdef}rp]VSISRX+MTSY nfVSISRX+MTSY*1 [8.9664 0 0 -8.9664 0 0 ]msf154.935 650.201 mo(C)shVSISRS+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf165.411 646.943 mo(90)[2.9882 0 ]xsh%ADOBeginSubsetFont: CMKQMX+MTMI AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginVSISRW+MTMI dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/comma <1C60D8A8C9B821B3259708BCD717D7034C35291735F761867B0D7790444C597891B3AD34A0C55BF7F0630DAF50BF8F32C25C98049945665AAA61E7C5365BA0E652780DEDD63BA8A518E6584369A625690069> |-systemdict /gcheck known {setglobal} if end {end} ifendVSISRW+MTMI /Encoding getdup 59 /comma putpop%ADOEndSubsetFont
/VSISRW+MTMI*1 [49{/.notdef}rp /Delta1 9{/.notdef}rp /comma /.notdef /slash 3{/.notdef}rp /A 3{/.notdef}rp /E 11{/.notdef}rp /Q 174{/.notdef}rp]VSISRW+MTMI nfVSISRW+MTMI*1 [5.9776 0 0 -5.9776 0 0 ]msf171.388 646.943 mo(;)shVSISRS+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf173.368 646.943 mo(92)[2.9882 0 ]xshVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf179.847 650.201 mo(Zrsystemsat)[5.48019 5.32777 3.48979 4.48499 3.48979 2.49445 3.98288 6.97766 5.81387 3.97839 0 ]xshVSISRW+MTMI*1 [8.9664 0 0 -8.9664 0 0 ]msf230.185 650.201 mo(E)shVSISRS+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf236.637 651.542 mo(eff)[2.65526 1.83627 0 ]xshVSISRX+MTSY*1 [8.9664 0 0 -8.9664 0 0 ]msf246.411 650.201 mo(D)shVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf255.897 650.201 mo(50MeV)[4.4832 6.81357 7.97119 3.98108 0 ]xsh40.5353 661.163 mo(andaCManglearound156)[3.98108 4.4832 8.89198 8.3791 5.98065 12.3665 3.98108 4.4832 4.4832 2.49266 8.39703 3.97839 2.98575 4.4832 4.4832 4.4832 8.88301 4.48318 4.48322 0 ]xshVSISRX+MTSY*1 [5.9776 0 0 -5.9776 0 0 ]msf151.191 657.905 mo(\261)shVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf154.683 661.163 mo(.Differentbarsrepresentdifferent)[6.6423 6.47105 2.49266 2.76338 2.98575 3.98108 2.98575 3.98108 4.4832 6.90323 4.4832 3.98108 2.98575 7.89319 2.98575 3.98108 4.48322 2.98573 3.98109 3.48799 3.98108 4.4832 6.89426 4.48233 2.49265 2.76337 2.98575 3.98108 2.98575 3.98108 4.48318 0 ]xsh40.5353 672.116 mo(transferchannels.)[2.49266 2.98574 3.98109 4.4832 3.488 2.98574 3.98109 5.22913 3.98109 4.4832 3.98109 4.4832 4.4832 3.98108 2.49266 3.488 0 ]xshgsave
515.717 2.03296 mo
335.592 2.03296 li
335.592 169.079 li
515.717 169.079 li
cp
clp
.355 lw
0 lj
511.218 2.211 mo
511.218 4.57898 li
469.889 2.211 mo
469.889 4.57898 li
428.442 2.211 mo
428.442 4.57898 li
387.112 2.211 mo
387.112 4.57898 li
511.218 144.316 mo
511.218 141.947 li
469.889 144.316 mo
469.889 141.947 li
428.442 144.316 mo
428.442 141.947 li
387.112 144.316 mo
387.112 141.947 li
511.218 2.211 mo
511.218 3.39496 li
490.494 2.211 mo
490.494 3.39496 li
469.889 2.211 mo
469.889 3.39496 li
449.165 2.211 mo
449.165 3.39496 li
428.442 2.211 mo
428.442 3.39496 li
407.718 2.211 mo
407.718 3.39496 li
387.112 2.211 mo
387.112 3.39496 li
366.389 2.211 mo
366.389 3.39496 li
511.218 144.316 mo
511.218 143.132 li
490.494 144.316 mo
490.494 143.132 li
469.889 144.316 mo
469.889 143.132 li
449.165 144.316 mo
449.165 143.132 li
428.442 144.316 mo
428.442 143.132 li
407.718 144.316 mo
407.718 143.132 li
387.112 144.316 mo
387.112 143.132 li
366.389 144.316 mo
366.389 143.132 li
511.218 50.645 mo
508.85 50.645 li
511.218 87.829 mo
508.85 87.829 li
511.218 124.895 mo
508.85 124.895 li
366.389 50.645 mo
368.758 50.645 li
366.389 87.829 mo
368.758 87.829 li
366.389 124.895 mo
368.758 124.895 li
511.218 15.118 mo
510.034 15.118 li
511.218 17.013 mo
510.034 17.013 li
511.218 19.263 mo
510.034 19.263 li
511.218 21.75 mo
510.034 21.75 li
511.218 24.593 mo
510.034 24.593 li
511.218 28.263 mo
510.034 28.263 li
511.218 32.881 mo
510.034 32.881 li
511.218 39.395 mo
510.034 39.395 li
511.218 50.645 mo
510.034 50.645 li
511.218 52.303 mo
510.034 52.303 li
511.218 54.198 mo
510.034 54.198 li
511.218 56.329 mo
510.034 56.329 li
511.218 58.816 mo
510.034 58.816 li
511.218 61.776 mo
510.034 61.776 li
511.218 65.448 mo
510.034 65.448 li
511.218 70.066 mo
510.034 70.066 li
511.218 76.579 mo
510.034 76.579 li
511.218 87.829 mo
510.034 87.829 li
511.218 89.487 mo
510.034 89.487 li
511.218 91.382 mo
510.034 91.382 li
511.218 93.513 mo
510.034 93.513 li
511.218 96 mo
510.034 96 li
511.218 98.961 mo
510.034 98.961 li
511.218 102.513 mo
510.034 102.513 li
511.218 107.251 mo
510.034 107.251 li
511.218 113.763 mo
510.034 113.763 li
511.218 124.895 mo
510.034 124.895 li
511.218 126.672 mo
510.034 126.672 li
511.218 128.566 mo
510.034 128.566 li
511.218 130.697 mo
510.034 130.697 li
511.218 133.183 mo
510.034 133.183 li
511.218 136.144 mo
510.034 136.144 li
511.218 139.698 mo
510.034 139.698 li
511.218 144.316 mo
510.034 144.316 li
366.389 15.118 mo
367.573 15.118 li
366.389 17.013 mo
367.573 17.013 li
366.389 19.263 mo
367.573 19.263 li
366.389 21.75 mo
367.573 21.75 li
366.389 24.593 mo
367.573 24.593 li
366.389 28.263 mo
367.573 28.263 li
366.389 32.881 mo
367.573 32.881 li
366.389 39.395 mo
367.573 39.395 li
366.389 50.645 mo
367.573 50.645 li
366.389 52.303 mo
367.573 52.303 li
366.389 54.198 mo
367.573 54.198 li
366.389 56.329 mo
367.573 56.329 li
366.389 58.816 mo
367.573 58.816 li
366.389 61.776 mo
367.573 61.776 li
366.389 65.448 mo
367.573 65.448 li
366.389 70.066 mo
367.573 70.066 li
366.389 76.579 mo
367.573 76.579 li
366.389 87.829 mo
367.573 87.829 li
366.389 89.487 mo
367.573 89.487 li
366.389 91.382 mo
367.573 91.382 li
366.389 93.513 mo
367.573 93.513 li
366.389 96 mo
367.573 96 li
366.389 98.961 mo
367.573 98.961 li
366.389 102.513 mo
367.573 102.513 li
366.389 107.251 mo
367.573 107.251 li
366.389 113.763 mo
367.573 113.763 li
366.389 124.895 mo
367.573 124.895 li
366.389 126.672 mo
367.573 126.672 li
366.389 128.566 mo
367.573 128.566 li
366.389 130.697 mo
367.573 130.697 li
366.389 133.183 mo
367.573 133.183 li
366.389 136.144 mo
367.573 136.144 li
366.389 139.698 mo
367.573 139.698 li
366.389 144.316 mo
367.573 144.316 li
.694423 .677272 .637385 .738643 cmyk
@
grestore
.694423 .677272 .637385 .738643 cmyk
%ADOBeginSubsetFont: SBVPMX+TimesNewRomanPS Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /SBVPMX+TimesNewRomanPS def/FontInfo 8 dict dup begin/Notice (Copyright (c) 1988, 1990 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation Plc registered in the US Patent and TM Office and elsewhere.) def/Weight (Roman) def/ItalicAngle 0 def/BaseFontName (TimesNewRomanPS) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putdup 67 /C putdup 77 /M putdup 81 /Q putdup 86 /V putdup 91 /bracketleft putdup 93 /bracketright putdup 101 /e putdup 110 /n putdup 111 /o putdup 115 /s putdup 116 /t putdup 117 /u putdup 127 /minus putdef/FontBBox {-167 -216 1009 878} defendsystemdict begindup /Private10 dict dup begin/|- {def} def/| {put} def/BlueValues [-15 -0 662 677 447 461 694 694] def/OtherBlues [384 384 -216 -213] def/StdHW [36] def/StdVW [87] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings21 dict dup begin/space <1C60D8A8C9B8707C25> |-/zero <1C60D8A8C9B7A73D33B1D1416E04E763984AB83B925BA8A4FDE215501CA86FB8A0453E2C2116D4EBB36C4E7E5E28E3C02FDE0FF4A749E3E3B61D0B5972B2FA36E008E079A694D81C4B7A2CE9635E3FDFE8FE87FF8DA92D> |-/one <1C60D8A8C9B7A73DC54E0D6CDEF63D6D8B1D1BAFF1FE96FACEB5D2E94CC33A048E79C70D79DA501F0FEDC03A8E3E458B1265FD28A5171BD1D7126471227C327E28D3395C> |-/two <1C60D8A8C9B7A73DC506FC27B647F3B220444418F84A63EEA0C85378D83FED067EE2616181F53C98E193A0786AFABC6AF3DE813E5DFEF95B86E3C09F0D4E4645F3E651EA1566CD58B7401E11D694DED682CB44FAD00D6F212FF07D> |-/three <1C60D8A8C9B7A73D33A01A1054C882E3E266AB9E20905BA640379B187EB6EBABF905E8CC50AED6B5FC34D0C1498F28808D72D7E0888E388EF7E4E369B1D9FA4BF0B525DDD6C359F5B06C0A93F3D1969130948DD8BC2D312D26A983C358CE52223BD90A9BC09D3854AEBC026CBBB15C22879B549123DF14A809BA94548C95DE9920DB766F5E> |-/four <1C60D8A8C9B7A73DB96726F82EC389232F73A7B6E7875DC9A46EF4FEC7F3D5E23D7BF70B540998FC5CC08E09E16340F0B45A6DECA08B4B9468D4E4B393F67B7110F71363573BAD8DD1FBA20AE97EE1AF738E6778F333F5BC98166EAE94F95B7717> |-/five <1C60D8A8C9B7A73D33A7C131526B80A16A362E096FD4079A6DA447FC592CE50E05C444F03F4DE25BC455446EB10265A6929854EAB3F755631C90267B50E2016F6B8C24401E3E0E13F1BC900E4A2A974AAD23E1A92F16F2A187> |-/C <1C60D8A8C9B64EDF7FCB1225CBEBAD7C2A1CDCAA154679A537BCF30C436AC0686DBF251E622CF18D32C29E14A13579E37F151EDC74261EA3C2645F3C009649E8FB800A09E17F1093EAEBAA6F4D561E521DEB52CBB9CC47D2A1DC16423790240EA0E7F9DA2BA7D79446F5CBA5E01E4CAFD0AFED04> |-/M <1C60D8A8C9B59F859BE36722F335C424A3959F3C40788D59DD8002721512B63F78C2CD40476BE632847058326A18680A51A56F350AFC4601E106D85D9935C71758FE4B99DBAD8FB00FF6547655EDC5ADFF53E68939F2E851D8568D22302C2C338F02446444A7B8C22A8A2420B3FB18D904D3E7> |-/Q <1C60D8A8C9B6079F6E02C9DA269270C5FCDED9146BB469F33CE6613B8C6C56187601C4763E04A25451AD4E7C9E186FD85AB83F3E30A17A58EBFBFA36DBA6CCE6C6E905E000287105EAFAEA0B660FE5E87063F9C3EAA64AEBD40CE32C9BEDA6F8C6D843B8D268C5D02CE259394A1EB422C484A5451B85781837883DA674CBBDFFFB8E> |-/V <1C60D8A8C9B6079F04A83E3B4E883805E50F0DF991CF8D253E7AC58EBBA67FB1D8E3B74B44AE939977C7855B691FDD2839D7955C25E1E1C4A5F8656B5FA0C006CB839E1339D47D3A599E0B9E9A0EC6884B72376B73C46E097A0F435E559D0069C3F87F> |-/bracketleft <1C60D8A8C9B81F2C36D8E73806322164F168F3E390041BCFDD43E533FD7FC74339F2B75EEC9B10D3B81F4C9B5F> |-/bracketright <1C60D8A8C9B81F2C36D8E73806322164DBB51B216257DA0F9A0B5E3BF60636EB3EFFFC65821B3952CF2758C6A9> |-/e <1C60D8A8C9B77FE2440C4A0C4012CA2ADDAA2063D74E7F1A056744D16DC4F1711CD9A18819F63D090F36F7759337998C39810BF5A75C4828A06DD1AF80A5B613D3D44E1887EDB74C939F0B6ED071D10A7C11B64F96C2949994CF7E72507E> |-/n <1C60D8A8C9B7A73DC54E0D6D91C3E91980CDB9ED8628529863FDA8E59433DE6741508E85BB48DEA8D8F35995C79E16FB246C14C08E968E06B7EB28A263EA4D02C2D4AC4FF358B280A76FE85394C58F344B6383A76E82DD831EC580F79F58C4C189013A273849481BB8E811BC56A157758889E377E0218E8E3AA75D3961996A62> |-/o <1C60D8A8C9B7A73D33B50B81AA1C79BFF5C80FF2E6B8582B3CBFC870793B8FCBB77F0EA55A311ED358B8FECB0DAF14839129AE21B31EDE6FF983A864436BE5880861C7AF605C2602EA8055F331AD0A14B46B75CF9DDA28DB> |-/s <1C60D8A8C9B7361F8817B24EDEBB3FEC23877BE06B4CEA431A203FA263480C82808DCDEF37434DC884CF47A95CFCA2EEFAE99363DF76BC32A4A07D0232E5A432177ACA5E94D85D520D9267F1BD03F3AA6F88055ECBD1847E79381F934A9F5A9CC398C1DBE6D1B6CA73CB7F71726529B6F74D3A0A410B63E551B4D3BB0E0FC526EE41AB7B0F71BEF97FB54247D7B1532BDEC7109C003CC2F9DC8E8468D906B41158ABD0EBEE0C4CFFBA60ED5114E2F3A6F07E68F4E4032CE723218BD2A56FB0E9C95C1EC44495195BACD012C08EA23526D3781F86E8D57E9389843E1A161250B27E692D1CC610434E460204D49E2F917C981F12C0F7E47A2C> |-/t <1C60D8A8C9B854D086439EA80B8393FEADC0052C70F648CAC1AE89BB317E735756E59E2E6F0095662D082F1C3CCBBEC180A0941B60E580CB7338163E763332C8A3E3C3B391BD27C4C84B1B4827> |-/u <1C60D8A8C9B7A73D33DFE69D77A124916B7E1247C1A9BF81A03F8ADE493085B97B716714DB79C7E9E35F4FCC1FEA9A2AD34D5DD72DDBDA28BEC83229FFB3DCB856708631257C0CA18B8CBF0BD48443F165C669304820FA055457C072B0393455C28F77520D28B094D4B8D54FD8> |-/minus <1C60D8A8C9B7E7C1AF2D8FDC8194CD280627469400F3168EF4DD6F92805D> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/VSISRY+TimesNewRomanPS /SBVPMX+TimesNewRomanPS findfont ct_VMDictPut/VSISRY+TimesNewRomanPS*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four /five 13{/.notdef}rp /C 9{/.notdef}rp /M 3{/.notdef}rp /Q 4{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 7{/.notdef}rp /e 8{/.notdef}rp /n /o 3{/.notdef}rp /s /t /u 9{/.notdef}rp /minus 128{/.notdef}rp]VSISRY+TimesNewRomanPS nfVSISRY+TimesNewRomanPS*1 [9 0 0 -9 0 0 ]msf384.864 154.856 mo(051015)[41.328 39.1968 4.5 36.8289 4.5 0 ]xshVSISRY+TimesNewRomanPS*1 [9.3789 0 0 -9.3789 0 0 ]msf426.262 167.053 mo(\177Q  [MeV])[5.28964 6.77158 2.34473 2.34473 3.12311 8.33792 4.16422 6.77158 0 ]xshVSISRY+TimesNewRomanPS*1 [9 0 0 -9 0 0 ]msf349.928 127.857 mo(10)[4.5 0 ]xshVSISRY+TimesNewRomanPS*1 [5.3289 0 0 -5.3289 0 0 ]msf358.929 122.527 mo(1)shVSISRY+TimesNewRomanPS*1 [9 0 0 -9 0 0 ]msf349.928 90.7906 mo(10)[4.5 0 ]xshVSISRY+TimesNewRomanPS*1 [5.3289 0 0 -5.3289 0 0 ]msf358.929 85.4606 mo(2)shVSISRY+TimesNewRomanPS*1 [9 0 0 -9 0 0 ]msf349.928 53.6057 mo(10)[4.5 0 ]xshVSISRY+TimesNewRomanPS*1 [5.3289 0 0 -5.3289 0 0 ]msf358.929 48.2766 mo(3)shVSISRY+TimesNewRomanPS*1 [9 0 0 -9 0 0 ]msf349.928 16.4221 mo(10)[4.5 0 ]xshVSISRY+TimesNewRomanPS*1 [5.3289 0 0 -5.3289 0 0 ]msf358.929 11.0921 mo(4)shVSISRY+TimesNewRomanPS*1 [0 -9.2724 -9.2724 0 0 0 ]msf343.297 87.8635 mo(Counts)[-6.18475 -4.63623 -4.63617 -4.63623 -2.5777 0 ]ysh.4 lw
0 lj
369.587 135.672 mo
373.139 107.842 li
376.81 77.408 li
380.482 24.829 li
384.152 8.13196 li
387.705 6.711 li
391.376 12.276 li
395.047 26.723 li
398.718 34.54 li
402.271 37.974 li
405.942 44.605 li
409.613 57.395 li
413.284 69 li
416.836 74.093 li
420.508 75.75 li
424.179 76.579 li
427.85 79.184 li
431.402 83.922 li
435.073 90.552 li
438.744 93.75 li
442.415 95.29 li
445.968 97.895 li
449.639 102.513 li
453.31 106.184 li
456.982 114.948 li
460.534 112.461 li
464.205 112.461 li
467.876 117.908 li
471.548 124.421 li
475.1 121.461 li
478.771 120.276 li
482.442 117.908 li
486.113 128.092 li
489.665 126.197 li
493.337 128.092 li
500.679 128.092 li
504.232 143.842 li
507.903 130.223 li
511.218 135.197 li
507.903 126.078 mo
507.903 126.078 li
507.903 135.79 mo
507.903 135.79 li
504.232 137.803 mo
504.232 137.803 li
500.679 124.183 mo
500.679 124.183 li
500.679 133.183 mo
500.679 133.183 li
497.008 124.303 mo
497.008 124.303 li
497.008 132.947 mo
497.008 132.947 li
493.337 124.303 mo
493.337 124.303 li
493.337 132.947 mo
493.337 132.947 li
489.665 122.526 mo
489.665 122.526 li
489.665 130.816 mo
489.665 130.816 li
486.113 124.303 mo
486.113 124.303 li
486.113 132.947 mo
486.113 132.947 li
482.442 115.066 mo
482.442 115.066 li
482.442 121.461 mo
482.442 121.461 li
478.771 117.197 mo
478.771 117.197 li
478.771 123.948 mo
478.771 123.948 li
475.1 118.262 mo
475.1 118.262 li
475.1 125.487 mo
475.1 125.487 li
471.548 120.869 mo
471.548 120.869 li
471.548 129.039 mo
471.548 129.039 li
467.876 115.066 mo
467.876 115.066 li
467.876 121.461 mo
467.876 121.461 li
464.205 109.974 mo
464.205 109.974 li
464.205 115.421 mo
464.205 115.421 li
460.534 109.974 mo
460.534 109.974 li
460.534 115.421 mo
460.534 115.421 li
456.982 112.343 mo
456.982 112.343 li
456.982 118.144 mo
456.982 118.144 li
453.31 104.172 mo
453.31 104.172 li
453.31 108.553 mo
453.31 108.553 li
449.639 100.737 mo
449.639 100.737 li
449.639 104.526 mo
449.639 104.526 li
445.968 96.237 mo
445.968 96.237 li
445.968 99.552 mo
445.968 99.552 li
442.415 93.869 mo
442.415 93.869 li
442.415 96.829 mo
442.415 96.829 li
438.744 92.329 mo
438.744 92.329 li
438.744 95.29 mo
438.744 95.29 li
435.073 89.25 mo
435.073 89.25 li
435.073 91.855 mo
435.073 91.855 li
431.402 82.973 mo
431.402 82.973 li
431.402 85.105 mo
431.402 85.105 li
427.85 78.355 mo
427.85 78.355 li
427.85 80.131 mo
427.85 80.131 li
424.179 75.75 mo
424.179 75.75 li
424.179 77.526 mo
424.179 77.526 li
420.508 74.921 mo
420.508 74.921 li
420.508 76.579 mo
420.508 76.579 li
416.836 73.381 mo
416.836 73.381 li
416.836 74.921 mo
416.836 74.921 li
413.284 68.29 mo
413.284 68.29 li
413.284 69.711 mo
413.284 69.711 li
409.613 56.921 mo
409.613 56.921 li
409.613 57.869 mo
409.613 57.869 li
405.942 44.369 mo
405.942 44.369 li
405.942 44.961 mo
405.942 44.961 li
402.271 37.737 mo
402.271 37.737 li
402.271 38.211 mo
402.271 38.211 li
398.718 34.303 mo
398.718 34.303 li
398.718 34.777 mo
398.718 34.777 li
395.047 26.487 mo
395.047 26.487 li
395.047 26.843 mo
395.047 26.843 li
391.376 12.158 mo
391.376 12.158 li
391.376 12.395 mo
391.376 12.395 li
387.705 6.59198 mo
387.705 6.59198 li
387.705 6.711 mo
387.705 6.711 li
384.152 8.013 mo
384.152 8.013 li
384.152 8.25 mo
384.152 8.25 li
380.482 24.593 mo
380.482 24.593 li
380.482 24.948 mo
380.482 24.948 li
376.81 76.461 mo
376.81 76.461 li
376.81 78.237 mo
376.81 78.237 li
373.139 105.711 mo
373.139 105.711 li
373.139 110.329 mo
373.139 110.329 li
369.587 130.697 mo
369.587 130.697 li
369.587 142.777 mo
369.587 142.777 li
507.903 135.79 mo
507.903 126.078 li
504.232 144.316 mo
504.232 137.803 li
500.679 133.183 mo
500.679 124.183 li
497.008 132.947 mo
497.008 124.303 li
493.337 132.947 mo
493.337 124.303 li
489.665 130.816 mo
489.665 122.526 li
486.113 132.947 mo
486.113 124.303 li
482.442 121.461 mo
482.442 115.066 li
478.771 123.948 mo
478.771 117.197 li
475.1 125.487 mo
475.1 118.262 li
471.548 129.039 mo
471.548 120.869 li
467.876 121.461 mo
467.876 115.066 li
464.205 115.421 mo
464.205 109.974 li
460.534 115.421 mo
460.534 109.974 li
456.982 118.144 mo
456.982 112.343 li
453.31 108.553 mo
453.31 104.172 li
449.639 104.526 mo
449.639 100.737 li
445.968 99.552 mo
445.968 96.237 li
442.415 96.829 mo
442.415 93.869 li
438.744 95.29 mo
438.744 92.329 li
435.073 91.855 mo
435.073 89.25 li
431.402 85.105 mo
431.402 82.973 li
427.85 80.131 mo
427.85 78.355 li
424.179 77.526 mo
424.179 75.75 li
420.508 76.579 mo
420.508 74.921 li
416.836 74.921 mo
416.836 73.381 li
413.284 69.711 mo
413.284 68.29 li
409.613 57.869 mo
409.613 56.921 li
405.942 44.961 mo
405.942 44.369 li
402.271 38.211 mo
402.271 37.737 li
398.718 34.777 mo
398.718 34.303 li
395.047 26.843 mo
395.047 26.487 li
391.376 12.395 mo
391.376 12.158 li
387.705 6.711 mo
387.705 6.59198 li
384.152 8.25 mo
384.152 8.013 li
380.482 24.948 mo
380.482 24.593 li
376.81 78.237 mo
376.81 76.461 li
373.139 110.329 mo
373.139 105.711 li
369.587 142.777 mo
369.587 130.697 li
.0161135 .957946 .906828 9.15541e-05 cmyk
@
371.067 135.611 mo
371.067 134.762 370.377 134.072 369.527 134.072 cv
368.677 134.072 367.987 134.762 367.987 135.611 cv
367.987 136.462 368.677 137.152 369.527 137.152 cv
370.377 137.152 371.067 136.462 371.067 135.611 cv
0 0 0 0 cmyk
f
.355 lw
371.067 135.611 mo
371.067 134.762 370.377 134.072 369.527 134.072 cv
368.677 134.072 367.987 134.762 367.987 135.611 cv
367.987 136.462 368.677 137.152 369.527 137.152 cv
370.377 137.152 371.067 136.462 371.067 135.611 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
374.619 107.783 mo
374.619 106.933 373.93 106.244 373.08 106.244 cv
372.23 106.244 371.54 106.933 371.54 107.783 cv
371.54 108.633 372.23 109.322 373.08 109.322 cv
373.93 109.322 374.619 108.633 374.619 107.783 cv
0 0 0 0 cmyk
f
374.619 107.783 mo
374.619 106.933 373.93 106.244 373.08 106.244 cv
372.23 106.244 371.54 106.933 371.54 107.783 cv
371.54 108.633 372.23 109.322 373.08 109.322 cv
373.93 109.322 374.619 108.633 374.619 107.783 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
378.29 77.349 mo
378.29 76.499 377.601 75.809 376.751 75.809 cv
375.902 75.809 375.212 76.499 375.212 77.349 cv
375.212 78.198 375.902 78.888 376.751 78.888 cv
377.601 78.888 378.29 78.198 378.29 77.349 cv
0 0 0 0 cmyk
f
378.29 77.349 mo
378.29 76.499 377.601 75.809 376.751 75.809 cv
375.902 75.809 375.212 76.499 375.212 77.349 cv
375.212 78.198 375.902 78.888 376.751 78.888 cv
377.601 78.888 378.29 78.198 378.29 77.349 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
381.962 24.77 mo
381.962 23.92 381.272 23.23 380.422 23.23 cv
379.572 23.23 378.882 23.92 378.882 24.77 cv
378.882 25.62 379.572 26.309 380.422 26.309 cv
381.272 26.309 381.962 25.62 381.962 24.77 cv
0 0 0 0 cmyk
f
381.962 24.77 mo
381.962 23.92 381.272 23.23 380.422 23.23 cv
379.572 23.23 378.882 23.92 378.882 24.77 cv
378.882 25.62 379.572 26.309 380.422 26.309 cv
381.272 26.309 381.962 25.62 381.962 24.77 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
385.632 8.13196 mo
385.632 7.28198 384.943 6.59198 384.093 6.59198 cv
383.243 6.59198 382.554 7.28198 382.554 8.13196 cv
382.554 8.98096 383.243 9.672 384.093 9.672 cv
384.943 9.672 385.632 8.98096 385.632 8.13196 cv
0 0 0 0 cmyk
f
385.632 8.13196 mo
385.632 7.28198 384.943 6.59198 384.093 6.59198 cv
383.243 6.59198 382.554 7.28198 382.554 8.13196 cv
382.554 8.98096 383.243 9.672 384.093 9.672 cv
384.943 9.672 385.632 8.98096 385.632 8.13196 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
389.185 6.711 mo
389.185 5.86096 388.495 5.172 387.646 5.172 cv
386.796 5.172 386.106 5.86096 386.106 6.711 cv
386.106 7.56 386.796 8.25 387.646 8.25 cv
388.495 8.25 389.185 7.56 389.185 6.711 cv
0 0 0 0 cmyk
f
389.185 6.711 mo
389.185 5.86096 388.495 5.172 387.646 5.172 cv
386.796 5.172 386.106 5.86096 386.106 6.711 cv
386.106 7.56 386.796 8.25 387.646 8.25 cv
388.495 8.25 389.185 7.56 389.185 6.711 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
392.857 12.276 mo
392.857 11.426 392.167 10.737 391.317 10.737 cv
390.467 10.737 389.777 11.426 389.777 12.276 cv
389.777 13.126 390.467 13.816 391.317 13.816 cv
392.167 13.816 392.857 13.126 392.857 12.276 cv
0 0 0 0 cmyk
f
392.857 12.276 mo
392.857 11.426 392.167 10.737 391.317 10.737 cv
390.467 10.737 389.777 11.426 389.777 12.276 cv
389.777 13.126 390.467 13.816 391.317 13.816 cv
392.167 13.816 392.857 13.126 392.857 12.276 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
396.527 26.665 mo
396.527 25.815 395.838 25.125 394.987 25.125 cv
394.138 25.125 393.448 25.815 393.448 26.665 cv
393.448 27.514 394.138 28.204 394.987 28.204 cv
395.838 28.204 396.527 27.514 396.527 26.665 cv
0 0 0 0 cmyk
f
396.527 26.665 mo
396.527 25.815 395.838 25.125 394.987 25.125 cv
394.138 25.125 393.448 25.815 393.448 26.665 cv
393.448 27.514 394.138 28.204 394.987 28.204 cv
395.838 28.204 396.527 27.514 396.527 26.665 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
400.198 34.48 mo
400.198 33.631 399.509 32.941 398.659 32.941 cv
397.81 32.941 397.119 33.631 397.119 34.48 cv
397.119 35.33 397.81 36.02 398.659 36.02 cv
399.509 36.02 400.198 35.33 400.198 34.48 cv
0 0 0 0 cmyk
f
400.198 34.48 mo
400.198 33.631 399.509 32.941 398.659 32.941 cv
397.81 32.941 397.119 33.631 397.119 34.48 cv
397.119 35.33 397.81 36.02 398.659 36.02 cv
399.509 36.02 400.198 35.33 400.198 34.48 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
403.751 37.915 mo
403.751 37.065 403.061 36.375 402.212 36.375 cv
401.361 36.375 400.672 37.065 400.672 37.915 cv
400.672 38.764 401.361 39.454 402.212 39.454 cv
403.061 39.454 403.751 38.764 403.751 37.915 cv
0 0 0 0 cmyk
f
403.751 37.915 mo
403.751 37.065 403.061 36.375 402.212 36.375 cv
401.361 36.375 400.672 37.065 400.672 37.915 cv
400.672 38.764 401.361 39.454 402.212 39.454 cv
403.061 39.454 403.751 38.764 403.751 37.915 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
407.422 44.546 mo
407.422 43.697 406.733 43.006 405.882 43.006 cv
405.033 43.006 404.344 43.697 404.344 44.546 cv
404.344 45.396 405.033 46.086 405.882 46.086 cv
406.733 46.086 407.422 45.396 407.422 44.546 cv
0 0 0 0 cmyk
f
407.422 44.546 mo
407.422 43.697 406.733 43.006 405.882 43.006 cv
405.033 43.006 404.344 43.697 404.344 44.546 cv
404.344 45.396 405.033 46.086 405.882 46.086 cv
406.733 46.086 407.422 45.396 407.422 44.546 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
411.093 57.336 mo
411.093 56.486 410.404 55.797 409.554 55.797 cv
408.704 55.797 408.014 56.486 408.014 57.336 cv
408.014 58.185 408.704 58.875 409.554 58.875 cv
410.404 58.875 411.093 58.185 411.093 57.336 cv
0 0 0 0 cmyk
f
411.093 57.336 mo
411.093 56.486 410.404 55.797 409.554 55.797 cv
408.704 55.797 408.014 56.486 408.014 57.336 cv
408.014 58.185 408.704 58.875 409.554 58.875 cv
410.404 58.875 411.093 58.185 411.093 57.336 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
414.764 68.941 mo
414.764 68.091 414.074 67.402 413.225 67.402 cv
412.375 67.402 411.686 68.091 411.686 68.941 cv
411.686 69.791 412.375 70.48 413.225 70.48 cv
414.074 70.48 414.764 69.791 414.764 68.941 cv
0 0 0 0 cmyk
f
414.764 68.941 mo
414.764 68.091 414.074 67.402 413.225 67.402 cv
412.375 67.402 411.686 68.091 411.686 68.941 cv
411.686 69.791 412.375 70.48 413.225 70.48 cv
414.074 70.48 414.764 69.791 414.764 68.941 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
418.317 74.033 mo
418.317 73.183 417.627 72.494 416.777 72.494 cv
415.928 72.494 415.237 73.183 415.237 74.033 cv
415.237 74.883 415.928 75.573 416.777 75.573 cv
417.627 75.573 418.317 74.883 418.317 74.033 cv
0 0 0 0 cmyk
f
418.317 74.033 mo
418.317 73.183 417.627 72.494 416.777 72.494 cv
415.928 72.494 415.237 73.183 415.237 74.033 cv
415.237 74.883 415.928 75.573 416.777 75.573 cv
417.627 75.573 418.317 74.883 418.317 74.033 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
421.988 75.691 mo
421.988 74.842 421.298 74.151 420.448 74.151 cv
419.599 74.151 418.909 74.842 418.909 75.691 cv
418.909 76.541 419.599 77.23 420.448 77.23 cv
421.298 77.23 421.988 76.541 421.988 75.691 cv
0 0 0 0 cmyk
f
421.988 75.691 mo
421.988 74.842 421.298 74.151 420.448 74.151 cv
419.599 74.151 418.909 74.842 418.909 75.691 cv
418.909 76.541 419.599 77.23 420.448 77.23 cv
421.298 77.23 421.988 76.541 421.988 75.691 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
425.659 76.52 mo
425.659 75.67 424.969 74.98 424.119 74.98 cv
423.27 74.98 422.58 75.67 422.58 76.52 cv
422.58 77.37 423.27 78.059 424.119 78.059 cv
424.969 78.059 425.659 77.37 425.659 76.52 cv
0 0 0 0 cmyk
f
425.659 76.52 mo
425.659 75.67 424.969 74.98 424.119 74.98 cv
423.27 74.98 422.58 75.67 422.58 76.52 cv
422.58 77.37 423.27 78.059 424.119 78.059 cv
424.969 78.059 425.659 77.37 425.659 76.52 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
429.33 79.125 mo
429.33 78.275 428.64 77.586 427.79 77.586 cv
426.941 77.586 426.251 78.275 426.251 79.125 cv
426.251 79.975 426.941 80.665 427.79 80.665 cv
428.64 80.665 429.33 79.975 429.33 79.125 cv
0 0 0 0 cmyk
f
429.33 79.125 mo
429.33 78.275 428.64 77.586 427.79 77.586 cv
426.941 77.586 426.251 78.275 426.251 79.125 cv
426.251 79.975 426.941 80.665 427.79 80.665 cv
428.64 80.665 429.33 79.975 429.33 79.125 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
432.882 83.862 mo
432.882 83.012 432.194 82.323 431.343 82.323 cv
430.493 82.323 429.804 83.012 429.804 83.862 cv
429.804 84.712 430.493 85.402 431.343 85.402 cv
432.194 85.402 432.882 84.712 432.882 83.862 cv
0 0 0 0 cmyk
f
432.882 83.862 mo
432.882 83.012 432.194 82.323 431.343 82.323 cv
430.493 82.323 429.804 83.012 429.804 83.862 cv
429.804 84.712 430.493 85.402 431.343 85.402 cv
432.194 85.402 432.882 84.712 432.882 83.862 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
436.554 90.493 mo
436.554 89.644 435.864 88.954 435.014 88.954 cv
434.164 88.954 433.475 89.644 433.475 90.493 cv
433.475 91.343 434.164 92.033 435.014 92.033 cv
435.864 92.033 436.554 91.343 436.554 90.493 cv
0 0 0 0 cmyk
f
436.554 90.493 mo
436.554 89.644 435.864 88.954 435.014 88.954 cv
434.164 88.954 433.475 89.644 433.475 90.493 cv
433.475 91.343 434.164 92.033 435.014 92.033 cv
435.864 92.033 436.554 91.343 436.554 90.493 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
440.225 93.691 mo
440.225 92.841 439.535 92.151 438.685 92.151 cv
437.836 92.151 437.146 92.841 437.146 93.691 cv
437.146 94.541 437.836 95.23 438.685 95.23 cv
439.535 95.23 440.225 94.541 440.225 93.691 cv
0 0 0 0 cmyk
f
440.225 93.691 mo
440.225 92.841 439.535 92.151 438.685 92.151 cv
437.836 92.151 437.146 92.841 437.146 93.691 cv
437.146 94.541 437.836 95.23 438.685 95.23 cv
439.535 95.23 440.225 94.541 440.225 93.691 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
443.896 95.23 mo
443.896 94.381 443.206 93.691 442.357 93.691 cv
441.507 93.691 440.817 94.381 440.817 95.23 cv
440.817 96.08 441.507 96.77 442.357 96.77 cv
443.206 96.77 443.896 96.08 443.896 95.23 cv
0 0 0 0 cmyk
f
443.896 95.23 mo
443.896 94.381 443.206 93.691 442.357 93.691 cv
441.507 93.691 440.817 94.381 440.817 95.23 cv
440.817 96.08 441.507 96.77 442.357 96.77 cv
443.206 96.77 443.896 96.08 443.896 95.23 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
447.448 97.836 mo
447.448 96.986 446.759 96.297 445.909 96.297 cv
445.059 96.297 444.37 96.986 444.37 97.836 cv
444.37 98.685 445.059 99.375 445.909 99.375 cv
446.759 99.375 447.448 98.685 447.448 97.836 cv
0 0 0 0 cmyk
f
447.448 97.836 mo
447.448 96.986 446.759 96.297 445.909 96.297 cv
445.059 96.297 444.37 96.986 444.37 97.836 cv
444.37 98.685 445.059 99.375 445.909 99.375 cv
446.759 99.375 447.448 98.685 447.448 97.836 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
451.119 102.454 mo
451.119 101.604 450.43 100.915 449.58 100.915 cv
448.731 100.915 448.04 101.604 448.04 102.454 cv
448.04 103.304 448.731 103.993 449.58 103.993 cv
450.43 103.993 451.119 103.304 451.119 102.454 cv
0 0 0 0 cmyk
f
451.119 102.454 mo
451.119 101.604 450.43 100.915 449.58 100.915 cv
448.731 100.915 448.04 101.604 448.04 102.454 cv
448.04 103.304 448.731 103.993 449.58 103.993 cv
450.43 103.993 451.119 103.304 451.119 102.454 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
454.79 106.125 mo
454.79 105.275 454.101 104.586 453.251 104.586 cv
452.402 104.586 451.711 105.275 451.711 106.125 cv
451.711 106.975 452.402 107.665 453.251 107.665 cv
454.101 107.665 454.79 106.975 454.79 106.125 cv
0 0 0 0 cmyk
f
454.79 106.125 mo
454.79 105.275 454.101 104.586 453.251 104.586 cv
452.402 104.586 451.711 105.275 451.711 106.125 cv
451.711 106.975 452.402 107.665 453.251 107.665 cv
454.101 107.665 454.79 106.975 454.79 106.125 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
458.462 114.888 mo
458.462 114.038 457.773 113.349 456.922 113.349 cv
456.072 113.349 455.382 114.038 455.382 114.888 cv
455.382 115.738 456.072 116.428 456.922 116.428 cv
457.773 116.428 458.462 115.738 458.462 114.888 cv
0 0 0 0 cmyk
f
458.462 114.888 mo
458.462 114.038 457.773 113.349 456.922 113.349 cv
456.072 113.349 455.382 114.038 455.382 114.888 cv
455.382 115.738 456.072 116.428 456.922 116.428 cv
457.773 116.428 458.462 115.738 458.462 114.888 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
462.015 112.401 mo
462.015 111.552 461.324 110.862 460.475 110.862 cv
459.625 110.862 458.935 111.552 458.935 112.401 cv
458.935 113.252 459.625 113.941 460.475 113.941 cv
461.324 113.941 462.015 113.252 462.015 112.401 cv
0 0 0 0 cmyk
f
462.015 112.401 mo
462.015 111.552 461.324 110.862 460.475 110.862 cv
459.625 110.862 458.935 111.552 458.935 112.401 cv
458.935 113.252 459.625 113.941 460.475 113.941 cv
461.324 113.941 462.015 113.252 462.015 112.401 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
465.685 112.401 mo
465.685 111.552 464.995 110.862 464.146 110.862 cv
463.296 110.862 462.607 111.552 462.607 112.401 cv
462.607 113.252 463.296 113.941 464.146 113.941 cv
464.995 113.941 465.685 113.252 465.685 112.401 cv
0 0 0 0 cmyk
f
465.685 112.401 mo
465.685 111.552 464.995 110.862 464.146 110.862 cv
463.296 110.862 462.607 111.552 462.607 112.401 cv
462.607 113.252 463.296 113.941 464.146 113.941 cv
464.995 113.941 465.685 113.252 465.685 112.401 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
469.357 117.848 mo
469.357 116.998 468.667 116.309 467.817 116.309 cv
466.967 116.309 466.278 116.998 466.278 117.848 cv
466.278 118.698 466.967 119.388 467.817 119.388 cv
468.667 119.388 469.357 118.698 469.357 117.848 cv
0 0 0 0 cmyk
f
469.357 117.848 mo
469.357 116.998 468.667 116.309 467.817 116.309 cv
466.967 116.309 466.278 116.998 466.278 117.848 cv
466.278 118.698 466.967 119.388 467.817 119.388 cv
468.667 119.388 469.357 118.698 469.357 117.848 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
473.028 124.362 mo
473.028 123.512 472.337 122.822 471.488 122.822 cv
470.638 122.822 469.948 123.512 469.948 124.362 cv
469.948 125.211 470.638 125.901 471.488 125.901 cv
472.337 125.901 473.028 125.211 473.028 124.362 cv
0 0 0 0 cmyk
f
473.028 124.362 mo
473.028 123.512 472.337 122.822 471.488 122.822 cv
470.638 122.822 469.948 123.512 469.948 124.362 cv
469.948 125.211 470.638 125.901 471.488 125.901 cv
472.337 125.901 473.028 125.211 473.028 124.362 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
476.58 121.402 mo
476.58 120.552 475.89 119.862 475.041 119.862 cv
474.191 119.862 473.501 120.552 473.501 121.402 cv
473.501 122.251 474.191 122.941 475.041 122.941 cv
475.89 122.941 476.58 122.251 476.58 121.402 cv
0 0 0 0 cmyk
f
476.58 121.402 mo
476.58 120.552 475.89 119.862 475.041 119.862 cv
474.191 119.862 473.501 120.552 473.501 121.402 cv
473.501 122.251 474.191 122.941 475.041 122.941 cv
475.89 122.941 476.58 122.251 476.58 121.402 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
480.251 120.217 mo
480.251 119.367 479.562 118.678 478.712 118.678 cv
477.862 118.678 477.172 119.367 477.172 120.217 cv
477.172 121.067 477.862 121.756 478.712 121.756 cv
479.562 121.756 480.251 121.067 480.251 120.217 cv
0 0 0 0 cmyk
f
480.251 120.217 mo
480.251 119.367 479.562 118.678 478.712 118.678 cv
477.862 118.678 477.172 119.367 477.172 120.217 cv
477.172 121.067 477.862 121.756 478.712 121.756 cv
479.562 121.756 480.251 121.067 480.251 120.217 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
483.922 117.848 mo
483.922 116.998 483.233 116.309 482.382 116.309 cv
481.532 116.309 480.843 116.998 480.843 117.848 cv
480.843 118.698 481.532 119.388 482.382 119.388 cv
483.233 119.388 483.922 118.698 483.922 117.848 cv
0 0 0 0 cmyk
f
483.922 117.848 mo
483.922 116.998 483.233 116.309 482.382 116.309 cv
481.532 116.309 480.843 116.998 480.843 117.848 cv
480.843 118.698 481.532 119.388 482.382 119.388 cv
483.233 119.388 483.922 118.698 483.922 117.848 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
487.593 128.033 mo
487.593 127.183 486.904 126.494 486.054 126.494 cv
485.204 126.494 484.514 127.183 484.514 128.033 cv
484.514 128.883 485.204 129.572 486.054 129.572 cv
486.904 129.572 487.593 128.883 487.593 128.033 cv
0 0 0 0 cmyk
f
487.593 128.033 mo
487.593 127.183 486.904 126.494 486.054 126.494 cv
485.204 126.494 484.514 127.183 484.514 128.033 cv
484.514 128.883 485.204 129.572 486.054 129.572 cv
486.904 129.572 487.593 128.883 487.593 128.033 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
491.146 126.138 mo
491.146 125.289 490.456 124.598 489.607 124.598 cv
488.757 124.598 488.067 125.289 488.067 126.138 cv
488.067 126.988 488.757 127.678 489.607 127.678 cv
490.456 127.678 491.146 126.988 491.146 126.138 cv
0 0 0 0 cmyk
f
491.146 126.138 mo
491.146 125.289 490.456 124.598 489.607 124.598 cv
488.757 124.598 488.067 125.289 488.067 126.138 cv
488.067 126.988 488.757 127.678 489.607 127.678 cv
490.456 127.678 491.146 126.988 491.146 126.138 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
494.817 128.033 mo
494.817 127.183 494.127 126.494 493.278 126.494 cv
492.428 126.494 491.738 127.183 491.738 128.033 cv
491.738 128.883 492.428 129.572 493.278 129.572 cv
494.127 129.572 494.817 128.883 494.817 128.033 cv
0 0 0 0 cmyk
f
494.817 128.033 mo
494.817 127.183 494.127 126.494 493.278 126.494 cv
492.428 126.494 491.738 127.183 491.738 128.033 cv
491.738 128.883 492.428 129.572 493.278 129.572 cv
494.127 129.572 494.817 128.883 494.817 128.033 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
498.488 128.033 mo
498.488 127.183 497.798 126.494 496.948 126.494 cv
496.099 126.494 495.409 127.183 495.409 128.033 cv
495.409 128.883 496.099 129.572 496.948 129.572 cv
497.798 129.572 498.488 128.883 498.488 128.033 cv
0 0 0 0 cmyk
f
498.488 128.033 mo
498.488 127.183 497.798 126.494 496.948 126.494 cv
496.099 126.494 495.409 127.183 495.409 128.033 cv
495.409 128.883 496.099 129.572 496.948 129.572 cv
497.798 129.572 498.488 128.883 498.488 128.033 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
502.159 128.033 mo
502.159 127.183 501.47 126.494 500.62 126.494 cv
499.77 126.494 499.079 127.183 499.079 128.033 cv
499.079 128.883 499.77 129.572 500.62 129.572 cv
501.47 129.572 502.159 128.883 502.159 128.033 cv
0 0 0 0 cmyk
f
502.159 128.033 mo
502.159 127.183 501.47 126.494 500.62 126.494 cv
499.77 126.494 499.079 127.183 499.079 128.033 cv
499.079 128.883 499.77 129.572 500.62 129.572 cv
501.47 129.572 502.159 128.883 502.159 128.033 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
505.712 143.783 mo
505.712 142.933 505.023 142.244 504.172 142.244 cv
503.321 142.244 502.633 142.933 502.633 143.783 cv
502.633 144.633 503.321 145.322 504.172 145.322 cv
505.023 145.322 505.712 144.633 505.712 143.783 cv
0 0 0 0 cmyk
f
505.712 143.783 mo
505.712 142.933 505.023 142.244 504.172 142.244 cv
503.321 142.244 502.633 142.933 502.633 143.783 cv
502.633 144.633 503.321 145.322 504.172 145.322 cv
505.023 145.322 505.712 144.633 505.712 143.783 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
509.383 130.165 mo
509.383 129.314 508.693 128.625 507.843 128.625 cv
506.993 128.625 506.304 129.314 506.304 130.165 cv
506.304 131.014 506.993 131.704 507.843 131.704 cv
508.693 131.704 509.383 131.014 509.383 130.165 cv
0 0 0 0 cmyk
f
509.383 130.165 mo
509.383 129.314 508.693 128.625 507.843 128.625 cv
506.993 128.625 506.304 129.314 506.304 130.165 cv
506.304 131.014 506.993 131.704 507.843 131.704 cv
508.693 131.704 509.383 131.014 509.383 130.165 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
.4 lw
370.415 120.75 mo
373.968 87.474 li
377.639 52.184 li
381.31 19.737 li
384.982 8.013 li
388.534 6.59198 li
392.205 10.974 li
395.876 21.513 li
399.547 26.013 li
403.1 29.921 li
406.771 34.895 li
410.442 42.711 li
414.113 48.631 li
417.666 53.25 li
421.337 55.263 li
425.008 57.513 li
428.679 60.474 li
432.232 60.829 li
435.903 61.776 li
439.573 64.026 li
443.244 66.395 li
446.797 69.948 li
450.468 70.184 li
454.139 72.316 li
457.81 75.04 li
461.363 75.75 li
465.033 76.461 li
468.705 79.54 li
472.376 79.658 li
475.929 81.316 li
479.6 83.093 li
483.271 83.684 li
486.942 85.934 li
490.494 83.684 li
494.165 86.645 li
497.837 85.343 li
501.507 91.382 li
505.061 87.119 li
508.732 91.382 li
511.218 92.448 li
508.732 89.724 mo
508.732 89.724 li
508.732 93.277 mo
508.732 93.277 li
505.061 85.698 mo
505.061 85.698 li
505.061 88.777 mo
505.061 88.777 li
501.507 89.724 mo
501.507 89.724 li
501.507 93.277 mo
501.507 93.277 li
497.837 83.922 mo
497.837 83.922 li
497.837 87 mo
497.837 87 li
494.165 85.224 mo
494.165 85.224 li
494.165 88.302 mo
494.165 88.302 li
490.494 82.263 mo
490.494 82.263 li
490.494 85.105 mo
490.494 85.105 li
486.942 84.513 mo
486.942 84.513 li
486.942 87.592 mo
486.942 87.592 li
483.271 82.263 mo
483.271 82.263 li
483.271 85.105 mo
483.271 85.105 li
479.6 81.672 mo
479.6 81.672 li
479.6 84.513 mo
479.6 84.513 li
475.929 80.131 mo
475.929 80.131 li
475.929 82.737 mo
475.929 82.737 li
472.376 78.474 mo
472.376 78.474 li
472.376 80.961 mo
472.376 80.961 li
468.705 78.355 mo
468.705 78.355 li
468.705 80.843 mo
468.705 80.843 li
465.033 75.395 mo
465.033 75.395 li
465.033 77.645 mo
465.033 77.645 li
461.363 74.684 mo
461.363 74.684 li
461.363 76.934 mo
461.363 76.934 li
457.81 73.974 mo
457.81 73.974 li
457.81 76.224 mo
457.81 76.224 li
454.139 71.368 mo
454.139 71.368 li
454.139 73.381 mo
454.139 73.381 li
450.468 69.237 mo
450.468 69.237 li
450.468 71.131 mo
450.468 71.131 li
446.797 69 mo
446.797 69 li
446.797 70.895 mo
446.797 70.895 li
443.244 65.566 mo
443.244 65.566 li
443.244 67.224 mo
443.244 67.224 li
439.573 63.316 mo
439.573 63.316 li
439.573 64.855 mo
439.573 64.855 li
435.903 61.066 mo
435.903 61.066 li
435.903 62.487 mo
435.903 62.487 li
432.232 60.119 mo
432.232 60.119 li
432.232 61.54 mo
432.232 61.54 li
428.679 59.763 mo
428.679 59.763 li
428.679 61.184 mo
428.679 61.184 li
425.008 56.921 mo
425.008 56.921 li
425.008 58.105 mo
425.008 58.105 li
421.337 54.671 mo
421.337 54.671 li
421.337 55.855 mo
421.337 55.855 li
417.666 52.658 mo
417.666 52.658 li
417.666 53.724 mo
417.666 53.724 li
414.113 48.158 mo
414.113 48.158 li
414.113 49.105 mo
414.113 49.105 li
410.442 42.355 mo
410.442 42.355 li
410.442 43.066 mo
410.442 43.066 li
406.771 34.658 mo
406.771 34.658 li
406.771 35.25 mo
406.771 35.25 li
403.1 29.684 mo
403.1 29.684 li
403.1 30.158 mo
403.1 30.158 li
399.547 25.776 mo
399.547 25.776 li
399.547 26.25 mo
399.547 26.25 li
395.876 21.277 mo
395.876 21.277 li
395.876 21.75 mo
395.876 21.75 li
392.205 10.855 mo
392.205 10.855 li
392.205 11.092 mo
392.205 11.092 li
388.534 6.474 mo
388.534 6.474 li
388.534 6.711 mo
388.534 6.711 li
384.982 7.89496 mo
384.982 7.89496 li
384.982 8.25 mo
384.982 8.25 li
381.31 19.619 mo
381.31 19.619 li
381.31 19.974 mo
381.31 19.974 li
377.639 51.711 mo
377.639 51.711 li
377.639 52.777 mo
377.639 52.777 li
373.968 85.934 mo
373.968 85.934 li
373.968 89.132 mo
373.968 89.132 li
370.415 116.723 mo
370.415 116.723 li
370.415 125.961 mo
370.415 125.961 li
508.732 93.277 mo
508.732 89.724 li
505.061 88.777 mo
505.061 85.698 li
501.507 93.277 mo
501.507 89.724 li
497.837 87 mo
497.837 83.922 li
494.165 88.302 mo
494.165 85.224 li
490.494 85.105 mo
490.494 82.263 li
486.942 87.592 mo
486.942 84.513 li
483.271 85.105 mo
483.271 82.263 li
479.6 84.513 mo
479.6 81.672 li
475.929 82.737 mo
475.929 80.131 li
472.376 80.961 mo
472.376 78.474 li
468.705 80.843 mo
468.705 78.355 li
465.033 77.645 mo
465.033 75.395 li
461.363 76.934 mo
461.363 74.684 li
457.81 76.224 mo
457.81 73.974 li
454.139 73.381 mo
454.139 71.368 li
450.468 71.131 mo
450.468 69.237 li
446.797 70.895 mo
446.797 69 li
443.244 67.224 mo
443.244 65.566 li
439.573 64.855 mo
439.573 63.316 li
435.903 62.487 mo
435.903 61.066 li
432.232 61.54 mo
432.232 60.119 li
428.679 61.184 mo
428.679 59.763 li
425.008 58.105 mo
425.008 56.921 li
421.337 55.855 mo
421.337 54.671 li
417.666 53.724 mo
417.666 52.658 li
414.113 49.105 mo
414.113 48.158 li
410.442 43.066 mo
410.442 42.355 li
406.771 35.25 mo
406.771 34.658 li
403.1 30.158 mo
403.1 29.684 li
399.547 26.25 mo
399.547 25.776 li
395.876 21.75 mo
395.876 21.277 li
392.205 11.092 mo
392.205 10.855 li
388.534 6.711 mo
388.534 6.474 li
384.982 8.25 mo
384.982 7.89496 li
381.31 19.974 mo
381.31 19.619 li
377.639 52.777 mo
377.639 51.711 li
373.968 89.132 mo
373.968 85.934 li
370.415 125.961 mo
370.415 116.723 li
.95346 .916228 .0104982 .0011902 cmyk
@
372.014 120.69 mo
372.014 119.776 371.272 119.033 370.356 119.033 cv
369.441 119.033 368.698 119.776 368.698 120.69 cv
368.698 121.606 369.441 122.349 370.356 122.349 cv
371.272 122.349 372.014 121.606 372.014 120.69 cv
f
372.014 120.69 mo
372.014 119.776 371.272 119.033 370.356 119.033 cv
369.441 119.033 368.698 119.776 368.698 120.69 cv
368.698 121.606 369.441 122.349 370.356 122.349 cv
371.272 122.349 372.014 121.606 372.014 120.69 cv
@
375.567 87.415 mo
375.567 86.5 374.824 85.757 373.909 85.757 cv
372.994 85.757 372.251 86.5 372.251 87.415 cv
372.251 88.33 372.994 89.072 373.909 89.072 cv
374.824 89.072 375.567 88.33 375.567 87.415 cv
f
375.567 87.415 mo
375.567 86.5 374.824 85.757 373.909 85.757 cv
372.994 85.757 372.251 86.5 372.251 87.415 cv
372.251 88.33 372.994 89.072 373.909 89.072 cv
374.824 89.072 375.567 88.33 375.567 87.415 cv
@
379.237 52.125 mo
379.237 51.21 378.495 50.468 377.58 50.468 cv
376.665 50.468 375.922 51.21 375.922 52.125 cv
375.922 53.04 376.665 53.783 377.58 53.783 cv
378.495 53.783 379.237 53.04 379.237 52.125 cv
f
379.237 52.125 mo
379.237 51.21 378.495 50.468 377.58 50.468 cv
376.665 50.468 375.922 51.21 375.922 52.125 cv
375.922 53.04 376.665 53.783 377.58 53.783 cv
378.495 53.783 379.237 53.04 379.237 52.125 cv
@
382.909 19.737 mo
382.909 18.822 382.166 18.079 381.251 18.079 cv
380.336 18.079 379.593 18.822 379.593 19.737 cv
379.593 20.652 380.336 21.395 381.251 21.395 cv
382.166 21.395 382.909 20.652 382.909 19.737 cv
f
382.909 19.737 mo
382.909 18.822 382.166 18.079 381.251 18.079 cv
380.336 18.079 379.593 18.822 379.593 19.737 cv
379.593 20.652 380.336 21.395 381.251 21.395 cv
382.166 21.395 382.909 20.652 382.909 19.737 cv
@
386.58 8.013 mo
386.58 7.09796 385.837 6.35498 384.922 6.35498 cv
384.007 6.35498 383.264 7.09796 383.264 8.013 cv
383.264 8.92798 384.007 9.672 384.922 9.672 cv
385.837 9.672 386.58 8.92798 386.58 8.013 cv
f
386.58 8.013 mo
386.58 7.09796 385.837 6.35498 384.922 6.35498 cv
384.007 6.35498 383.264 7.09796 383.264 8.013 cv
383.264 8.92798 384.007 9.672 384.922 9.672 cv
385.837 9.672 386.58 8.92798 386.58 8.013 cv
@
390.132 6.59198 mo
390.132 5.677 389.39 4.93396 388.475 4.93396 cv
387.559 4.93396 386.817 5.677 386.817 6.59198 cv
386.817 7.508 387.559 8.25 388.475 8.25 cv
389.39 8.25 390.132 7.508 390.132 6.59198 cv
f
390.132 6.59198 mo
390.132 5.677 389.39 4.93396 388.475 4.93396 cv
387.559 4.93396 386.817 5.677 386.817 6.59198 cv
386.817 7.508 387.559 8.25 388.475 8.25 cv
389.39 8.25 390.132 7.508 390.132 6.59198 cv
@
393.804 10.974 mo
393.804 10.059 393.061 9.31598 392.146 9.31598 cv
391.231 9.31598 390.488 10.059 390.488 10.974 cv
390.488 11.889 391.231 12.632 392.146 12.632 cv
393.061 12.632 393.804 11.889 393.804 10.974 cv
f
393.804 10.974 mo
393.804 10.059 393.061 9.31598 392.146 9.31598 cv
391.231 9.31598 390.488 10.059 390.488 10.974 cv
390.488 11.889 391.231 12.632 392.146 12.632 cv
393.061 12.632 393.804 11.889 393.804 10.974 cv
@
397.475 21.513 mo
397.475 20.598 396.732 19.855 395.817 19.855 cv
394.902 19.855 394.159 20.598 394.159 21.513 cv
394.159 22.428 394.902 23.171 395.817 23.171 cv
396.732 23.171 397.475 22.428 397.475 21.513 cv
f
397.475 21.513 mo
397.475 20.598 396.732 19.855 395.817 19.855 cv
394.902 19.855 394.159 20.598 394.159 21.513 cv
394.159 22.428 394.902 23.171 395.817 23.171 cv
396.732 23.171 397.475 22.428 397.475 21.513 cv
@
401.146 25.954 mo
401.146 25.039 400.404 24.296 399.487 24.296 cv
398.572 24.296 397.83 25.039 397.83 25.954 cv
397.83 26.869 398.572 27.612 399.487 27.612 cv
400.404 27.612 401.146 26.869 401.146 25.954 cv
f
401.146 25.954 mo
401.146 25.039 400.404 24.296 399.487 24.296 cv
398.572 24.296 397.83 25.039 397.83 25.954 cv
397.83 26.869 398.572 27.612 399.487 27.612 cv
400.404 27.612 401.146 26.869 401.146 25.954 cv
@
404.698 29.862 mo
404.698 28.947 403.955 28.204 403.04 28.204 cv
402.125 28.204 401.383 28.947 401.383 29.862 cv
401.383 30.777 402.125 31.52 403.04 31.52 cv
403.955 31.52 404.698 30.777 404.698 29.862 cv
f
404.698 29.862 mo
404.698 28.947 403.955 28.204 403.04 28.204 cv
402.125 28.204 401.383 28.947 401.383 29.862 cv
401.383 30.777 402.125 31.52 403.04 31.52 cv
403.955 31.52 404.698 30.777 404.698 29.862 cv
@
408.369 34.836 mo
408.369 33.921 407.627 33.177 406.712 33.177 cv
405.797 33.177 405.054 33.921 405.054 34.836 cv
405.054 35.751 405.797 36.494 406.712 36.494 cv
407.627 36.494 408.369 35.751 408.369 34.836 cv
f
408.369 34.836 mo
408.369 33.921 407.627 33.177 406.712 33.177 cv
405.797 33.177 405.054 33.921 405.054 34.836 cv
405.054 35.751 405.797 36.494 406.712 36.494 cv
407.627 36.494 408.369 35.751 408.369 34.836 cv
@
412.04 42.652 mo
412.04 41.736 411.298 40.994 410.382 40.994 cv
409.467 40.994 408.725 41.736 408.725 42.652 cv
408.725 43.567 409.467 44.309 410.382 44.309 cv
411.298 44.309 412.04 43.567 412.04 42.652 cv
f
412.04 42.652 mo
412.04 41.736 411.298 40.994 410.382 40.994 cv
409.467 40.994 408.725 41.736 408.725 42.652 cv
408.725 43.567 409.467 44.309 410.382 44.309 cv
411.298 44.309 412.04 43.567 412.04 42.652 cv
@
415.711 48.573 mo
415.711 47.657 414.969 46.915 414.054 46.915 cv
413.139 46.915 412.396 47.657 412.396 48.573 cv
412.396 49.488 413.139 50.23 414.054 50.23 cv
414.969 50.23 415.711 49.488 415.711 48.573 cv
f
415.711 48.573 mo
415.711 47.657 414.969 46.915 414.054 46.915 cv
413.139 46.915 412.396 47.657 412.396 48.573 cv
412.396 49.488 413.139 50.23 414.054 50.23 cv
414.969 50.23 415.711 49.488 415.711 48.573 cv
@
419.264 53.191 mo
419.264 52.276 418.522 51.533 417.607 51.533 cv
416.691 51.533 415.948 52.276 415.948 53.191 cv
415.948 54.106 416.691 54.848 417.607 54.848 cv
418.522 54.848 419.264 54.106 419.264 53.191 cv
f
419.264 53.191 mo
419.264 52.276 418.522 51.533 417.607 51.533 cv
416.691 51.533 415.948 52.276 415.948 53.191 cv
415.948 54.106 416.691 54.848 417.607 54.848 cv
418.522 54.848 419.264 54.106 419.264 53.191 cv
@
422.935 55.204 mo
422.935 54.289 422.193 53.547 421.277 53.547 cv
420.362 53.547 419.619 54.289 419.619 55.204 cv
419.619 56.119 420.362 56.862 421.277 56.862 cv
422.193 56.862 422.935 56.119 422.935 55.204 cv
f
422.935 55.204 mo
422.935 54.289 422.193 53.547 421.277 53.547 cv
420.362 53.547 419.619 54.289 419.619 55.204 cv
419.619 56.119 420.362 56.862 421.277 56.862 cv
422.193 56.862 422.935 56.119 422.935 55.204 cv
@
426.607 57.454 mo
426.607 56.539 425.863 55.797 424.948 55.797 cv
424.033 55.797 423.29 56.539 423.29 57.454 cv
423.29 58.369 424.033 59.112 424.948 59.112 cv
425.863 59.112 426.607 58.369 426.607 57.454 cv
f
426.607 57.454 mo
426.607 56.539 425.863 55.797 424.948 55.797 cv
424.033 55.797 423.29 56.539 423.29 57.454 cv
423.29 58.369 424.033 59.112 424.948 59.112 cv
425.863 59.112 426.607 58.369 426.607 57.454 cv
@
430.277 60.415 mo
430.277 59.499 429.534 58.756 428.62 58.756 cv
427.704 58.756 426.961 59.499 426.961 60.415 cv
426.961 61.33 427.704 62.073 428.62 62.073 cv
429.534 62.073 430.277 61.33 430.277 60.415 cv
f
430.277 60.415 mo
430.277 59.499 429.534 58.756 428.62 58.756 cv
427.704 58.756 426.961 59.499 426.961 60.415 cv
426.961 61.33 427.704 62.073 428.62 62.073 cv
429.534 62.073 430.277 61.33 430.277 60.415 cv
@
433.83 60.77 mo
433.83 59.855 433.088 59.112 432.172 59.112 cv
431.257 59.112 430.514 59.855 430.514 60.77 cv
430.514 61.685 431.257 62.428 432.172 62.428 cv
433.088 62.428 433.83 61.685 433.83 60.77 cv
f
433.83 60.77 mo
433.83 59.855 433.088 59.112 432.172 59.112 cv
431.257 59.112 430.514 59.855 430.514 60.77 cv
430.514 61.685 431.257 62.428 432.172 62.428 cv
433.088 62.428 433.83 61.685 433.83 60.77 cv
@
437.501 61.718 mo
437.501 60.802 436.758 60.059 435.843 60.059 cv
434.928 60.059 434.185 60.802 434.185 61.718 cv
434.185 62.633 434.928 63.375 435.843 63.375 cv
436.758 63.375 437.501 62.633 437.501 61.718 cv
f
437.501 61.718 mo
437.501 60.802 436.758 60.059 435.843 60.059 cv
434.928 60.059 434.185 60.802 434.185 61.718 cv
434.185 62.633 434.928 63.375 435.843 63.375 cv
436.758 63.375 437.501 62.633 437.501 61.718 cv
@
441.172 63.967 mo
441.172 63.052 440.429 62.309 439.515 62.309 cv
438.599 62.309 437.856 63.052 437.856 63.967 cv
437.856 64.883 438.599 65.625 439.515 65.625 cv
440.429 65.625 441.172 64.883 441.172 63.967 cv
f
441.172 63.967 mo
441.172 63.052 440.429 62.309 439.515 62.309 cv
438.599 62.309 437.856 63.052 437.856 63.967 cv
437.856 64.883 438.599 65.625 439.515 65.625 cv
440.429 65.625 441.172 64.883 441.172 63.967 cv
@
444.843 66.336 mo
444.843 65.421 444.1 64.678 443.185 64.678 cv
442.27 64.678 441.528 65.421 441.528 66.336 cv
441.528 67.251 442.27 67.994 443.185 67.994 cv
444.1 67.994 444.843 67.251 444.843 66.336 cv
f
444.843 66.336 mo
444.843 65.421 444.1 64.678 443.185 64.678 cv
442.27 64.678 441.528 65.421 441.528 66.336 cv
441.528 67.251 442.27 67.994 443.185 67.994 cv
444.1 67.994 444.843 67.251 444.843 66.336 cv
@
448.396 69.888 mo
448.396 68.973 447.653 68.23 446.738 68.23 cv
445.823 68.23 445.08 68.973 445.08 69.888 cv
445.08 70.803 445.823 71.547 446.738 71.547 cv
447.653 71.547 448.396 70.803 448.396 69.888 cv
f
448.396 69.888 mo
448.396 68.973 447.653 68.23 446.738 68.23 cv
445.823 68.23 445.08 68.973 445.08 69.888 cv
445.08 70.803 445.823 71.547 446.738 71.547 cv
447.653 71.547 448.396 70.803 448.396 69.888 cv
@
452.067 70.125 mo
452.067 69.21 451.324 68.468 450.409 68.468 cv
449.494 68.468 448.751 69.21 448.751 70.125 cv
448.751 71.04 449.494 71.783 450.409 71.783 cv
451.324 71.783 452.067 71.04 452.067 70.125 cv
f
452.067 70.125 mo
452.067 69.21 451.324 68.468 450.409 68.468 cv
449.494 68.468 448.751 69.21 448.751 70.125 cv
448.751 71.04 449.494 71.783 450.409 71.783 cv
451.324 71.783 452.067 71.04 452.067 70.125 cv
@
455.738 72.256 mo
455.738 71.342 454.995 70.599 454.08 70.599 cv
453.164 70.599 452.422 71.342 452.422 72.256 cv
452.422 73.172 453.164 73.915 454.08 73.915 cv
454.995 73.915 455.738 73.172 455.738 72.256 cv
f
455.738 72.256 mo
455.738 71.342 454.995 70.599 454.08 70.599 cv
453.164 70.599 452.422 71.342 452.422 72.256 cv
452.422 73.172 453.164 73.915 454.08 73.915 cv
454.995 73.915 455.738 73.172 455.738 72.256 cv
@
459.409 74.98 mo
459.409 74.065 458.666 73.323 457.751 73.323 cv
456.836 73.323 456.093 74.065 456.093 74.98 cv
456.093 75.895 456.836 76.638 457.751 76.638 cv
458.666 76.638 459.409 75.895 459.409 74.98 cv
f
459.409 74.98 mo
459.409 74.065 458.666 73.323 457.751 73.323 cv
456.836 73.323 456.093 74.065 456.093 74.98 cv
456.093 75.895 456.836 76.638 457.751 76.638 cv
458.666 76.638 459.409 75.895 459.409 74.98 cv
@
462.962 75.691 mo
462.962 74.776 462.219 74.033 461.304 74.033 cv
460.389 74.033 459.646 74.776 459.646 75.691 cv
459.646 76.606 460.389 77.349 461.304 77.349 cv
462.219 77.349 462.962 76.606 462.962 75.691 cv
f
462.962 75.691 mo
462.962 74.776 462.219 74.033 461.304 74.033 cv
460.389 74.033 459.646 74.776 459.646 75.691 cv
459.646 76.606 460.389 77.349 461.304 77.349 cv
462.219 77.349 462.962 76.606 462.962 75.691 cv
@
466.632 76.401 mo
466.632 75.486 465.89 74.744 464.975 74.744 cv
464.06 74.744 463.317 75.486 463.317 76.401 cv
463.317 77.316 464.06 78.059 464.975 78.059 cv
465.89 78.059 466.632 77.316 466.632 76.401 cv
f
466.632 76.401 mo
466.632 75.486 465.89 74.744 464.975 74.744 cv
464.06 74.744 463.317 75.486 463.317 76.401 cv
463.317 77.316 464.06 78.059 464.975 78.059 cv
465.89 78.059 466.632 77.316 466.632 76.401 cv
@
470.304 79.48 mo
470.304 78.565 469.562 77.823 468.646 77.823 cv
467.731 77.823 466.988 78.565 466.988 79.48 cv
466.988 80.395 467.731 81.138 468.646 81.138 cv
469.562 81.138 470.304 80.395 470.304 79.48 cv
f
470.304 79.48 mo
470.304 78.565 469.562 77.823 468.646 77.823 cv
467.731 77.823 466.988 78.565 466.988 79.48 cv
466.988 80.395 467.731 81.138 468.646 81.138 cv
469.562 81.138 470.304 80.395 470.304 79.48 cv
@
473.975 79.599 mo
473.975 78.684 473.232 77.941 472.317 77.941 cv
471.402 77.941 470.659 78.684 470.659 79.599 cv
470.659 80.514 471.402 81.256 472.317 81.256 cv
473.232 81.256 473.975 80.514 473.975 79.599 cv
f
473.975 79.599 mo
473.975 78.684 473.232 77.941 472.317 77.941 cv
471.402 77.941 470.659 78.684 470.659 79.599 cv
470.659 80.514 471.402 81.256 472.317 81.256 cv
473.232 81.256 473.975 80.514 473.975 79.599 cv
@
477.528 81.256 mo
477.528 80.342 476.784 79.599 475.869 79.599 cv
474.954 79.599 474.212 80.342 474.212 81.256 cv
474.212 82.172 474.954 82.915 475.869 82.915 cv
476.784 82.915 477.528 82.172 477.528 81.256 cv
f
477.528 81.256 mo
477.528 80.342 476.784 79.599 475.869 79.599 cv
474.954 79.599 474.212 80.342 474.212 81.256 cv
474.212 82.172 474.954 82.915 475.869 82.915 cv
476.784 82.915 477.528 82.172 477.528 81.256 cv
@
481.198 83.033 mo
481.198 82.118 480.456 81.375 479.54 81.375 cv
478.625 81.375 477.883 82.118 477.883 83.033 cv
477.883 83.948 478.625 84.691 479.54 84.691 cv
480.456 84.691 481.198 83.948 481.198 83.033 cv
f
481.198 83.033 mo
481.198 82.118 480.456 81.375 479.54 81.375 cv
478.625 81.375 477.883 82.118 477.883 83.033 cv
477.883 83.948 478.625 84.691 479.54 84.691 cv
480.456 84.691 481.198 83.948 481.198 83.033 cv
@
484.87 83.625 mo
484.87 82.71 484.127 81.968 483.211 81.968 cv
482.296 81.968 481.554 82.71 481.554 83.625 cv
481.554 84.54 482.296 85.283 483.211 85.283 cv
484.127 85.283 484.87 84.54 484.87 83.625 cv
f
484.87 83.625 mo
484.87 82.71 484.127 81.968 483.211 81.968 cv
482.296 81.968 481.554 82.71 481.554 83.625 cv
481.554 84.54 482.296 85.283 483.211 85.283 cv
484.127 85.283 484.87 84.54 484.87 83.625 cv
@
488.54 85.875 mo
488.54 84.96 487.798 84.218 486.882 84.218 cv
485.968 84.218 485.225 84.96 485.225 85.875 cv
485.225 86.79 485.968 87.533 486.882 87.533 cv
487.798 87.533 488.54 86.79 488.54 85.875 cv
f
488.54 85.875 mo
488.54 84.96 487.798 84.218 486.882 84.218 cv
485.968 84.218 485.225 84.96 485.225 85.875 cv
485.225 86.79 485.968 87.533 486.882 87.533 cv
487.798 87.533 488.54 86.79 488.54 85.875 cv
@
492.093 83.625 mo
492.093 82.71 491.351 81.968 490.435 81.968 cv
489.521 81.968 488.778 82.71 488.778 83.625 cv
488.778 84.54 489.521 85.283 490.435 85.283 cv
491.351 85.283 492.093 84.54 492.093 83.625 cv
f
492.093 83.625 mo
492.093 82.71 491.351 81.968 490.435 81.968 cv
489.521 81.968 488.778 82.71 488.778 83.625 cv
488.778 84.54 489.521 85.283 490.435 85.283 cv
491.351 85.283 492.093 84.54 492.093 83.625 cv
@
495.764 86.586 mo
495.764 85.671 495.022 84.928 494.107 84.928 cv
493.192 84.928 492.448 85.671 492.448 86.586 cv
492.448 87.501 493.192 88.244 494.107 88.244 cv
495.022 88.244 495.764 87.501 495.764 86.586 cv
f
495.764 86.586 mo
495.764 85.671 495.022 84.928 494.107 84.928 cv
493.192 84.928 492.448 85.671 492.448 86.586 cv
492.448 87.501 493.192 88.244 494.107 88.244 cv
495.022 88.244 495.764 87.501 495.764 86.586 cv
@
499.435 85.283 mo
499.435 84.368 498.693 83.625 497.778 83.625 cv
496.863 83.625 496.119 84.368 496.119 85.283 cv
496.119 86.198 496.863 86.941 497.778 86.941 cv
498.693 86.941 499.435 86.198 499.435 85.283 cv
f
499.435 85.283 mo
499.435 84.368 498.693 83.625 497.778 83.625 cv
496.863 83.625 496.119 84.368 496.119 85.283 cv
496.119 86.198 496.863 86.941 497.778 86.941 cv
498.693 86.941 499.435 86.198 499.435 85.283 cv
@
503.107 91.323 mo
503.107 90.407 502.363 89.665 501.448 89.665 cv
500.532 89.665 499.79 90.407 499.79 91.323 cv
499.79 92.238 500.532 92.98 501.448 92.98 cv
502.363 92.98 503.107 92.238 503.107 91.323 cv
f
503.107 91.323 mo
503.107 90.407 502.363 89.665 501.448 89.665 cv
500.532 89.665 499.79 90.407 499.79 91.323 cv
499.79 92.238 500.532 92.98 501.448 92.98 cv
502.363 92.98 503.107 92.238 503.107 91.323 cv
@
506.659 87.059 mo
506.659 86.144 505.916 85.402 505.001 85.402 cv
504.086 85.402 503.343 86.144 503.343 87.059 cv
503.343 87.974 504.086 88.718 505.001 88.718 cv
505.916 88.718 506.659 87.974 506.659 87.059 cv
f
506.659 87.059 mo
506.659 86.144 505.916 85.402 505.001 85.402 cv
504.086 85.402 503.343 86.144 503.343 87.059 cv
503.343 87.974 504.086 88.718 505.001 88.718 cv
505.916 88.718 506.659 87.974 506.659 87.059 cv
@
510.33 91.323 mo
510.33 90.407 509.587 89.665 508.672 89.665 cv
507.757 89.665 507.014 90.407 507.014 91.323 cv
507.014 92.238 507.757 92.98 508.672 92.98 cv
509.587 92.98 510.33 92.238 510.33 91.323 cv
f
510.33 91.323 mo
510.33 90.407 509.587 89.665 508.672 89.665 cv
507.757 89.665 507.014 90.407 507.014 91.323 cv
507.014 92.238 507.757 92.98 508.672 92.98 cv
509.587 92.98 510.33 92.238 510.33 91.323 cv
@
.592 lw
370.415 122.763 mo
373.968 77.408 li
377.639 43.066 li
381.31 19.737 li
384.982 7.65796 li
388.534 6.59198 li
392.205 15.948 li
395.876 29.921 li
399.547 33.593 li
403.1 36.671 li
406.771 49.461 li
410.442 72.671 li
414.113 91.737 li
417.666 80.605 li
421.337 73.737 li
425.008 77.763 li
428.679 92.922 li
432.232 119.21 li
434.718 144.316 li
.512627 .963104 .344335 .174105 cmyk
@
[2.3684 2.3684 ] 0 dsh
370.415 123.236 mo
373.968 77.763 li
377.639 43.422 li
381.31 20.211 li
384.982 8.13196 li
388.534 7.06598 li
392.205 16.658 li
395.876 31.698 li
399.547 37.263 li
403.1 40.343 li
406.771 51.474 li
410.442 68.526 li
414.113 79.658 li
417.666 75.158 li
421.337 70.184 li
425.008 73.381 li
428.679 85.934 li
432.232 106.066 li
435.903 119.922 li
439.573 116.723 li
443.244 117.434 li
446.797 127.026 li
450.468 143.013 li
454.139 139.461 li
457.81 120.75 li
461.363 111.276 li
465.033 112.697 li
468.705 125.368 li
471.665 144.316 li
.0161135 .957946 .906828 9.15541e-05 cmyk
@
gsave
515.717 2.03296 mo
335.592 2.03296 li
335.592 169.079 li
515.717 169.079 li
cp
clp
[4.7368 2.3684 1.421 2.3684 ] 0 dsh
370.415 123.236 mo
373.968 77.763 li
377.639 43.422 li
381.31 20.211 li
384.982 8.013 li
388.534 6.82898 li
392.205 15.829 li
395.876 29.448 li
399.547 34.421 li
403.1 37.974 li
406.771 49.343 li
410.442 68.408 li
414.113 82.855 li
417.666 76.579 li
421.337 72.198 li
425.008 77.645 li
428.679 93.277 li
432.232 117.079 li
435.903 134.843 li
439.573 132 li
443.244 132.711 li
446.797 143.487 li
447.034 144.316 li
.95346 .916228 .0104982 .0011902 cmyk
@
.355 lw
[] 0 dsh
366.389 144.316 mo
366.389 2.211 li
511.218 2.211 li
511.218 144.316 li
366.389 144.316 li
.694423 .677272 .637385 .738643 cmyk
@
grestore
.4 lw
[] 0 dsh
429.982 10.737 mo
446.087 10.737 li
@
431.462 10.737 mo
431.462 9.88696 430.772 9.19696 429.922 9.19696 cv
429.073 9.19696 428.383 9.88696 428.383 10.737 cv
428.383 11.587 429.073 12.276 429.922 12.276 cv
430.772 12.276 431.462 11.587 431.462 10.737 cv
0 0 0 0 cmyk
f
.355 lw
431.462 10.737 mo
431.462 9.88696 430.772 9.19696 429.922 9.19696 cv
429.073 9.19696 428.383 9.88696 428.383 10.737 cv
428.383 11.587 429.073 12.276 429.922 12.276 cv
430.772 12.276 431.462 11.587 431.462 10.737 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
447.567 10.737 mo
447.567 9.88696 446.877 9.19696 446.028 9.19696 cv
445.177 9.19696 444.488 9.88696 444.488 10.737 cv
444.488 11.587 445.177 12.276 446.028 12.276 cv
446.877 12.276 447.567 11.587 447.567 10.737 cv
0 0 0 0 cmyk
f
447.567 10.737 mo
447.567 9.88696 446.877 9.19696 446.028 9.19696 cv
445.177 9.19696 444.488 9.88696 444.488 10.737 cv
444.488 11.587 445.177 12.276 446.028 12.276 cv
446.877 12.276 447.567 11.587 447.567 10.737 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
.694423 .677272 .637385 .738643 cmyk
%ADOBeginSubsetFont: SBVPMX+TimesNewRomanPS AddGlyphs
%ADOt1write: (1.0.24)systemdict beginVSISRY+TimesNewRomanPS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/nine <1C60D8A8C9B7A73D33855495D9933548CAEBCC99DCF7AB3BB8E9059071857DB9430B23426E6D6123291A4B6E2D5B9EFC1AAEB88E0A133C2BD24EF406FB30624C02344CCF6D3D463EDA7733F28DBAE0ED33CA9D6C96284BA4DA326C2BF04612848D192945EF99F3C915D01AA9016B57B70DE2D2D7D072> |-/Z <1C60D8A8C9B7D8BE6A6C4306EA564EF604D5FBACA04E93B95E64204EB112ACB55BC444A9218C5A1A6CEA19FA64C75F273D9C46A2EA6D00FB944A1FBC3CC397535A9C35D81A889A614B> |-/r <1C60D8A8C9B81F2C46F55B66694B115BD121138C19EA6BB9FDEC19598F770072F51D5A41ABEEF64C2EFB3D34AEC6538C0369C4D60825FCFA8F9BC491AD1E51614DE6C39F278C0428320D60B6B2A4FC28EE9886B8C0DFE33672D30A2E3A95CB1E3069AB76213D54C2F75C7C32E576B43F4E07EA5DCBEC65C3E55A274406F05764> |-systemdict /gcheck known {setglobal} if end {end} ifendVSISRY+TimesNewRomanPS /Encoding getdup 57 /nine putdup 90 /Z putdup 114 /r putpop%ADOEndSubsetFont
/VSISRY+TimesNewRomanPS*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four /five 3{/.notdef}rp /nine 9{/.notdef}rp /C 9{/.notdef}rp /M 3{/.notdef}rp /Q 4{/.notdef}rp /V 3{/.notdef}rp /Z /bracketleft /.notdef /bracketright 7{/.notdef}rp /e 8{/.notdef}rp /n /o 2{/.notdef}rp /r /s /t /u 9{/.notdef}rp /minus 128{/.notdef}rp]VSISRY+TimesNewRomanPS nfVSISRY+TimesNewRomanPS*1 [4.3816 0 0 -4.3816 0 0 ]msf450.114 8.72485 mo(90)[2.1908 0 ]xshVSISRY+TimesNewRomanPS*1 [7.3421 0 0 -7.3421 0 0 ]msf454.496 13.1057 mo(Zr)[4.48669 0 ]xsh.4 lw
429.982 19.974 mo
446.087 19.974 li
.95346 .916228 .0104982 .0011902 cmyk
@
431.58 19.974 mo
431.58 19.058 430.837 18.316 429.922 18.316 cv
429.007 18.316 428.264 19.058 428.264 19.974 cv
428.264 20.889 429.007 21.632 429.922 21.632 cv
430.837 21.632 431.58 20.889 431.58 19.974 cv
f
431.58 19.974 mo
431.58 19.058 430.837 18.316 429.922 18.316 cv
429.007 18.316 428.264 19.058 428.264 19.974 cv
428.264 20.889 429.007 21.632 429.922 21.632 cv
430.837 21.632 431.58 20.889 431.58 19.974 cv
@
447.685 19.974 mo
447.685 19.058 446.943 18.316 446.028 18.316 cv
445.113 18.316 444.37 19.058 444.37 19.974 cv
444.37 20.889 445.113 21.632 446.028 21.632 cv
446.943 21.632 447.685 20.889 447.685 19.974 cv
f
447.685 19.974 mo
447.685 19.058 446.943 18.316 446.028 18.316 cv
445.113 18.316 444.37 19.058 444.37 19.974 cv
444.37 20.889 445.113 21.632 446.028 21.632 cv
446.943 21.632 447.685 20.889 447.685 19.974 cv
@
.694423 .677272 .637385 .738643 cmyk
VSISRY+TimesNewRomanPS*1 [4.3816 0 0 -4.3816 0 0 ]msf450.114 17.9611 mo(92)[2.1908 0 ]xshVSISRY+TimesNewRomanPS*1 [7.3421 0 0 -7.3421 0 0 ]msf454.496 22.343 mo(Zr)[4.48669 0 ]xsh.592 lw
429.982 29.211 mo
446.087 29.211 li
.512627 .963104 .344335 .174105 cmyk
@
.694423 .677272 .637385 .738643 cmyk
%ADOBeginSubsetFont: SBVPMX+TimesNewRomanPS AddGlyphs
%ADOt1write: (1.0.24)systemdict beginVSISRY+TimesNewRomanPS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/I <1C60D8A8C9B81F2C46F55B675DEF4FEF8ADE520CF08579DFA34CECB03B463E5222CEBCCF7773FAB0DDECF679E85A200813B543B76FAEDFBB0D9E4D7C99AA72> |-/a <1C60D8A8C9B77FE24414BFDEF4E80C4D790B946AE076B4646C6C07F81B63278106ED9FB404501811C1433BB554E5AF6B151556DC4888DE61E0E453C2D867FF5FA12CB2514FA57D4B2D64E56AC0AA25BEB67F6A8B72896256DD560EDD238056F1D454F3C5692E86E47B5E20E9285262829D061BA455239B9A260858B02489FEE0CDAE3B3615E7DEF515A3A31ACC4D34C45CBF8EF3D4BEFE8929ABF7E29056B502C7AD2297ABAD0E2B16AFCA275D51DC4912316BEE36D646955956EC70DA4CEFF7F44C20> |-/g <1C60D8A8C9B7A73DB58070C767E00CC48E28515C3534D68C511D4E2634498773C500C5E15E67C2DF5619450EDCDA209CEF5F0D32D1D7271E74F3B535AE5E48DF940BEE5E32CF5D1108142AA277AA23719E25EC4CEE1B9CC6403A3F1FC226E3D191A3C26BE83F5D69F46844F9765819AC263177543523569C8FD833083ECD41498E0B34D4CC69FCD1B8B590A8012B42B3860E49CC8B61E952C1D89A14AF7C3D3838B78B8CD293E8A70ED879D6E22F2E8C54F57C81114BA56383E03E097C653E5B90FC257383704EE28AF7F69A77C29DA6378CF09FEAD16AA5A2B539D456366C59B746586F352CBAD262154A1286C8DEED3A89E9D1A325E45FBCE7DA0AE5FC5B871AF6E7531AF1A5B9E6092D9552FD37DB5238A3914E1D767F27F8229FBA57A6185C0044FEE29F6C8F32F1F3C033768F589DA73D4660D8212296E659D9FBEA7C607B755C0F83E28FB78E8BB59487B8F7E2641C51AA663B7C62373FA4C94BA19AF707A702C2515D5F9AB0ED94FF323FCE6947F26AFE3AD66687B242BD54396D4A13F78618AF9A0D4A58A0A47D87C6270232986EE72FA9BDE6D04D43E7761149CC787D583069937FE9EC6673A86568F63116EF369B4B6D551598> |-systemdict /gcheck known {setglobal} if end {end} ifendVSISRY+TimesNewRomanPS /Encoding getdup 73 /I putdup 97 /a putdup 103 /g putpop%ADOEndSubsetFont
/VSISRY+TimesNewRomanPS*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four /five 3{/.notdef}rp /nine 9{/.notdef}rp /C 5{/.notdef}rp /I 3{/.notdef}rp /M 3{/.notdef}rp /Q 4{/.notdef}rp /V 3{/.notdef}rp /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g 6{/.notdef}rp /n /o 2{/.notdef}rp /r /s /t /u 9{/.notdef}rp /minus 128{/.notdef}rp]VSISRY+TimesNewRomanPS nfVSISRY+TimesNewRomanPS*1 [7.3421 0 0 -7.3421 0 0 ]msf450.114 31.5794 mo(Inert target )[2.44485 3.67105 3.25989 2.44489 2.04111 1.83624 2.04111 3.25989 2.44489 3.67105 3.25989 2.04111 0 ]xsh[2.3684 2.3684 ] 0 dsh
429.982 38.448 mo
446.087 38.448 li
.0161135 .957946 .906828 9.15541e-05 cmyk
@
.694423 .677272 .637385 .738643 cmyk
%ADOBeginSubsetFont: SBVPMX+TimesNewRomanPS AddGlyphs
%ADOt1write: (1.0.24)systemdict beginVSISRY+TimesNewRomanPS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/plus <1C60D8A8C9B7E7C1AF2D8FDCE9D340212A1593AF3894EEEE1D3BC6FD21DB82D7516964E1610DA2EAC9958A8B8351729C3C1AEB> |-/d <1C60D8A8C9B7A73D33D910C0ACF53AD6F42F01284C649BDAE51976E56022F2B4FF67866F5FFAAE991D2FE95B6A3269750D6D28FEA3386AF5F1BC91895FF64FAF866D9F578633EC86294552548FB9F2149F1A58E9460FE5F18391C90B8CD3D2E4DA7CFBE445A6D12B12BB75D90E7A342C2D2697650AAA0DFE9D43073FC7096E7B571F5D9544F410220D> |-/h <1C60D8A8C9B7A73DC54E0D6D91C3E93CDFF2BC7A6090CA1AFC8FDDB4AAF1ABF332006EBF2179850BE212FF452D8F34D04CAFBF02AF2781D3A40E922C0FC4106376319FB63C136C5975C20CB8C4BBC583957E1CA0AC4EE54E4C7F68BC2B129F991D204B58FEBB07CDAC87F0817C48DE76B39686CE7ACDA013E64D8F81B6CC34C60810DF62> |-/i <1C60D8A8C9B854D0888002323AC88DE1D732A0B438F52A36AC4C8235B50195661EE4F4F056C00FB5169E51E2DC2CFF59762708862D2CF2C9EE7C48914B2654119B06323F8628EDED75E67065F91DA9A509BD0525258AACECE39D658FE1D17161E00965A567F64B9D149E83A8E009> |-/w <1C60D8A8C9B6079F073CF9E6A5EB72BE71990D3469D504022ADF505AECA549EFAEDD915B813E63D8D5CAC64363E9510077DF9E70707E3E76EBAF6A25D58C93A900FDD1FAFF0E4E6EE3620005074FCBBF72EEA32ABD214DF92DDDA93FD1F5C33A1FE87E3C20BDB71CE4923F0FDB0871DE3CBDF88D2446F225A59BA9669A8F9D70E8D91F3C0A04235AABD56A298EB56A896B7C3B1F86A84E0323A14AADC4> |-systemdict /gcheck known {setglobal} if end {end} ifendVSISRY+TimesNewRomanPS /Encoding getdup 43 /plus putdup 100 /d putdup 104 /h putdup 105 /i putdup 119 /w putpop%ADOEndSubsetFont
/VSISRY+TimesNewRomanPS*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus 4{/.notdef}rp /zero /one /two /three /four /five 3{/.notdef}rp /nine 9{/.notdef}rp /C 5{/.notdef}rp /I 3{/.notdef}rp /M 3{/.notdef}rp /Q 4{/.notdef}rp /V 3{/.notdef}rp /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g /h /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /s /t /u /.notdef /w 7{/.notdef}rp /minus 128{/.notdef}rp]VSISRY+TimesNewRomanPS nfVSISRY+TimesNewRomanPS*1 [4.3816 0 0 -4.3816 0 0 ]msf450.114 36.4352 mo(90)[2.1908 0 ]xshVSISRY+TimesNewRomanPS*1 [7.3421 0 0 -7.3421 0 0 ]msf454.496 40.8167 mo(Zr  with 2)[4.48596 2.44489 1.83478 1.83478 5.30099 2.04111 2.04111 3.67105 1.83481 0 ]xshVSISRY+TimesNewRomanPS*1 [4.3816 0 0 -4.3816 0 0 ]msf483.656 36.4352 mo(+)shVSISRY+TimesNewRomanPS*1 [7.3421 0 0 -7.3421 0 0 ]msf486.129 40.8167 mo( and 3)[1.83551 3.25992 3.67105 3.67105 1.83551 0 ]xshVSISRY+TimesNewRomanPS*1 [4.3816 0 0 -4.3816 0 0 ]msf504.071 36.4352 mo(\177)sh[4.7368 2.3684 1.421 2.3684 ] 0 dsh
429.982 47.684 mo
446.087 47.684 li
.95346 .916228 .0104982 .0011902 cmyk
@
.694423 .677272 .637385 .738643 cmyk
VSISRY+TimesNewRomanPS*1 [4.3816 0 0 -4.3816 0 0 ]msf450.114 45.6721 mo(92)[2.1908 0 ]xshVSISRY+TimesNewRomanPS*1 [7.3421 0 0 -7.3421 0 0 ]msf454.496 50.0529 mo(Zr  with 2)[4.48596 2.44489 1.83478 1.83478 5.30099 2.04111 2.04111 3.67105 1.83481 0 ]xshVSISRY+TimesNewRomanPS*1 [4.3816 0 0 -4.3816 0 0 ]msf483.656 45.6721 mo(+)shVSISRY+TimesNewRomanPS*1 [7.3421 0 0 -7.3421 0 0 ]msf486.129 50.0529 mo( and 3)[1.83551 3.25992 3.67105 3.67105 1.83551 0 ]xshVSISRY+TimesNewRomanPS*1 [4.3816 0 0 -4.3816 0 0 ]msf504.071 45.6721 mo(\177)sh.355 lw
[] 0 dsh
402.271 60.948 mo
401.087 58.579 li
399.902 60.948 li
401.087 58.579 mo
401.087 98.843 li
422.758 100.263 mo
421.573 97.895 li
420.389 100.263 li
421.573 97.895 mo
421.573 125.131 li
@
VSISRY+TimesNewRomanPS*1 [8.5263 0 0 -8.5263 0 0 ]msf393.035 111.988 mo(2)shVSISRY+TimesNewRomanPS*1 [5.0921 0 0 -5.0921 0 0 ]msf397.298 106.895 mo(+)shVSISRY+TimesNewRomanPS*1 [8.5263 0 0 -8.5263 0 0 ]msf416.008 134.014 mo(4)shVSISRY+TimesNewRomanPS*1 [5.0921 0 0 -5.0921 0 0 ]msf420.272 128.922 mo(+)sh1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LWYAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginVSISRS+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/semicolon <1C60D8A8C9B854D09D7AD97383C8388D4CD6615DF9607347FFFDEAB0E7479FDC37D8D2BA7CE7A7E10202379107368A0370C61822048DB2CEB190B444AC36D82DCB4D58EC11FE55E48CC97CF38F7FCAC86DE803E25C3A630623B78B93D91235D86534524222C8ED158E98604639FFBE02473907B87A9E22291E8041B73C2CEBB5F6401B737226D9084EEDDDA9E9> |-systemdict /gcheck known {setglobal} if end {end} ifendVSISRS+Times-Roman /Encoding getdup 59 /semicolon putpop%ADOEndSubsetFont
/VSISRS+Times-Roman*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C /D /E /F /G /H /I /.notdef /K /L /M /N /.notdef /P /.notdef /R /S /T /.notdef /V /W /.notdef /Y /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z 51{/.notdef}rp /fi 2{/.notdef}rp /endash 78{/.notdef}rp]VSISRS+Times-Roman nfVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf315.504 187.007 mo(FIG.5.\(Coloronline\)Inelastic\(nontransfer\))[4.98532 2.98575 6.47372 5.2023 4.48322 6.02991 2.98575 5.98065 4.48318 2.49268 4.48318 4.86868 4.48322 4.48318 2.49268 2.49265 4.48322 3.98108 4.88663 2.98572 4.48322 3.98108 2.49268 3.98108 3.48798 2.49268 2.49265 5.86853 2.98575 4.48318 4.48318 4.48322 2.49268 2.98572 3.98108 4.48322 3.48801 2.98575 3.98108 2.98575 0 ]xsh%ADOBeginSubsetFont: CMKQMX+MTMI AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginVSISRW+MTMI dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B859EB4CC3B80A0EF1567264FFADB77611645EA6395F9BB3FD093035B70BC8D098F94C1AE3> |-/beta <1C60D8A8C9B7E7C1A36F97462FBEBAAC9BCDBC589FE74C0946A760D7AA84525B80666BE83328AAF58EEBBB4480D6523F39D3B1893378748CE77FE2DEC567B989353BE37BE63EC83F10AE175AAD2BB4F306610E4A5B2B67C45B6316399C29B35CBA14A7008F11A6809CB1C0D4509D7040815296F278E219159FE234F7413F80DD1EECE8064F687375D7639E6C723953FF84D0E06C5319AC837016C666E51AD9DA6A96EAFA21F601494DF3ED93098BFE688CC553C5E620DA11D64170395076ED620A5C383FA25CAAFA10C4BEB42070C372C2C98F9DC42BCB14C7C1B704409885CF42985BF1857235> |-systemdict /gcheck known {setglobal} if end {end} ifendVSISRW+MTMI /Encoding getdup 58 /period putdup 175 /beta putpop%ADOEndSubsetFont
/VSISRW+MTMI*1 [49{/.notdef}rp /Delta1 8{/.notdef}rp /period /comma /.notdef /slash 3{/.notdef}rp /A 3{/.notdef}rp /E 11{/.notdef}rp /Q 93{/.notdef}rp /beta 80{/.notdef}rp]VSISRW+MTMI nfVSISRW+MTMI*1 [8.9664 0 0 -8.9664 0 0 ]msf479.229 187.007 mo(Q)shVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf486.834 187.007 mo(-valuespectrafor)[2.98575 4.25723 3.98108 2.49268 4.48318 5.86853 3.48801 4.48322 3.98108 3.98108 2.49261 2.98578 5.87744 2.98578 4.48322 0 ]xshVSISRS+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf303.552 194.711 mo(20)[2.98819 0 ]xshVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf310.032 197.969 mo(Ne)[6.47104 0 ]xsh%ADOBeginSubsetFont: KVXQMX+MTSY AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginVSISRX+MTSY dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/minus <1C60D8A8C9B6C18031E531D62CCFFB4F07592A446F7E1EF35039F4AC88C2> |-systemdict /gcheck known {setglobal} if end {end} ifendVSISRX+MTSY /Encoding getdup 161 /minus putpop%ADOEndSubsetFont
/VSISRX+MTSY*1 [67{/.notdef}rp /plus /equal 92{/.notdef}rp /minus 15{/.notdef}rp /openbullet 78{/.notdef}rp]VSISRX+MTSY nfVSISRX+MTSY*1 [8.9664 0 0 -8.9664 0 0 ]msf323.973 197.969 mo(C)shVSISRS+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf334.449 194.711 mo(90)[2.98819 0 ]xshVSISRW+MTMI*1 [5.9776 0 0 -5.9776 0 0 ]msf340.426 194.711 mo(;)shVSISRS+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf342.406 194.711 mo(92)[2.98819 0 ]xshVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf348.885 197.969 mo(Zr\(openand\256lledcircles,respectively\),takenfrom)[5.47839 7.11926 2.98575 4.48318 4.48322 3.98108 8.61313 3.97839 4.48318 8.61313 4.98532 2.49268 2.49265 3.98108 8.61313 3.97839 2.49265 2.98575 3.98108 2.49268 3.98108 3.48798 6.36346 2.98843 3.98108 3.48801 4.48322 3.98108 3.98108 2.49268 2.26849 4.34689 3.98111 2.49265 4.48318 2.98578 6.37241 2.49265 3.98108 4.39178 3.98108 8.62207 2.98578 2.98572 4.48315 0 ]xsh303.552 208.931 mo(scatteringofthe)[3.48801 3.98108 3.98108 2.49265 2.49268 3.98108 2.98575 2.49265 4.48322 9.32416 4.48318 7.82135 2.49265 4.48318 0 ]xshVSISRS+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf371.34 205.673 mo(20)[2.98819 0 ]xshVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf377.82 208.931 mo(Neprojectileat156)[6.47284 8.81128 4.4823 2.98486 4.4823 2.49176 3.98019 3.98019 2.49176 2.49176 2.49176 8.82025 3.98016 7.33542 4.48233 4.4823 0 ]xshVSISRX+MTSY*1 [5.9776 0 0 -5.9776 0 0 ]msf456.561 205.673 mo(\261)shVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf460.053 208.931 mo(.Thecirclesshowthe)[7.07449 5.48108 4.4823 8.81131 3.98016 2.49176 2.98486 3.98019 2.49176 3.98016 8.33435 3.49249 4.4823 4.25726 11.3039 2.49268 4.4823 0 ]xsh303.552 219.884 mo(numberofcountsina0.44-MeV)[4.4823 4.4823 6.97498 4.4823 3.98019 6.04776 4.4823 6.03882 3.97839 4.4823 4.4823 4.4823 2.49176 6.54285 2.49265 7.53357 7.03864 4.4823 2.24072 4.4823 4.4823 2.98483 7.97031 3.98019 0 ]xshVSISRW+MTMI*1 [8.9664 0 0 -8.9664 0 0 ]msf428.196 219.884 mo(Q)shVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf435.802 219.884 mo(-valuebin.LinesrepresentCC)[2.98575 4.25723 3.98108 2.49268 4.48318 7.03775 4.48318 2.49268 4.48318 5.29196 5.47842 2.49265 4.48322 3.98108 6.54285 2.98843 3.98108 4.48322 2.98572 3.98108 3.48804 3.98108 4.48322 5.54388 5.98065 0 ]xsh303.552 230.847 mo(calculationsafterfoldingwiththeexperimentalresolution\(seetext\).)[3.98019 3.98019 2.49176 3.98016 4.4823 2.49179 3.98016 2.49176 2.49179 4.4823 4.4823 5.68835 3.98016 2.98486 2.49176 3.98019 5.17532 2.98843 4.4823 2.49179 4.4823 2.49176 4.4823 6.67816 6.47284 2.49176 2.49176 6.66922 2.49176 4.4823 6.16528 3.84302 4.4823 4.4823 3.98019 2.98483 2.49179 6.97495 3.98019 4.4823 2.49179 3.98019 4.69839 2.98483 3.98022 3.48709 4.48233 2.49176 4.4823 2.49176 2.49176 4.48233 6.66922 2.9884 3.48712 3.98016 6.16534 2.49261 3.84302 4.4823 2.49182 2.98486 0 ]xsh303.552 241.809 mo(Thesolidlinetreatsthezirconiumtargetsasinert\(i.e.,itignorestheir)[5.47751 4.4823 5.80484 3.49249 4.4823 2.49176 2.49176 6.2998 2.49176 2.49176 4.4823 5.80484 2.49268 2.98483 3.98019 3.98019 2.49176 5.30997 2.49265 4.4823 5.80484 3.98019 2.49176 2.98486 3.98016 4.4823 4.4823 2.49176 4.4823 8.80234 2.49176 3.98019 2.82611 4.4823 3.98022 2.49176 5.31891 3.97839 5.31 2.49265 4.48233 3.98016 2.98486 4.32001 2.98486 2.49176 2.24072 3.98019 2.24069 4.05908 2.49179 4.32001 2.49179 4.4823 4.4823 4.4823 2.98486 3.98022 5.30994 2.49176 4.4823 3.98022 2.49176 0 ]xsh303.552 252.762 mo(excitations\),whereasthedashedlinefor)[3.84299 4.48233 3.98016 2.49176 2.49176 3.98019 2.49176 2.49176 4.48233 4.4823 3.48709 2.98483 6.00302 6.47284 4.4823 3.98019 2.98483 3.98019 3.98019 7.25388 2.49176 4.4823 7.73981 4.4823 3.98019 3.48709 4.4823 3.98019 8.23563 2.49176 2.49176 4.4823 7.73981 2.98843 4.48233 0 ]xshVSISRS+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf459.162 249.512 mo(90)[2.98819 0 ]xshVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf465.633 252.761 mo(Zrandthedot-dashed)[5.47839 6.75882 3.98108 4.48318 8.24463 2.49265 4.48322 7.73978 4.48322 4.48322 2.49261 2.98578 4.48322 3.98108 3.48798 4.48322 3.98108 0 ]xsh303.552 263.723 mo(curvefor)[3.98108 4.48322 2.98575 4.34689 6.41727 2.98843 4.48318 0 ]xshVSISRS+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf338.661 260.465 mo(92)[2.98819 0 ]xshVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf345.132 263.723 mo(Zrtakeintoaccountthesingleandmutualexcitationsof)[5.47751 5.43625 2.49176 3.98019 4.39175 6.41724 2.49179 4.4823 2.49176 6.92114 3.98019 3.98019 3.98019 4.4823 4.4823 4.4823 4.94138 2.49176 4.4823 6.41727 3.49246 2.49176 4.4823 4.4823 2.49176 6.41727 3.97839 4.4823 6.92117 6.97498 4.4823 2.49176 4.4823 3.98016 4.93243 3.84302 4.4823 3.98016 2.49182 2.49176 3.98016 2.49176 2.49176 4.48236 4.4823 5.93134 4.4823 0 ]xsh303.552 274.685 mo(thetargetquadrupole-andoctupole-phononstates.Alldistributions)[2.49176 4.4823 6.63336 2.49265 3.98019 2.82614 4.4823 3.98019 5.1485 4.4823 4.4823 3.98019 4.4823 2.98483 4.48233 4.4823 4.4823 2.49176 3.98016 5.6434 3.98019 4.4823 7.13724 4.4823 3.98019 2.49176 4.4823 4.4823 4.4823 2.49176 3.98019 2.98483 4.4823 4.4823 4.4823 4.48233 4.48233 7.14621 3.48709 2.49176 3.98022 2.49176 3.98019 3.48709 4.88672 6.47104 2.49179 5.1485 4.4823 2.49176 3.48712 2.49176 2.98486 2.49176 4.30206 4.4823 2.49182 2.49176 4.4823 4.4823 0 ]xsh303.552 285.639 mo(arenormalizedtohavethesamevalueasthe)[3.98019 2.98483 6.06577 4.48233 4.4823 2.98483 6.97498 3.98016 2.49176 2.49176 3.98019 3.98019 6.56967 2.49176 6.56161 4.4823 3.79819 4.34689 6.07477 2.49176 4.4823 6.05679 3.49246 3.98019 6.97498 6.06577 4.25726 3.98016 2.49176 4.4823 6.0658 3.98016 5.57092 2.49176 4.4823 0 ]xshVSISRS+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf464.166 282.389 mo(20)[2.98819 0 ]xshVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf470.637 285.638 mo(Ne)[6.47104 0 ]xshVSISRX+MTSY*1 [8.9664 0 0 -8.9664 0 0 ]msf484.588 285.638 mo(C)shVSISRS+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf495.063 282.389 mo(90)[2.98819 0 ]xshVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf501.543 285.638 mo(Zrdataatthe)[5.47839 5.07584 4.48322 3.98108 2.49261 6.0658 3.98108 4.58093 2.49268 4.48315 0 ]xsh303.551 296.6 mo(elasticpeak.)[3.98019 2.49176 3.98019 3.48709 2.49176 2.49176 6.22806 4.4823 3.98019 3.98019 4.4823 0 ]xshVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf303.552 324.734 mo(20)[3.4834 0 ]xshVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf311.022 328.352 mo(Neionsfrombothtargets.TheCMdetectorangleis156)[7.19101 7.7489 2.76761 4.97931 4.97931 7.20004 3.31549 3.31546 4.97934 11.0704 4.97931 4.97931 2.76761 8.30679 2.77161 4.42139 3.14114 4.97931 4.42142 2.76758 3.87354 5.81418 6.08508 4.97931 7.74893 6.64212 12.1773 4.97931 4.42142 2.76761 4.42139 4.42142 2.76761 4.97931 6.65094 4.42142 4.97931 4.97928 2.76764 7.75787 2.77161 7.19104 4.97931 4.97931 0 ]xshVSISRX+MTSY*1 [6.9738 0 0 -6.9738 0 0 ]msf544.635 324.734 mo(\261)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf303.552 339.809 mo(inbothcasesandtheCMenergyis51.85MeV.Thesolid)[2.76761 8.98227 4.97931 4.97931 2.76761 8.9823 4.42139 4.42142 3.87354 4.42139 7.88449 4.42142 4.97931 8.99124 2.76761 4.97931 8.42438 6.64212 12.8608 4.42139 4.97931 4.42142 3.14114 4.97931 9.00018 2.76764 7.86652 4.97931 4.97931 2.48865 4.97931 8.99127 8.8548 4.42142 5.90384 6.49762 6.08508 4.97931 8.43329 3.87952 4.97937 2.76758 2.76758 0 ]xsh303.552 351.266 mo(curveshowstheresultofaCCcalculationignoringtarget)[4.42142 4.97928 3.31549 4.82388 8.67645 3.87354 4.97931 4.72525 7.19101 8.11859 2.77161 4.97931 8.66745 3.31549 4.42139 3.87354 4.97931 2.76761 7.00171 4.97931 7.55954 8.66748 6.64212 10.8813 4.42139 4.42139 2.76764 4.42139 4.97931 2.76758 4.42142 2.76761 2.76761 4.97928 9.23438 2.77161 4.97928 4.97931 4.97931 3.31546 2.76764 4.97925 9.23438 2.77161 4.42139 3.14111 4.97931 4.42145 0 ]xsh303.552 362.723 mo(excitationsbutincludingthe2)[4.26599 4.97931 4.42139 2.76761 2.76761 4.42142 2.76761 2.76761 4.97931 4.97931 7.21799 4.77905 4.97729 6.10211 2.77158 4.97931 4.42142 2.76761 4.97931 4.97931 2.76761 4.97931 8.31577 2.76761 4.97931 7.73993 0 ]xshVSISRX+MTSY*1 [6.9738 0 0 -6.9738 0 0 ]msf427.176 359.105 mo(C)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf436.446 362.723 mo(and4)[4.4194 4.97733 8.30682 0 ]xshVSISRX+MTSY*1 [6.9738 0 0 -6.9738 0 0 ]msf459.126 359.105 mo(C)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf468.396 362.723 mo(statesin)[3.87552 2.76962 4.42337 2.76962 4.4234 7.19107 2.76959 0 ]xshVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf504.918 359.105 mo(20)[3.4834 0 ]xshVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf512.397 362.723 mo(Ne.[The)[7.19 4.42041 5.81415 3.32147 6.08411 4.97833 0 ]xsh303.553 374.18 mo(inclusionofthe6)[2.76862 4.98029 4.42242 2.76859 4.98032 3.87451 2.76862 4.98032 7.00171 4.97733 5.32791 2.77158 4.98032 6.43484 0 ]xshVSISRX+MTSY*1 [6.9738 0 0 -6.9738 0 0 ]msf371.565 370.562 mo(C)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf379.512 374.18 mo(stategivesnodiscernibledifferenceonthis)[3.87454 2.76859 4.42239 2.76862 6.43484 4.97733 2.51953 4.82388 4.42242 5.9039 4.98029 6.99277 4.98029 2.76862 3.87454 4.42239 4.42239 3.31647 4.98032 2.76859 4.98032 2.76862 6.43484 4.97729 2.76862 3.0694 3.31647 4.42242 3.31647 4.42239 4.98032 4.42236 6.44385 4.98029 7.00171 2.76862 4.98029 2.76862 0 ]xsh303.552 385.637 mo(scale,andthesmalltarget-radiusdifference\(fromthe)[3.87454 4.42239 4.42239 2.76862 4.42239 6.4169 4.42242 4.98029 8.90955 2.76862 4.98029 8.34271 3.87952 7.74988 4.42242 2.76859 6.68689 2.76862 4.42239 3.14114 4.98029 4.42239 2.76862 3.31647 3.31647 4.42242 4.98029 2.76862 4.98029 7.8028 4.98029 2.76862 3.0694 3.32147 4.42239 3.3165 4.42239 4.98032 4.42239 8.35165 3.31647 3.3165 3.3165 4.98029 11.6642 2.76855 4.98035 0 ]xshVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf530.615 385.637 mo(A)shVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf537.885 382.019 mo(1)shVSISRW+MTMI*1 [6.9738 0 0 -6.9738 0 0 ]msf541.368 382.019 mo(=)shVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf544.645 382.019 mo(3)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf303.552 397.094 mo(factor\)alsomakesanegligibledifferencetothecurve.]To)[3.22183 4.42239 4.42239 2.76862 4.98032 3.31647 7.20886 4.4194 2.76862 3.87454 8.86472 7.7489 4.42239 4.87769 4.42239 7.77591 8.31577 4.97733 4.26599 4.97733 2.76859 2.76862 4.98029 2.76862 4.98032 2.76859 8.32477 4.98029 2.76862 3.0694 3.32144 4.42239 3.31647 4.42242 4.98029 4.42242 8.32474 2.76862 8.86472 2.76862 4.98029 8.3158 4.42242 4.98029 3.31647 4.82391 4.41937 2.48969 7.21783 5.28308 0 ]xsh303.552 408.551 mo(makeameaningfulcomparisonwiththeexperimentaldata,)[7.7489 4.42142 4.87769 8.21716 8.19922 7.7489 4.42142 4.42139 4.97931 2.76764 4.97931 4.97931 3.31546 4.97931 6.57932 4.42139 4.97931 7.7489 4.97931 4.42142 3.31546 2.76761 3.87354 4.97931 8.77505 7.19101 2.76761 2.76758 8.75714 2.76761 4.97931 8.20816 4.26599 4.97931 4.97931 4.42139 3.31549 2.76761 7.74893 4.42139 4.97931 2.76758 4.42145 6.57928 4.97931 4.42139 2.76758 4.42145 0 ]xsh303.552 420.008 mo(thistheoreticalcurveandsubsequentcalculationshavebeen)[2.76761 4.97931 2.76761 7.18213 2.76758 4.97931 4.42142 4.97931 3.31546 4.42142 2.76761 2.76761 4.42142 4.42142 6.08414 4.42142 4.97931 3.31546 4.82391 7.7489 4.42142 4.97928 8.28891 3.8735 4.97931 4.97931 3.87354 4.42139 4.97931 4.97931 4.42142 4.97928 6.10211 4.42139 4.42145 2.76758 4.42142 4.97928 2.76764 4.42139 2.76761 2.76761 4.97931 4.97931 7.20004 4.97928 4.22119 4.82385 7.73999 4.97931 4.42139 4.42139 0 ]xsh303.552 431.465 mo(foldedwithaGaussianexp\()[3.31848 4.98227 2.7706 4.9823 4.42441 6.81342 7.194 2.7706 2.7706 6.79547 6.24557 7.19101 4.42438 4.9823 3.87653 3.87653 2.7706 4.42438 6.81345 4.26599 4.97729 4.9823 0 ]xshVSISRX+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf412.516 431.465 mo(\241)shVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf420.283 431.465 mo(Q)shVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf428.733 427.847 mo(2)shVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf432.711 431.465 mo(=1)[4.68045 0 ]xshVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf445.401 427.847 mo(2)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf449.397 431.465 mo(\),with)[3.31946 4.30185 7.19501 2.77158 2.77161 0 ]xshVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf476.559 431.465 mo(1)shVSISRX+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf487.342 431.465 mo(D)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf497.872 431.465 mo(0)shVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf502.849 431.465 mo(:)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf505.585 431.465 mo(75MeV,to)[4.97931 6.82236 8.85486 4.42139 5.90387 4.31976 2.76764 0 ]xsh303.553 442.922 mo(simulatethedetectorresolution;thisisseentoworkwellinthe)[3.87552 2.76962 7.75089 4.98129 2.76962 4.4234 2.76959 6.28241 2.76959 4.98132 6.29138 4.98129 4.4234 2.76959 4.4234 4.4234 2.76959 4.98129 5.19342 3.3175 4.42337 3.87552 4.98132 2.76959 4.98132 2.76959 2.76959 4.98129 4.98129 4.64359 2.76959 4.98129 2.76959 5.73358 2.76959 5.74249 3.87555 4.4234 4.4234 6.84927 2.76962 6.8403 7.09238 4.97729 3.3175 6.8403 7.19296 4.42346 2.76959 4.63458 2.76959 6.8493 2.76959 4.98132 0 ]xsh303.553 454.379 mo(regionoftheelasticpeak,whereallofthecurvesdisplayedare)[3.31647 4.26599 4.98032 2.76859 4.98032 6.95688 4.98032 5.28308 2.76862 4.98029 6.38104 4.41943 2.76859 4.42239 3.87454 2.76862 2.76859 6.38104 4.98032 4.42239 4.42242 4.98029 4.47321 7.19202 4.98029 4.42239 3.3165 6.39001 4.4194 2.76859 4.73425 4.98029 5.28308 2.76862 4.98029 6.38107 4.42239 4.98032 3.3165 4.82388 4.4194 5.85907 4.97733 2.76862 3.87454 4.98029 2.76862 4.42242 4.98029 4.42242 6.95685 4.42242 3.31647 0 ]xsh303.553 465.836 mo(normalizedtohavethesamevalueasthe)[4.97931 4.97931 3.31546 7.74893 4.42139 2.76761 2.76761 4.42142 4.42139 7.48792 2.76761 7.46994 4.97931 4.22116 4.82388 6.92999 2.76761 4.97931 6.91205 3.87952 4.42142 7.7489 6.92102 4.72525 4.42142 2.76758 4.97931 6.92999 4.42139 6.36322 2.76758 4.97931 0 ]xshVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf468.963 462.218 mo(20)[3.4834 0 ]xshVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf476.433 465.836 mo(Ne)[7.19101 0 ]xshVSISRX+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf491.922 465.836 mo(C)shVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf503.568 462.218 mo(90)[3.4834 0 ]xshVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf511.038 465.836 mo(Zrdata.)[6.08408 5.83203 4.97833 4.42041 2.7666 4.42041 0 ]xsh315.505 477.293 mo(Wenotethatalthoughthecalculation\256tsthe)[8.6037 8.80197 4.97931 4.97931 2.76761 8.81091 2.77161 4.97931 4.42139 7.15515 4.42139 2.76764 2.76758 4.97931 4.97931 4.97934 4.97928 9.36884 2.76761 4.97931 8.80197 4.42139 4.42139 2.76764 4.42139 4.97931 2.76761 4.42142 2.76758 2.76761 4.97931 9.37778 5.53522 2.76761 8.25308 2.76764 4.97928 0 ]xshVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf510.759 473.675 mo(90)[3.48343 0 ]xshVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf518.238 477.293 mo(Zrdata)[6.08508 7.71295 4.97931 4.42145 2.76758 0 ]xsh303.553 488.75 mo(extremelywelluptoaround5MeV,itconsiderablyunder-)[4.26599 4.97733 2.76761 3.31546 4.42142 7.7489 4.42142 2.76761 8.76608 7.19101 4.42139 2.76764 6.54343 4.97733 8.75711 2.77161 8.75711 4.41943 3.31546 4.97931 4.97931 4.97928 8.76611 8.74817 8.85583 4.42139 5.90384 6.27344 2.77161 6.54343 4.42139 4.97931 4.97931 3.87354 2.76761 4.97931 4.42142 3.31546 4.42142 4.97931 2.76758 8.76611 4.97931 4.97931 4.97925 4.42145 3.12317 0 ]xsh303.553 500.207 mo(estimatesthecrosssectionfor)[4.42239 3.87454 2.76862 2.76859 7.74991 4.42239 2.76862 4.42239 8.73032 2.76859 4.98032 9.2702 4.4194 3.31647 4.98032 3.87454 8.72131 3.87454 4.42239 4.42239 2.76862 2.76859 4.98032 9.83707 3.32047 4.98032 0 ]xshVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf437.355 496.589 mo(92)[3.4834 0 ]xshVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf444.825 500.207 mo(Zr.Theinclusionofthe)[6.08707 3.31747 7.33548 6.08408 4.98129 9.27917 2.76959 4.98129 4.4234 2.76962 4.98129 3.87552 2.76959 4.98129 9.8371 4.97729 8.17224 2.77161 4.98132 0 ]xsh303.552 511.664 mo(quadrupole-andoctupole-phononstatesinthetargetsdoes)[4.97931 4.97931 4.42139 4.97931 3.31549 4.97931 4.97931 4.97931 2.76761 4.42142 7.39813 4.42142 4.97931 9.03607 4.97931 4.42142 2.76758 4.97931 4.97931 4.97931 2.76761 4.42142 3.31546 4.97931 4.97931 4.97928 4.97931 4.97931 9.06299 3.87354 2.76761 4.42142 2.76758 4.42139 7.92932 2.76764 9.0271 2.76758 4.97931 8.46921 2.77161 4.42142 3.14111 4.97931 4.42139 2.76758 7.92932 4.97931 4.97931 4.42139 0 ]xsh303.552 523.121 mo(notresolvethisdiscrepancy.Thedashedcurvefor)[4.97931 4.97931 4.67145 3.31549 4.42139 3.87354 4.97931 2.76761 4.82391 6.31827 2.77161 4.97931 2.76761 5.76941 4.97733 2.76761 3.87354 4.42142 3.31546 4.42142 4.97931 4.42139 4.97931 4.26599 4.32874 4.41046 6.08505 4.97931 6.31827 4.97931 4.42142 3.87354 4.97928 4.42142 6.88516 4.42139 4.97931 3.31549 4.82385 6.32727 3.31546 4.97931 0 ]xshVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf500.445 519.503 mo(90)[3.4834 0 ]xshVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf507.924 523.121 mo(Zr\()[6.08411 5.22925 0 ]xshVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf522.558 523.121 mo(E)shVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf529.731 524.615 mo(2)shVSISRX+MTSY*1 [4.9813 0 0 -4.9813 0 0 ]msf533.214 522.599 mo(C)shVSISRX+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf540.864 523.121 mo(D)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf303.553 534.578 mo(2)shVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf308.53 534.578 mo(:)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf311.266 534.578 mo(18MeV)[4.9783 6.63312 8.85382 4.42041 0 ]xshVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf343.369 534.578 mo(;\257)[4.95035 0 ]xshVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf353.934 536.072 mo(2)shVSISRX+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf360.702 534.578 mo(D)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf371.241 534.578 mo(0)shVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf376.219 534.578 mo(:)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf378.954 534.578 mo(10;)[4.97733 4.97729 0 ]xshVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf393.336 534.578 mo(E)shVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf400.509 536.072 mo(3)shVSISRX+MTSY*1 [4.9813 0 0 -4.9813 0 0 ]msf403.992 534.056 mo(\241)shVSISRX+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf411.66 534.578 mo(D)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf422.199 534.578 mo(2)shVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf427.177 534.578 mo(:)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf429.912 534.578 mo(75MeV)[4.9783 6.63312 8.85382 4.42041 0 ]xshVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf462.016 534.578 mo(;\257)[4.95035 0 ]xshVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf472.581 536.072 mo(3)shVSISRX+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf479.349 534.578 mo(D)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf489.879 534.578 mo(0)shVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf494.857 534.578 mo(:)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf497.592 534.578 mo(17\)showsan)[4.97931 4.97931 5.18344 3.87354 4.97931 4.72528 7.19098 5.72461 4.41943 0 ]xsh303.553 546.035 mo(improvementofthe\256t,anditmayevenexplainsome)[2.76761 7.7489 4.97931 3.31549 4.82388 4.82388 4.4194 7.74893 4.42142 4.97931 8.94641 4.97931 9.45941 2.76761 4.97928 10.5663 5.53522 2.76761 8.63956 4.42142 4.97931 11.1242 2.76761 8.90955 7.7489 4.42142 11.1332 4.16736 4.82391 4.4194 11.1422 4.26599 4.97931 4.97928 2.76761 4.42139 2.76764 11.1332 3.87952 4.97931 7.7489 0 ]xsh303.553 557.492 mo(ofthehigherenergystructureinthedata,butthedot-)[4.97931 9.08084 2.76761 4.97931 10.1877 4.97733 2.76761 4.97931 4.97931 4.42139 9.08981 4.42142 4.97931 4.42139 3.14114 4.97931 10.7546 3.87354 2.76761 3.31549 4.97931 4.42139 2.76761 4.97931 3.31549 10.1788 2.77161 10.7367 2.77158 4.97931 10.1877 4.97931 4.42142 2.76758 4.42142 8.26199 4.77905 4.97729 8.53198 2.77161 4.97931 10.1877 4.97931 4.97931 2.76758 0 ]xsh303.553 568.949 mo(dashedcurvefor)[4.97931 4.42139 3.87354 4.97931 4.42142 9.72052 4.42139 4.97931 3.31549 4.82388 9.15265 3.31549 4.97931 0 ]xshVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf378.972 565.331 mo(92)[3.4834 0 ]xshVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf386.442 568.949 mo(Zr\()[6.08408 8.06366 0 ]xshVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf403.911 568.949 mo(E)shVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf411.084 570.443 mo(2)shVSISRX+MTSY*1 [4.9813 0 0 -4.9813 0 0 ]msf414.567 568.427 mo(C)shVSISRX+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf422.217 568.949 mo(D)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf432.756 568.949 mo(0)shVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf437.734 568.949 mo(:)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf440.469 568.949 mo(93MeV)[4.9783 6.63312 8.85382 4.42041 0 ]xshVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf472.573 568.949 mo(;\257)[4.95035 0 ]xshVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf483.138 570.443 mo(2)shVSISRX+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf489.897 568.949 mo(D)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf500.436 568.949 mo(0)shVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf505.414 568.949 mo(:)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf508.149 568.949 mo(10;)[4.97729 4.97736 0 ]xshVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf522.531 568.949 mo(E)shVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf529.704 570.443 mo(3)shVSISRX+MTSY*1 [4.9813 0 0 -4.9813 0 0 ]msf533.187 568.427 mo(\241)shVSISRX+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf540.864 568.949 mo(D)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf303.553 580.406 mo(2)shVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf308.53 580.406 mo(:)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf311.266 580.406 mo(34MeV)[4.9783 6.63312 8.85382 4.42041 0 ]xshVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf343.369 580.406 mo(;\257)[4.95035 0 ]xshVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf353.934 581.9 mo(3)shVSISRX+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf360.702 580.406 mo(D)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf371.241 580.406 mo(0)shVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf376.219 580.406 mo(:)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf378.954 580.406 mo(17\)doesnothingtoimprovethelarge)[4.97931 4.97931 9.17947 4.97931 4.97928 4.42142 9.74747 4.97931 4.97931 2.76764 4.97931 2.76761 4.97931 10.8453 2.76761 10.8363 2.76764 7.7489 4.97931 3.31546 4.82388 4.82391 10.2874 2.76764 4.97931 10.2784 2.77161 4.42139 3.14117 4.97925 0 ]xsh303.553 591.863 mo(underestimateoftheexperimentaldatawiththattarget.)[4.97931 4.97931 4.97931 4.42139 3.31549 4.42142 3.87354 2.76761 2.76761 7.7489 4.42139 2.76764 6.92999 4.97729 5.81409 2.77161 4.97931 6.91205 4.26599 4.97931 4.97931 4.42139 3.31549 2.76761 7.7489 4.42139 4.97931 2.76761 4.42139 5.29214 4.97931 4.42142 2.76758 6.92102 7.19104 2.76758 2.76761 7.46994 2.76764 4.97931 4.42139 5.26523 2.76761 4.42139 3.14114 4.97928 4.42145 2.76758 0 ]xsh315.505 603.32 mo(InFig.)[3.31747 8.86472 5.53922 2.76959 4.98129 0 ]xsh.883635 .769161 0 0 cmyk
VSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf347.365 603.32 mo(6)sh1 /0 /CSD get_res sepcs
1 sep
VSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf352.342 603.32 mo(,weshowthedifference\(squares\)betweenthe)[6.38104 7.19101 8.3158 3.87949 4.97931 4.72528 11.0884 2.77158 4.97931 8.30682 4.97931 2.76761 3.0694 3.32147 4.42139 3.31549 4.42139 4.97931 4.42142 8.32474 3.31549 3.87354 4.97931 4.97928 4.42142 3.31546 4.42142 3.87354 7.20886 4.97931 4.42139 2.76761 7.19101 4.42139 4.42139 8.89166 2.76758 4.97931 0 ]xsh303.553 614.777 mo(experimentaldataforthetwosystems,andwenotethatit)[4.26599 4.97931 4.97931 4.42139 3.31549 2.76761 7.7489 4.42142 4.97931 2.76761 4.42139 6.83136 4.97931 4.42142 2.76761 8.46024 3.32147 4.97928 7.34436 2.76761 4.97931 8.46024 2.77161 7.09238 9.00919 3.87354 4.97928 3.87354 2.76761 4.42139 7.7489 3.87354 6.51556 4.42139 4.97931 9.01813 7.19101 8.46024 4.97931 4.97931 2.76758 8.46027 2.77161 4.97925 4.42145 6.80444 2.76764 0 ]xsh303.553 626.234 mo(possessesnooscillatorystructureintheregionoftheenergies)[4.98032 4.98029 3.87454 3.87451 4.42242 3.87451 3.87454 4.42239 6.24564 4.97733 7.35339 4.97729 3.87454 4.42239 2.76862 2.76859 2.76862 4.42239 2.76862 4.98029 3.3165 7.34442 3.87451 2.76862 3.31647 4.98029 4.42242 2.76862 4.98029 3.31647 6.78552 2.77161 7.34442 2.77161 4.98029 6.7955 3.3165 4.26599 4.98029 2.76862 4.98032 7.35339 4.98032 5.68756 2.76862 4.98032 6.7955 4.42242 4.98029 4.42242 3.14111 4.98035 2.76855 4.42242 0 ]xsh303.553 637.691 mo(ofthe2)[4.9783 6.01236 2.76663 4.9783 7.11032 0 ]xshVSISRX+MTSY*1 [6.9738 0 0 -6.9738 0 0 ]msf334.377 634.073 mo(C)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf342.999 637.691 mo(and4)[4.4194 4.97733 7.67719 0 ]xshVSISRX+MTSY*1 [6.9738 0 0 -6.9738 0 0 ]msf365.049 634.073 mo(C)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf373.68 637.691 mo(statesin)[3.87552 2.76962 4.42337 2.76962 4.4234 6.56143 2.76959 0 ]xshVSISRS+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf408.942 634.073 mo(20)[3.4834 0 ]xshVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf416.412 637.691 mo(Ne.Weconclude,therefore,that,)[7.19101 4.42139 5.17459 8.6037 7.11032 4.42139 4.97931 4.97931 4.42142 2.76761 4.97931 4.97931 4.42142 5.21143 2.76761 4.97931 4.42142 3.31546 4.42142 3.31549 4.97925 3.31549 4.42145 5.18451 2.76758 4.97931 4.42139 2.76764 0 ]xsh303.553 649.148 mo(aspredictedbythetheoreticalcalculations,thecontribution)[4.42142 7.41623 4.97931 3.31546 4.42142 4.97931 2.76761 4.42139 2.76761 4.42142 8.53198 4.97931 8.52298 2.76764 4.97931 7.96509 2.77161 4.97931 4.42139 4.97931 3.31546 4.42142 2.76761 2.76761 4.42139 4.42142 6.31827 4.42139 4.42142 2.76761 4.42139 4.97931 2.76761 4.42142 2.76758 2.76764 4.97931 4.97931 3.87354 6.04828 2.77161 4.97931 7.95612 4.42139 4.97931 4.97931 2.76764 3.31543 2.76758 4.77911 4.97729 2.76764 2.76758 4.97931 0 ]xsh303.553 660.605 mo(tothe)[2.7706 10.6022 2.7706 4.9823 0 ]xshVSISRW+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf334.729 660.605 mo(Q)shVSISRS+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf343.18 660.605 mo(-valuespectrafromprojectileexcitationsisthe)[3.31747 4.72525 4.4234 2.76959 4.98132 10.0622 3.87552 4.98129 4.4234 4.4234 2.76959 3.31747 10.0533 3.3175 3.31744 4.98132 13.3738 4.98129 3.31747 4.98129 2.76962 4.4234 4.42337 2.76962 2.76959 2.76959 10.0533 4.26596 4.98129 4.4234 2.76959 2.76962 4.42337 2.76962 2.76962 4.98126 4.98132 9.52234 2.76959 9.50439 2.76959 4.98132 0 ]xsh303.553 672.062 mo(sameinbothreactions,andthedifferencemustbeduetoa)[3.87454 4.42239 7.74991 7.9382 2.76859 8.49612 4.98029 4.98032 2.76859 8.5051 3.32047 4.42239 4.42239 4.42239 2.76862 2.76859 4.98032 4.98032 3.87451 6.01242 4.42239 4.98032 8.50507 2.76862 4.98029 7.9382 4.97733 2.76862 3.0694 3.31647 4.42239 3.31647 4.42242 4.98029 4.42242 7.94717 7.74991 4.98032 3.87454 6.29138 4.98032 7.9382 4.98035 4.98029 7.94714 2.76862 8.49609 0 ]xshVSISRS+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf277.398 695.975 mo(054613-4)[4.48322 4.48318 4.48318 4.48322 4.48322 4.48318 2.98575 0 ]xshgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/VSISRY+TimesNewRomanPS*1 uf/VSISRY+TimesNewRomanPS uf/SBVPMX+TimesNewRomanPS uf/VSISRX+MTSY*1 uf/VSISRX+MTSY uf/KVXQMX+MTSY uf/VSISRW+MTMI*1 uf/VSISRW+MTMI uf/CMKQMX+MTMI uf/VSISRV+Helvetica*1 uf/VSISRV+Helvetica uf/UPEAAA+Helvetica uf/VSISRU+Times-Bold*1 uf/VSISRU+Times-Bold uf/DLGQMX+Times-Bold uf/VSISRT+Times-Italic*1 uf/VSISRT+Times-Italic uf/JIWAAA+Times-Italic uf/VSISRS+Times-Roman*1 uf/VSISRS+Times-Roman uf/LWYAAA+Times-Roman ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
