%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: A9R382875.tmp.pdf
%%Creator: Adobe Acrobat 9.5.2
%%For: yusa
%%CreationDate: 12/10/30, 14:29
%%BoundingBox: -1 0 241 240
%%HiResBoundingBox: 0 0 240.8385 239.2441
%%CropBox: 0 0 240.8385 239.2441
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 843 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:56:37        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2012-10-30T14:28:08+09:00"
   xmp:CreateDate="2012-10-30T14:28:08+09:00"
   xmp:MetadataDate="2012-10-30T14:28:08+09:00"
   xmp:CreatorTool="LaTeX with hyperref package"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:46d57d4e-3e90-6144-9a72-e7533410a95f"
   xmpMM:InstanceID="uuid:2b6300d1-2c10-464d-bc95-ddd8925cf033"
   pdf:Producer="Acrobat Distiller 6.0.1 (Windows)"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -239.244 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-3.05176e-05 0 mo
-3.05176e-05 239.244 li
240.839 239.244 li
240.839 0 li
cp
clp
[1 0 0 1 -306.142 0 ]ct
false sop
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: SBTAAA+Times-Roman Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /SBTAAA+Times-Roman def/FontInfo 8 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Roman) def/ItalicAngle 0 def/BaseFontName (Times-Roman) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdup 44 /comma putdup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putdup 54 /six putdup 57 /nine putdup 65 /A putdup 67 /C putdup 68 /D putdup 69 /E putdup 70 /F putdup 72 /H putdup 73 /I putdup 75 /K putdup 76 /L putdup 78 /N putdup 79 /O putdup 80 /P putdup 82 /R putdup 83 /S putdup 84 /T putdup 85 /U putdup 86 /V putdup 87 /W putdup 89 /Y putdef/FontBBox {-168 -218 1000 898} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-14 -0 662 676 450 460 683 683] def/OtherBlues [262 270 -218 -217] def/FamilyBlues [-14 -0 450 460 662 676] def/FamilyOtherBlues [-218 -217 262 270 394 394] def/StdHW [28] def/StdVW [84] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings31 dict dup begin/parenleft <1C60D8A8C9B81F2C34DD536D1360D89197E7FA43CD15762B1F48F10FBDCF9BC2C750CDE4A2E91649CF8859E337C2E166D3734F3568F45FDC414D6EEB6B611B8690C7C03C> |-/parenright <1C60D8A8C9B81F2C34DD536D5F91D4C3DAE454AEB0D09D2D77AB7A4947777BB664E613196BC679C0FA303967174C88DFCCFA0D154A8957EC684FC25A36D2507079F0D08A> |-/comma <1C60D8A8C9B8707CB516A860815AB2EC26918885F713E4ED7939803E0A8E0EE12DBD595F7B4FC46C96E99C7C244F8EE37F7C691D6FF966A57DBB357A175F54A977790792A86A701245F8E3A81974A3254E3CFE0117AA8FEF> |-/zero <1C60D8A8C9B7A73D33BD7C9339964DD07C87D05AB7B25A7463788209DFA6F2469A76A662ABDEC36022D07150EBCCB00EAFC3634E253FB48B765FB94D71E293B85E25BD0A9620E2BFB3082EA4BB23F9236A4694D2C3E9FC45E251B722> |-/one <1C60D8A8C9B7A73DC549024B406C76DEED7B46C1EF6EB5651B1F268C3787648C40DBF41CCAF519D06A13A3171180A36B4BF986E9264F6C74AFB62268E95BF4B0184D270E> |-/two <1C60D8A8C9B7A73DC5046156A965F0B3A5C5C92B949F09859351B7460BBC2BE41737489572FD61CF5BD3DA796B955EB550353EDF2F8C07B4F5384131697035B0D3184C9331276BD170AD13B7E6187EA056B38F406A362F0A077FD8459EE186F67C0C> |-/three <1C60D8A8C9B7A73D33B7A780A4FB6D47887A89CCD14262CC5EAF9A44E4667C02E08E12C9FAA81B3FDF7544E6E75E5296452BF3839C72DB687B09DBAE283E004770052C2C40F3BE9D14CD88A743EF8BCC90D61B07BC93A5F254687A358EFD7C6A34DA02B99630F8F91E5B5B18682C41B5E27DFA84375DC950157D776BEF8B8244DE2CBD755506> |-/four <1C60D8A8C9B7A73DB91ED1D58B1534FC3DC9CE70FBEFFE64A020E69D305561F2E3159DBBBFB3075C8C37AD523FA4E6CA1C673946692CFDA34CFE2A635874507E6C9AACEA9BFCA866A31780314DE8CB239F7F84052FFAEAB4A857AB9E0A7D17979C9340343DBC60020EAB> |-/five <1C60D8A8C9B7A73D33A88FEA12959A734F76D056A6AD18616787F24D4694B06D2D404FC3FCA38087EA8162B81AF2DD5F722A8A8620829370F42A0D36AD232CF1AF8C5768FCC5070E4C1D383794DEEE463936008AA8B79C75171B0B56AEE44FCABBD4B348C68E82A7216D83E5CCC6E39493B5E64C831AA2> |-/six <1C60D8A8C9B7A73D33BF1B90A184398C344468AF20F393E1CDAE1A1BDF4B1EF29581C243D118AD9C2F9F3B85C649B4F94D8775B8245D414436A38469371891286E3E4F3F2C58114BE7041C63E1137F930DD38393462B124AC8D60E4109AAD485EEDD44016B3DCF2F116B050BDED76293F395802A2102> |-/nine <1C60D8A8C9B7A73DD0C741EDEE83FA306ACFF34B0F4BCBA36C21A7408C6F9BEB4A442B2F13237BF635FDFAB907B29059292DDAFF5DABCEDC6EC41C5F3C648AFBF12E0ECD4E60C870F065877946C9D47E8B9420F50B2720233BC04950F88E0C085E4CFFDC37232A1913DAF7D116A465520E3E0185527DFA5DEE32> |-/A <1C60D8A8C9B6079F1E48848039BAD53EF75083A15B245763DB78818AFF61A16A1320ECEE497C9F16C5A9970A7745608AF8FED49797B2C617F48878314ECB9388DC87C41E0CC6BE34027C1122095499F934B9D2E8FCDB060A9CB7A271807727C28B32415ED07DCC7001E6D3C85F5AEC7FFEE39DAFE67E7733CC865438> |-/C <1C60D8A8C9B64EDF7E182276F33FE64591D35477734F1BEC23C2AC3C7BB24FE587EAFC58752906FDF803B7EE08CC0EEA6D4DF528ED9A25AEB8763A1E0F3351E8367C0E0AF3723CBF0E47B6C61A46C0C9B9B14422A38EEC6A11432287BB1AAA047F2C2F93CA4A999D93CAB432079751D1C3EA> |-/D <1C60D8A8C9B6079F1E66B7565D0C0FE392D7D1AED8C6DCA6A1AA2DE51BB054073985C252F108C147E5B894B74E8DD41D4B2907B2971BD6DBC1DA40B30BE321EFA5013A17A623A37E171056FA1C8F8EA833B84DA2D5777727CE57C35BBEBB84A1CD5B36C6FDD2EDF02AB75D6D59B40E8D867EAC2EF07C9A4EC98494859463D49D6F36907EE221091971F8FF4FEE> |-/E <1C60D8A8C9B7D8BE6A6EDEC7A42842EA4F0E34B06A7ADB9E9D606CC12DFCC58C499944486BC2E1461DA5CCC60C99E2409FC8400D8E867A3E518B76BC24BDD4E0EEB0CD902F7EAB97FABA7DA3C9FC37B399B0166CF4B1D4B61FEFF822440F5F4D8B0E5BB37984F9B56DB6714933760DC4DB6872720E4125AE0EB0FEDE661DAED0217CC0DEFD21A5F9B1C2564FF8D194AAF30E05D310042230EE67F24841F08AF905799BB463507C4C6D8F5CDA5A47F765531646F2A5624F53C5FE261955B6C1E2A87993AA> |-/F <1C60D8A8C9B7EF32570E39CCED07FE54E8B5118F3EFF07C7A79A2805A7241FA0611FB6DCB02F4798E0410DC1710B4F82A5B7BCC7865D64D2E2B0A30C294A77483F558D7052690E49D2377820A0E476D251BE7D8E7824AF8838D3AC4B16AB7150225F7733450A626EF63F06C118CB55A5AEB0457B0B46C175C6FAF26CA023804F63A0F8CB598EED6E4E1BE1C9B8155B5E2F3060102CB3B31CD1B056E0CC0202> |-/H <1C60D8A8C9B6079F1E4884809AF27C32C4C4644B748B72386090B6EA72F2CAD492799B13A490C22BB769448B5BE5145154E5257C346442332292571F1722B637B36F195964360C86F3C2FA20D5968E5EF117A87C5275E3CF4EDCBA851C9A2685EF777C52F37A9D6571C1FF8201E097F935E15B632A692C95A8A199E69FDF3449B5C7E7D9F966187E> |-/I <1C60D8A8C9B81F2C46F6291E6BC656A33181A7CEBA53BA35C0D63778365713E4937D45432C22967EB42DF6DA1495947FD682A87B83F3472A9AC53AFF202CED526C6E0626B1> |-/K <1C60D8A8C9B6079F1E48848E88AD51D875E18A757A1A6325AC362734879AAFAD42E2CFBAD5446AE147FD12A5E9A047AD123CE532F2C71974BDDAFED116F386DFBBD27BFD1FE6B32F3F98B336226EB8E9B9110925821FFD7841F8A8D3AB3912F803B84F359CF4C96FC59565AEDDE400BC329821CB75B63B2CAC9CAFFCE37E85F33708E8758BC2D160D6830730BB048B8C3A9E76619F> |-/L <1C60D8A8C9B7D8BE6A6D10833A58E10E35AAF0D74F28161F1E96F93676A52EBF6FCEE0F833224946C62AB4825949DCD38F43112D2F78458FF85000573083054640F9BEF9D64C20B231AD48404F645607CB5F4CDB2A6BFD9D45ADC27D5BF358972E357CAF472CF1479518> |-/N <1C60D8A8C9B6079F1E48848E88AD51D864EC24104C6DD11D55A63CFF3E9C756106D0E97B2A535F11521FC421A87DB7AA1BB7E5E72F9C1F26749CEA60879128C49F034519E4F1E3D0B2668109027E7AE954A9FBCDB8C98F28D8FD5566696AFD7E7E86478C98CFD0142A5D34CA87950DF8C96F24696E1A4263A162D3B7D0318A42AFF3> |-/O <1C60D8A8C9B6079FE817D875D2CBFFB503E7661914031DEF82D4082D7029995CDB5B363791EF40B5AF7B3843B9E472E4F50B8472BF0DFE33E4CD5D7DBCF3EB6D302111F8799A9C032144A0C9CB2E8226B631DA3032A3884790267BD00E4ECAADF3> |-/P <1C60D8A8C9B7EF32570E39CC82D8FC3971C64FFF40AB84806AE53A80D00359C85B6AFD0D4E4516E6F925E114CB5694CA3C3BB5BD1D3AACEA6F4D4E17877AA50A9AB3B90A72FF729470C063D06BEEAA5184A0D925F90DCE26119419701EB253AFCA84A1D0339652DC6259CB60A6C47C07B17E94492CCC7FA176E9C4175D61D356F93D23B513D5121081D0F8AD8E04BD4C29CCCFFE386A44> |-/R <1C60D8A8C9B64EDF88216CF039522D2CD16031C14F48AE18706656314B55A44D32F713967A5EF8844C033ACCF3957E344151100D1C83334794F24CBE3A1B9AF4A82F4D6C7CD452B51143B0C6F97C0FA861F03E4C420C96B9F0EC4B2245F8CD654119EBE887016A0D90A29861BC0C36838B5464E1DB93F15F4476DA9E07D597F3D2EA5732F6E8BF74573804D1C1542747A58851CA05BA5FA2416A905DAF1E03CC5FD0906576F6C98C075D633B8EC1BE9755F5EC40> |-/S <1C60D8A8C9B7EF32A193189DA2467EEF90BB4843AFCD07682C17FCB181C3F70B0CA8436486C289ED34AE435D16FF1CB07A2B01CAD9573442FA519C68EF9A198BFAE5C4A460021A5C56FEA9BD8D624F7DAF5F40358D4BEEF4C33B8CA9313A0976CADAB3AF967336E068B5FDB3E208F4079D52BB0970F735315F1E256DFA87D04984A8> |-/T <1C60D8A8C9B7D8BE7EA0B64700DC8E438573301CAC4344B7D410E182F881F58CB0EE6C7200F45451BF195D6B4EC9CF9C8B176B767CF2064CDC4BF9C3DA0B6A6FF54C56F67DE1F05535B028AE5A1E7C736084EB09A8A00FEB9607E1E016> |-/U <1C60D8A8C9B6079FE80F64D637F1516D9E8985E20DE1E4A504B71DC250CC94F8454FA963469B35C9D4B7E46C018A2F3902FA466C96536C754E001D7B60F1C628148C766518D0DC4CFB4FCBBE135C4BE555811EB0F5DE32774AE040CA644920E9C9E4CEC38A967DCB11773942911928CF14258BA4> |-/V <1C60D8A8C9B6079F00D3839AD3AAE47C24C61BEF9550E6B3F54F328A2E722C97D7D2FBC5772073A5D2242D57568F9713676A9A112080E9C58F570910912489ED383248F2A72FF33DDFA4B7BB50F9DB818B39D67B1C90816C650F497C9BFE308B3A0ADE01210A> |-/W <1C60D8A8C9B5D6EF203CFD756D7886C6923F14CB2B145795133A4097CE2D5E96D3BF6D30AF147BE0DC50CEF0E4C43E37601F7D5B36C9EA62EB623CBDD7621F7CDC9591AD048D1D8A14C445CA02086468A3F68BFB4F34B84F197939306BCA26FB45C767C3471D697F21D9DB9B96CBD00D5CB38D9F6CA97F559147F568DB764BF9F72A1F66FAB764FDDF200F256A908BEC101F14CE4C8841DBE1467BFC364A4F282E1F5B95C9> |-/Y <1C60D8A8C9B6079F1E48848E88AD51D8AA3C768145CDCFEDAB6B83C487A69F31930A579C115CC8C7B6544BBBD866CC3DFFD379BB9B60E13ECCDC0F741A908D74DDE0F7C507AF7F488799737D8C65256B95AF5C7D5B4FFD0CAB79A3BC373F5C626243062B54DB0912782D7331A8EA0D3C3A5D6A6ADF4E004A15874BC55709> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/BDEBBZ+Times-Roman /SBTAAA+Times-Roman findfont ct_VMDictPut/BDEBBZ+Times-Roman*1 [40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two /three /four /five /six 2{/.notdef}rp /nine 7{/.notdef}rp /A /.notdef /C /D /E /F /.notdef /H /I /.notdef /K /L /.notdef /N /O /P /.notdef /R /S /T /U /V /W /.notdef /Y 166{/.notdef}rp]BDEBBZ+Times-Roman nfBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf40.824 -16.9509 mo(EFFECTSOFWEAKLYCOUPLEDCHANNELSON)[5.4784 4.98532 4.98532 5.4784 5.98065 5.4784 7.21796 6.47105 7.22691 8.46069 5.47841 6.47374 6.47374 4.58087 8.72162 5.98514 6.47374 6.47374 4.98532 5.47841 5.47839 8.71266 5.98065 6.47375 6.47374 6.47374 6.47374 5.47841 5.47839 7.22691 6.47375 0 ]xsh%ADOBeginSubsetFont: TZMBAA+MTMI Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /TZMBAA+MTMI def/FontInfo 8 dict dup begin/Notice (Copyright (C) 1992, 1993 The TeXplorators Corporation) def/Weight (Medium) def/ItalicAngle -14.0361 def/BaseFontName (MTMI) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 58 /period putdef/FontBBox {0 -213 987 680} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-18 -0 653 672 428 441] def/OtherBlues [268 271 -211 -192] def/BlueScale 0.0479599 def/StdHW [34] def/StdVW [73] def/StemSnapH [20 34] def/StemSnapV [55 73] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/period <1C60D8A8C9B859EB4CC3B80A0EF1567264FFADB77611645EA6395F9BB3FD093035B70BC8D098F94C1AE3> |-/.notdef <1C60D8A8C9B81F2CC3> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/BDEBCA+MTMI /TZMBAA+MTMI findfont ct_VMDictPut/BDEBCA+MTMI*1 [58{/.notdef}rp /period 197{/.notdef}rp]BDEBCA+MTMI nfBDEBCA+MTMI*1 [8.9664 0 0 -8.9664 0 0 ]msf243.169 -16.9509 mo(:::)[3.9604 3.9604 0 ]xshBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf391.03 -16.9509 mo(PHYSICALREVIEWC)[4.98621 6.47464 6.47464 4.98621 2.98666 5.98154 6.47464 7.7218 5.98154 5.47931 6.47464 2.98666 5.47928 10.6924 0 ]xsh%ADOBeginSubsetFont: NZPPMX+Times-Bold Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /NZPPMX+Times-Bold def/FontInfo 8 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Bold) def/ItalicAngle 0 def/BaseFontName (Times-Bold) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 56 /eight putdef/FontBBox {-168 -218 1000 935} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 -0 676 691 461 473] def/OtherBlues [268 275 -206 -203] def/FamilyBlues [-14 -0 450 460 662 676] def/FamilyOtherBlues [-218 -217 262 270 394 394] def/BlueScale 0.0437916 def/StdVW [139] def/ForceBold true def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/zero <1C60D8A8C9B7A73D300A56E04A82C9489CB10A8D5D8A1CE23AD355BCA1220794CD88E5D3319BCC1499097FDE125CAEBD81AFB7940E79A48AA8531CD25C3B7643897E934807122282BF4CFA3143D12F21270BAB87E8242C1D5865D04BF8356131B8B9526BE9306B> |-/eight <1C60D8A8C9B7A73D30061FAFE781A121F40E2C045ED20653EE77041581D97B3EB5A239D9DAF1FE5C1856FDBA60DAB647248B7519B8699E7B27CEA41A98F5375229EAAC330FA99E3D311DD7C841AB9E4CE13F980801AE8CF52935ED235B808125CA8E8D34B47F0183DA7878E7727504C3CF9767A3C870D7BE81E23692DA13EFF6C0923F456039982AAD716FE10C70E213B750D053170FE264D824965C6A4C5141D9F103852EAA0D8ADD9E454D7831D7B4A66F7246CF2901679178202C075F2E846D6625821B912343620363674C964059D4A024AFB75096766296> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/BDEBCB+Times-Bold /NZPPMX+Times-Bold findfont ct_VMDictPut/BDEBCB+Times-Bold*1 [48{/.notdef}rp /zero 7{/.notdef}rp /eight 199{/.notdef}rp]BDEBCB+Times-Bold nfBDEBCB+Times-Bold*1 [8.9664 0 0 -8.9664 0 0 ]msf482.437 -16.9509 mo(80)[4.4823 0 ]xshBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf491.402 -16.9509 mo(,054613\(2009\))[4.4823 4.4823 4.4823 4.4823 4.48233 4.4823 6.73199 2.9848 4.4823 4.4823 4.4823 4.4823 0 ]xshgsave
258.03 1.74713 mo
67.869 1.74713 li
67.869 177.08 li
258.03 177.08 li
cp
clp
.4 lw
1 lc
0 lj
10 ml
[] 0 dsh
true sadj
252.448 1.94714 mo
252.448 4.46216 li
201.131 1.94714 mo
201.131 4.46216 li
149.939 1.94714 mo
149.939 4.46216 li
98.621 1.94714 mo
98.621 4.46216 li
252.448 152.88 mo
252.448 150.366 li
201.131 152.88 mo
201.131 150.366 li
149.939 152.88 mo
149.939 150.366 li
98.621 152.88 mo
98.621 150.366 li
252.448 1.94714 mo
252.448 3.20514 li
201.131 1.94714 mo
201.131 3.20514 li
149.939 1.94714 mo
149.939 3.20514 li
98.621 1.94714 mo
98.621 3.20514 li
252.448 152.88 mo
252.448 151.623 li
201.131 152.88 mo
201.131 151.623 li
149.939 152.88 mo
149.939 151.623 li
98.621 152.88 mo
98.621 151.623 li
252.448 21.6942 mo
249.932 21.6942 li
252.448 87.3502 mo
249.932 87.3502 li
252.448 152.88 mo
249.932 152.88 li
98.621 21.6942 mo
101.137 21.6942 li
98.621 87.3502 mo
101.137 87.3502 li
98.621 152.88 mo
101.137 152.88 li
252.448 1.94714 mo
251.19 1.94714 li
252.448 21.6942 mo
251.19 21.6942 li
252.448 24.7131 mo
251.19 24.7131 li
252.448 28.1092 mo
251.19 28.1092 li
252.448 31.8821 mo
251.19 31.8821 li
252.448 36.2852 mo
251.19 36.2852 li
252.448 41.4412 mo
251.19 41.4412 li
252.448 47.8561 mo
251.19 47.8561 li
252.448 56.0322 mo
251.19 56.0322 li
252.448 67.6031 mo
251.19 67.6031 li
252.448 87.3502 mo
251.19 87.3502 li
252.448 90.3691 mo
251.19 90.3691 li
252.448 93.7651 mo
251.19 93.7651 li
252.448 97.5381 mo
251.19 97.5381 li
252.448 101.941 mo
251.19 101.941 li
252.448 107.098 mo
251.19 107.098 li
252.448 113.513 mo
251.19 113.513 li
252.448 121.688 mo
251.19 121.688 li
252.448 133.26 mo
251.19 133.26 li
252.448 152.88 mo
251.19 152.88 li
98.621 1.94714 mo
99.879 1.94714 li
98.621 21.6942 mo
99.879 21.6942 li
98.621 24.7131 mo
99.879 24.7131 li
98.621 28.1092 mo
99.879 28.1092 li
98.621 31.8821 mo
99.879 31.8821 li
98.621 36.2852 mo
99.879 36.2852 li
98.621 41.4412 mo
99.879 41.4412 li
98.621 47.8561 mo
99.879 47.8561 li
98.621 56.0322 mo
99.879 56.0322 li
98.621 67.6031 mo
99.879 67.6031 li
98.621 87.3502 mo
99.879 87.3502 li
98.621 90.3691 mo
99.879 90.3691 li
98.621 93.7651 mo
99.879 93.7651 li
98.621 97.5381 mo
99.879 97.5381 li
98.621 101.941 mo
99.879 101.941 li
98.621 107.098 mo
99.879 107.098 li
98.621 113.513 mo
99.879 113.513 li
98.621 121.688 mo
99.879 121.688 li
98.621 133.26 mo
99.879 133.26 li
98.621 152.88 mo
99.879 152.88 li
.694423 .677272 .637385 .738643 cmyk
@
grestore
.694423 .677272 .637385 .738643 cmyk
%ADOBeginSubsetFont: ITAQMX+TimesNewRomanPS Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /ITAQMX+TimesNewRomanPS def/FontInfo 8 dict dup begin/Notice (Copyright (c) 1988, 1990 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation Plc registered in the US Patent and TM Office and elsewhere.) def/Weight (Roman) def/ItalicAngle 0 def/BaseFontName (TimesNewRomanPS) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putdup 55 /seven putdup 67 /C putdup 77 /M putdup 81 /Q putdup 86 /V putdup 91 /bracketleft putdup 93 /bracketright putdup 101 /e putdup 110 /n putdup 111 /o putdup 115 /s putdup 116 /t putdup 117 /u putdup 127 /minus putdef/FontBBox {-167 -216 1009 878} defendsystemdict begindup /Private10 dict dup begin/|- {def} def/| {put} def/BlueValues [-15 -0 662 677 447 461 694 694] def/OtherBlues [384 384 -216 -213] def/StdHW [36] def/StdVW [87] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings23 dict dup begin/space <1C60D8A8C9B8707C25> |-/period <1C60D8A8C9B8707C5632F0034C4AC324F107C4D98AEEB96D6E4A1E10EE545079E397D95082DA67E5038907E7> |-/zero <1C60D8A8C9B7A73D33B1D1416E04E763984AB83B925BA8A4FDE215501CA86FB8A0453E2C2116D4EBB36C4E7E5E28E3C02FDE0FF4A749E3E3B61D0B5972B2FA36E008E079A694D81C4B7A2CE9635E3FDFE8FE87FF8DA92D> |-/one <1C60D8A8C9B7A73DC54E0D6CDEF63D6D8B1D1BAFF1FE96FACEB5D2E94CC33A048E79C70D79DA501F0FEDC03A8E3E458B1265FD28A5171BD1D7126471227C327E28D3395C> |-/two <1C60D8A8C9B7A73DC506FC27B647F3B220444418F84A63EEA0C85378D83FED067EE2616181F53C98E193A0786AFABC6AF3DE813E5DFEF95B86E3C09F0D4E4645F3E651EA1566CD58B7401E11D694DED682CB44FAD00D6F212FF07D> |-/three <1C60D8A8C9B7A73D33A01A1054C882E3E266AB9E20905BA640379B187EB6EBABF905E8CC50AED6B5FC34D0C1498F28808D72D7E0888E388EF7E4E369B1D9FA4BF0B525DDD6C359F5B06C0A93F3D1969130948DD8BC2D312D26A983C358CE52223BD90A9BC09D3854AEBC026CBBB15C22879B549123DF14A809BA94548C95DE9920DB766F5E> |-/four <1C60D8A8C9B7A73DB96726F82EC389232F73A7B6E7875DC9A46EF4FEC7F3D5E23D7BF70B540998FC5CC08E09E16340F0B45A6DECA08B4B9468D4E4B393F67B7110F71363573BAD8DD1FBA20AE97EE1AF738E6778F333F5BC98166EAE94F95B7717> |-/five <1C60D8A8C9B7A73D33A7C131526B80A16A362E096FD4079A6DA447FC592CE50E05C444F03F4DE25BC455446EB10265A6929854EAB3F755631C90267B50E2016F6B8C24401E3E0E13F1BC900E4A2A974AAD23E1A92F16F2A187> |-/seven <1C60D8A8C9B7A73DDC2846EC3FFE9D97F708F836AD4652517320EEF9C1457D81DFE2A37E2A269FF9A627B6A741B913B00490531A41C8B347> |-/C <1C60D8A8C9B64EDF7FCB1225CBEBAD7C2A1CDCAA154679A537BCF30C436AC0686DBF251E622CF18D32C29E14A13579E37F151EDC74261EA3C2645F3C009649E8FB800A09E17F1093EAEBAA6F4D561E521DEB52CBB9CC47D2A1DC16423790240EA0E7F9DA2BA7D79446F5CBA5E01E4CAFD0AFED04> |-/M <1C60D8A8C9B59F859BE36722F335C424A3959F3C40788D59DD8002721512B63F78C2CD40476BE632847058326A18680A51A56F350AFC4601E106D85D9935C71758FE4B99DBAD8FB00FF6547655EDC5ADFF53E68939F2E851D8568D22302C2C338F02446444A7B8C22A8A2420B3FB18D904D3E7> |-/Q <1C60D8A8C9B6079F6E02C9DA269270C5FCDED9146BB469F33CE6613B8C6C56187601C4763E04A25451AD4E7C9E186FD85AB83F3E30A17A58EBFBFA36DBA6CCE6C6E905E000287105EAFAEA0B660FE5E87063F9C3EAA64AEBD40CE32C9BEDA6F8C6D843B8D268C5D02CE259394A1EB422C484A5451B85781837883DA674CBBDFFFB8E> |-/V <1C60D8A8C9B6079F04A83E3B4E883805E50F0DF991CF8D253E7AC58EBBA67FB1D8E3B74B44AE939977C7855B691FDD2839D7955C25E1E1C4A5F8656B5FA0C006CB839E1339D47D3A599E0B9E9A0EC6884B72376B73C46E097A0F435E559D0069C3F87F> |-/bracketleft <1C60D8A8C9B81F2C36D8E73806322164F168F3E390041BCFDD43E533FD7FC74339F2B75EEC9B10D3B81F4C9B5F> |-/bracketright <1C60D8A8C9B81F2C36D8E73806322164DBB51B216257DA0F9A0B5E3BF60636EB3EFFFC65821B3952CF2758C6A9> |-/e <1C60D8A8C9B77FE2440C4A0C4012CA2ADDAA2063D74E7F1A056744D16DC4F1711CD9A18819F63D090F36F7759337998C39810BF5A75C4828A06DD1AF80A5B613D3D44E1887EDB74C939F0B6ED071D10A7C11B64F96C2949994CF7E72507E> |-/n <1C60D8A8C9B7A73DC54E0D6D91C3E91980CDB9ED8628529863FDA8E59433DE6741508E85BB48DEA8D8F35995C79E16FB246C14C08E968E06B7EB28A263EA4D02C2D4AC4FF358B280A76FE85394C58F344B6383A76E82DD831EC580F79F58C4C189013A273849481BB8E811BC56A157758889E377E0218E8E3AA75D3961996A62> |-/o <1C60D8A8C9B7A73D33B50B81AA1C79BFF5C80FF2E6B8582B3CBFC870793B8FCBB77F0EA55A311ED358B8FECB0DAF14839129AE21B31EDE6FF983A864436BE5880861C7AF605C2602EA8055F331AD0A14B46B75CF9DDA28DB> |-/s <1C60D8A8C9B7361F8817B24EDEBB3FEC23877BE06B4CEA431A203FA263480C82808DCDEF37434DC884CF47A95CFCA2EEFAE99363DF76BC32A4A07D0232E5A432177ACA5E94D85D520D9267F1BD03F3AA6F88055ECBD1847E79381F934A9F5A9CC398C1DBE6D1B6CA73CB7F71726529B6F74D3A0A410B63E551B4D3BB0E0FC526EE41AB7B0F71BEF97FB54247D7B1532BDEC7109C003CC2F9DC8E8468D906B41158ABD0EBEE0C4CFFBA60ED5114E2F3A6F07E68F4E4032CE723218BD2A56FB0E9C95C1EC44495195BACD012C08EA23526D3781F86E8D57E9389843E1A161250B27E692D1CC610434E460204D49E2F917C981F12C0F7E47A2C> |-/t <1C60D8A8C9B854D086439EA80B8393FEADC0052C70F648CAC1AE89BB317E735756E59E2E6F0095662D082F1C3CCBBEC180A0941B60E580CB7338163E763332C8A3E3C3B391BD27C4C84B1B4827> |-/u <1C60D8A8C9B7A73D33DFE69D77A124916B7E1247C1A9BF81A03F8ADE493085B97B716714DB79C7E9E35F4FCC1FEA9A2AD34D5DD72DDBDA28BEC83229FFB3DCB856708631257C0CA18B8CBF0BD48443F165C669304820FA055457C072B0393455C28F77520D28B094D4B8D54FD8> |-/minus <1C60D8A8C9B7E7C1AF2D8FDC8194CD280627469400F3168EF4DD6F92805D> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/BDEBCC+TimesNewRomanPS /ITAQMX+TimesNewRomanPS findfont ct_VMDictPut/BDEBCC+TimesNewRomanPS*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven 11{/.notdef}rp /C 9{/.notdef}rp /M 3{/.notdef}rp /Q 4{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 7{/.notdef}rp /e 8{/.notdef}rp /n /o 3{/.notdef}rp /s /t /u 9{/.notdef}rp /minus 128{/.notdef}rp]BDEBCC+TimesNewRomanPS nfBDEBCC+TimesNewRomanPS*1 [8.9303 0 0 -8.9303 0 0 ]msf93.0399 163.195 mo(0.02.55.07.5)[4.46515 2.23257 44.6202 4.46516 2.23257 44.4943 4.46515 2.23257 44.6193 4.46515 2.23257 0 ]xshBDEBCC+TimesNewRomanPS*1 [8.9554 0 0 -8.9554 0 0 ]msf155.045 175.145 mo(\177Q  [MeV])[5.05081 6.46579 2.23886 2.23885 2.98207 7.96143 3.9762 6.46581 0 ]xshBDEBCC+TimesNewRomanPS*1 [9.056 0 0 -9.056 0 0 ]msf79.6273 155.9 mo(10)[4.528 0 ]xshBDEBCC+TimesNewRomanPS*1 [5.4085 0 0 -5.4085 0 0 ]msf88.6844 150.491 mo(2)shBDEBCC+TimesNewRomanPS*1 [9.056 0 0 -9.056 0 0 ]msf79.6273 90.2438 mo(10)[4.528 0 ]xshBDEBCC+TimesNewRomanPS*1 [5.2827 0 0 -5.2827 0 0 ]msf88.6849 84.9609 mo(3)shBDEBCC+TimesNewRomanPS*1 [9.056 0 0 -9.056 0 0 ]msf79.6273 24.5875 mo(10)[4.528 0 ]xshBDEBCC+TimesNewRomanPS*1 [5.2827 0 0 -5.2827 0 0 ]msf88.6849 19.3047 mo(4)shBDEBCC+TimesNewRomanPS*1 [0 -8.8548 -8.8548 0 0 0 ]msf75.2274 93.0978 mo(Counts)[-5.90619 -4.42743 -4.42743 -4.42737 -2.46161 0 ]ysh.4 lw
1 lc
0 lj
10 ml
[] 0 dsh
true sadj
98.621 11.0032 mo
102.269 9.87115 li
111.325 19.8072 li
120.381 45.3401 li
129.437 59.1761 li
138.367 65.0881 li
147.423 77.0372 li
156.479 99.4252 li
165.535 119.927 li
174.465 128.983 li
183.522 131.876 li
192.577 133.386 li
201.634 138.039 li
210.564 146.341 li
215.721 152.88 li
210.564 144.579 mo
210.564 144.579 li
210.564 148.353 mo
210.564 148.353 li
201.634 136.404 mo
201.634 136.404 li
201.634 139.674 mo
201.634 139.674 li
192.577 131.876 mo
192.577 131.876 li
192.577 134.894 mo
192.577 134.894 li
183.522 130.366 mo
183.522 130.366 li
183.522 133.386 mo
183.522 133.386 li
174.465 127.725 mo
174.465 127.725 li
174.465 130.492 mo
174.465 130.492 li
165.535 118.795 mo
165.535 118.795 li
165.535 121.185 mo
165.535 121.185 li
156.479 98.5442 mo
156.479 98.5442 li
156.479 100.18 mo
156.479 100.18 li
147.423 76.4081 mo
147.423 76.4081 li
147.423 77.5392 mo
147.423 77.5392 li
138.367 64.7101 mo
138.367 64.7101 li
138.367 65.5912 mo
138.367 65.5912 li
129.437 58.7991 mo
129.437 58.7991 li
129.437 59.5541 mo
129.437 59.5541 li
120.381 44.9631 mo
120.381 44.9631 li
120.381 45.5922 mo
120.381 45.5922 li
111.325 19.5562 mo
111.325 19.5562 li
111.325 20.0591 mo
111.325 20.0591 li
102.269 9.74615 mo
102.269 9.74615 li
102.269 10.1221 mo
102.269 10.1221 li
210.564 148.353 mo
210.564 144.579 li
201.634 139.674 mo
201.634 136.404 li
192.577 134.894 mo
192.577 131.876 li
183.522 133.386 mo
183.522 130.366 li
174.465 130.492 mo
174.465 127.725 li
165.535 121.185 mo
165.535 118.795 li
156.479 100.18 mo
156.479 98.5442 li
147.423 77.5392 mo
147.423 76.4081 li
138.367 65.5912 mo
138.367 64.7101 li
129.437 59.5541 mo
129.437 58.7991 li
120.381 45.5922 mo
120.381 44.9631 li
111.325 20.0591 mo
111.325 19.5562 li
102.269 10.1221 mo
102.269 9.74615 li
.0161135 .957946 .906828 9.15541e-05 cmyk
@
104.093 9.87115 mo
104.093 8.82916 103.247 7.98419 102.206 7.98419 cv
101.165 7.98419 100.319 8.82916 100.319 9.87115 cv
100.319 10.9122 101.165 11.7582 102.206 11.7582 cv
103.247 11.7582 104.093 10.9122 104.093 9.87115 cv
0 0 0 0 cmyk
f
104.093 9.87115 mo
104.093 8.82916 103.247 7.98419 102.206 7.98419 cv
101.165 7.98419 100.319 8.82916 100.319 9.87115 cv
100.319 10.9122 101.165 11.7582 102.206 11.7582 cv
103.247 11.7582 104.093 10.9122 104.093 9.87115 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
113.149 19.8072 mo
113.149 18.7662 112.304 17.9211 111.262 17.9211 cv
110.221 17.9211 109.375 18.7662 109.375 19.8072 cv
109.375 20.8492 110.221 21.6942 111.262 21.6942 cv
112.304 21.6942 113.149 20.8492 113.149 19.8072 cv
0 0 0 0 cmyk
f
113.149 19.8072 mo
113.149 18.7662 112.304 17.9211 111.262 17.9211 cv
110.221 17.9211 109.375 18.7662 109.375 19.8072 cv
109.375 20.8492 110.221 21.6942 111.262 21.6942 cv
112.304 21.6942 113.149 20.8492 113.149 19.8072 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
122.204 45.2781 mo
122.204 44.2361 121.36 43.3912 120.318 43.3912 cv
119.277 43.3912 118.431 44.2361 118.431 45.2781 cv
118.431 46.3192 119.277 47.1642 120.318 47.1642 cv
121.36 47.1642 122.204 46.3192 122.204 45.2781 cv
0 0 0 0 cmyk
f
122.204 45.2781 mo
122.204 44.2361 121.36 43.3912 120.318 43.3912 cv
119.277 43.3912 118.431 44.2361 118.431 45.2781 cv
118.431 46.3192 119.277 47.1642 120.318 47.1642 cv
121.36 47.1642 122.204 46.3192 122.204 45.2781 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
131.261 59.1132 mo
131.261 58.0721 130.416 57.2261 129.374 57.2261 cv
128.333 57.2261 127.487 58.0721 127.487 59.1132 cv
127.487 60.1552 128.333 61.0002 129.374 61.0002 cv
130.416 61.0002 131.261 60.1552 131.261 59.1132 cv
0 0 0 0 cmyk
f
131.261 59.1132 mo
131.261 58.0721 130.416 57.2261 129.374 57.2261 cv
128.333 57.2261 127.487 58.0721 127.487 59.1132 cv
127.487 60.1552 128.333 61.0002 129.374 61.0002 cv
130.416 61.0002 131.261 60.1552 131.261 59.1132 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
140.191 65.0251 mo
140.191 63.9832 139.346 63.1382 138.304 63.1382 cv
137.263 63.1382 136.417 63.9832 136.417 65.0251 cv
136.417 66.0662 137.263 66.9122 138.304 66.9122 cv
139.346 66.9122 140.191 66.0662 140.191 65.0251 cv
0 0 0 0 cmyk
f
140.191 65.0251 mo
140.191 63.9832 139.346 63.1382 138.304 63.1382 cv
137.263 63.1382 136.417 63.9832 136.417 65.0251 cv
136.417 66.0662 137.263 66.9122 138.304 66.9122 cv
139.346 66.9122 140.191 66.0662 140.191 65.0251 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
149.247 76.9742 mo
149.247 75.9322 148.402 75.0872 147.36 75.0872 cv
146.319 75.0872 145.473 75.9322 145.473 76.9742 cv
145.473 78.0151 146.319 78.8602 147.36 78.8602 cv
148.402 78.8602 149.247 78.0151 149.247 76.9742 cv
0 0 0 0 cmyk
f
149.247 76.9742 mo
149.247 75.9322 148.402 75.0872 147.36 75.0872 cv
146.319 75.0872 145.473 75.9322 145.473 76.9742 cv
145.473 78.0151 146.319 78.8602 147.36 78.8602 cv
148.402 78.8602 149.247 78.0151 149.247 76.9742 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
158.304 99.3632 mo
158.304 98.3212 157.458 97.4752 156.416 97.4752 cv
155.375 97.4752 154.53 98.3212 154.53 99.3632 cv
154.53 100.403 155.375 101.249 156.416 101.249 cv
157.458 101.249 158.304 100.403 158.304 99.3632 cv
0 0 0 0 cmyk
f
158.304 99.3632 mo
158.304 98.3212 157.458 97.4752 156.416 97.4752 cv
155.375 97.4752 154.53 98.3212 154.53 99.3632 cv
154.53 100.403 155.375 101.249 156.416 101.249 cv
157.458 101.249 158.304 100.403 158.304 99.3632 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
167.359 119.864 mo
167.359 118.823 166.514 117.977 165.473 117.977 cv
164.431 117.977 163.585 118.823 163.585 119.864 cv
163.585 120.905 164.431 121.75 165.473 121.75 cv
166.514 121.75 167.359 120.905 167.359 119.864 cv
0 0 0 0 cmyk
f
167.359 119.864 mo
167.359 118.823 166.514 117.977 165.473 117.977 cv
164.431 117.977 163.585 118.823 163.585 119.864 cv
163.585 120.905 164.431 121.75 165.473 121.75 cv
166.514 121.75 167.359 120.905 167.359 119.864 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
176.289 128.92 mo
176.289 127.879 175.444 127.033 174.403 127.033 cv
173.361 127.033 172.516 127.879 172.516 128.92 cv
172.516 129.962 173.361 130.807 174.403 130.807 cv
175.444 130.807 176.289 129.962 176.289 128.92 cv
0 0 0 0 cmyk
f
176.289 128.92 mo
176.289 127.879 175.444 127.033 174.403 127.033 cv
173.361 127.033 172.516 127.879 172.516 128.92 cv
172.516 129.962 173.361 130.807 174.403 130.807 cv
175.444 130.807 176.289 129.962 176.289 128.92 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
185.346 131.813 mo
185.346 130.771 184.5 129.926 183.458 129.926 cv
182.417 129.926 181.572 130.771 181.572 131.813 cv
181.572 132.854 182.417 133.7 183.458 133.7 cv
184.5 133.7 185.346 132.854 185.346 131.813 cv
0 0 0 0 cmyk
f
185.346 131.813 mo
185.346 130.771 184.5 129.926 183.458 129.926 cv
182.417 129.926 181.572 130.771 181.572 131.813 cv
181.572 132.854 182.417 133.7 183.458 133.7 cv
184.5 133.7 185.346 132.854 185.346 131.813 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
194.402 133.322 mo
194.402 132.281 193.556 131.436 192.515 131.436 cv
191.473 131.436 190.628 132.281 190.628 133.322 cv
190.628 134.364 191.473 135.209 192.515 135.209 cv
193.556 135.209 194.402 134.364 194.402 133.322 cv
0 0 0 0 cmyk
f
194.402 133.322 mo
194.402 132.281 193.556 131.436 192.515 131.436 cv
191.473 131.436 190.628 132.281 190.628 133.322 cv
190.628 134.364 191.473 135.209 192.515 135.209 cv
193.556 135.209 194.402 134.364 194.402 133.322 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
203.457 137.976 mo
203.457 136.935 202.612 136.089 201.571 136.089 cv
200.529 136.089 199.684 136.935 199.684 137.976 cv
199.684 139.018 200.529 139.862 201.571 139.862 cv
202.612 139.862 203.457 139.018 203.457 137.976 cv
0 0 0 0 cmyk
f
203.457 137.976 mo
203.457 136.935 202.612 136.089 201.571 136.089 cv
200.529 136.089 199.684 136.935 199.684 137.976 cv
199.684 139.018 200.529 139.862 201.571 139.862 cv
202.612 139.862 203.457 139.018 203.457 137.976 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
212.388 146.277 mo
212.388 145.236 211.543 144.391 210.501 144.391 cv
209.46 144.391 208.614 145.236 208.614 146.277 cv
208.614 147.319 209.46 148.164 210.501 148.164 cv
211.543 148.164 212.388 147.319 212.388 146.277 cv
0 0 0 0 cmyk
f
212.388 146.277 mo
212.388 145.236 211.543 144.391 210.501 144.391 cv
209.46 144.391 208.614 145.236 208.614 146.277 cv
208.614 147.319 209.46 148.164 210.501 148.164 cv
211.543 148.164 212.388 147.319 212.388 146.277 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
98.621 10.7512 mo
102.269 9.74615 li
111.325 17.4182 li
120.381 36.0331 li
129.437 43.8312 li
138.367 50.8752 li
147.423 59.6791 li
156.479 73.3892 li
165.535 83.9542 li
174.465 91.8782 li
183.522 95.5262 li
192.577 99.5511 li
201.634 104.707 li
210.564 105.336 li
219.62 107.098 li
228.676 111.122 li
237.732 115.273 li
246.662 121.31 li
252.448 121.688 li
246.662 119.801 mo
246.662 119.801 li
246.662 123.071 mo
246.662 123.071 li
237.732 113.764 mo
237.732 113.764 li
237.732 116.782 mo
237.732 116.782 li
228.676 109.739 mo
228.676 109.739 li
228.676 112.506 mo
228.676 112.506 li
219.62 105.84 mo
219.62 105.84 li
219.62 108.355 mo
219.62 108.355 li
210.564 104.079 mo
210.564 104.079 li
210.564 106.595 mo
210.564 106.595 li
201.634 103.576 mo
201.634 103.576 li
201.634 105.966 mo
201.634 105.966 li
192.577 98.4192 mo
192.577 98.4192 li
192.577 100.683 mo
192.577 100.683 li
183.522 94.5201 mo
183.522 94.5201 li
183.522 96.6581 mo
183.522 96.6581 li
174.465 90.9982 mo
174.465 90.9982 li
174.465 92.8851 mo
174.465 92.8851 li
165.535 83.0742 mo
165.535 83.0742 li
165.535 84.7092 mo
165.535 84.7092 li
156.479 72.6342 mo
156.479 72.6342 li
156.479 74.0182 mo
156.479 74.0182 li
147.423 59.1761 mo
147.423 59.1761 li
147.423 60.1822 mo
147.423 60.1822 li
138.367 50.3712 mo
138.367 50.3712 li
138.367 51.3782 mo
138.367 51.3782 li
129.437 43.4542 mo
129.437 43.4542 li
129.437 44.3342 mo
129.437 44.3342 li
120.381 35.6562 mo
120.381 35.6562 li
120.381 36.4102 mo
120.381 36.4102 li
111.325 17.1661 mo
111.325 17.1661 li
111.325 17.6692 mo
111.325 17.6692 li
102.269 9.49414 mo
102.269 9.49414 li
102.269 9.87115 mo
102.269 9.87115 li
246.662 123.071 mo
246.662 119.801 li
237.732 116.782 mo
237.732 113.764 li
228.676 112.506 mo
228.676 109.739 li
219.62 108.355 mo
219.62 105.84 li
210.564 106.595 mo
210.564 104.079 li
201.634 105.966 mo
201.634 103.576 li
192.577 100.683 mo
192.577 98.4192 li
183.522 96.6581 mo
183.522 94.5201 li
174.465 92.8851 mo
174.465 90.9982 li
165.535 84.7092 mo
165.535 83.0742 li
156.479 74.0182 mo
156.479 72.6342 li
147.423 60.1822 mo
147.423 59.1761 li
138.367 51.3782 mo
138.367 50.3712 li
129.437 44.3342 mo
129.437 43.4542 li
120.381 36.4102 mo
120.381 35.6562 li
111.325 17.6692 mo
111.325 17.1661 li
102.269 9.87115 mo
102.269 9.49414 li
.95346 .916228 .0104982 .0011902 cmyk
@
104.093 9.74615 mo
104.093 8.70416 103.247 7.85919 102.206 7.85919 cv
101.165 7.85919 100.319 8.70416 100.319 9.74615 cv
100.319 10.7872 101.165 11.6321 102.206 11.6321 cv
103.247 11.6321 104.093 10.7872 104.093 9.74615 cv
f
104.093 9.74615 mo
104.093 8.70416 103.247 7.85919 102.206 7.85919 cv
101.165 7.85919 100.319 8.70416 100.319 9.74615 cv
100.319 10.7872 101.165 11.6321 102.206 11.6321 cv
103.247 11.6321 104.093 10.7872 104.093 9.74615 cv
@
113.149 17.4182 mo
113.149 16.3762 112.304 15.5312 111.262 15.5312 cv
110.221 15.5312 109.375 16.3762 109.375 17.4182 cv
109.375 18.4592 110.221 19.3052 111.262 19.3052 cv
112.304 19.3052 113.149 18.4592 113.149 17.4182 cv
f
113.149 17.4182 mo
113.149 16.3762 112.304 15.5312 111.262 15.5312 cv
110.221 15.5312 109.375 16.3762 109.375 17.4182 cv
109.375 18.4592 110.221 19.3052 111.262 19.3052 cv
112.304 19.3052 113.149 18.4592 113.149 17.4182 cv
@
122.204 35.9702 mo
122.204 34.9291 121.36 34.0832 120.318 34.0832 cv
119.277 34.0832 118.431 34.9291 118.431 35.9702 cv
118.431 37.0121 119.277 37.8572 120.318 37.8572 cv
121.36 37.8572 122.204 37.0121 122.204 35.9702 cv
f
122.204 35.9702 mo
122.204 34.9291 121.36 34.0832 120.318 34.0832 cv
119.277 34.0832 118.431 34.9291 118.431 35.9702 cv
118.431 37.0121 119.277 37.8572 120.318 37.8572 cv
121.36 37.8572 122.204 37.0121 122.204 35.9702 cv
@
131.261 43.7682 mo
131.261 42.7272 130.416 41.8812 129.374 41.8812 cv
128.333 41.8812 127.487 42.7272 127.487 43.7682 cv
127.487 44.8091 128.333 45.6552 129.374 45.6552 cv
130.416 45.6552 131.261 44.8091 131.261 43.7682 cv
f
131.261 43.7682 mo
131.261 42.7272 130.416 41.8812 129.374 41.8812 cv
128.333 41.8812 127.487 42.7272 127.487 43.7682 cv
127.487 44.8091 128.333 45.6552 129.374 45.6552 cv
130.416 45.6552 131.261 44.8091 131.261 43.7682 cv
@
140.191 50.8121 mo
140.191 49.7701 139.346 48.9252 138.304 48.9252 cv
137.263 48.9252 136.417 49.7701 136.417 50.8121 cv
136.417 51.8531 137.263 52.6992 138.304 52.6992 cv
139.346 52.6992 140.191 51.8531 140.191 50.8121 cv
f
140.191 50.8121 mo
140.191 49.7701 139.346 48.9252 138.304 48.9252 cv
137.263 48.9252 136.417 49.7701 136.417 50.8121 cv
136.417 51.8531 137.263 52.6992 138.304 52.6992 cv
139.346 52.6992 140.191 51.8531 140.191 50.8121 cv
@
149.247 59.6172 mo
149.247 58.5751 148.402 57.7302 147.36 57.7302 cv
146.319 57.7302 145.473 58.5751 145.473 59.6172 cv
145.473 60.6581 146.319 61.5032 147.36 61.5032 cv
148.402 61.5032 149.247 60.6581 149.247 59.6172 cv
f
149.247 59.6172 mo
149.247 58.5751 148.402 57.7302 147.36 57.7302 cv
146.319 57.7302 145.473 58.5751 145.473 59.6172 cv
145.473 60.6581 146.319 61.5032 147.36 61.5032 cv
148.402 61.5032 149.247 60.6581 149.247 59.6172 cv
@
158.304 73.3262 mo
158.304 72.2852 157.458 71.4391 156.416 71.4391 cv
155.375 71.4391 154.53 72.2852 154.53 73.3262 cv
154.53 74.3682 155.375 75.2131 156.416 75.2131 cv
157.458 75.2131 158.304 74.3682 158.304 73.3262 cv
f
158.304 73.3262 mo
158.304 72.2852 157.458 71.4391 156.416 71.4391 cv
155.375 71.4391 154.53 72.2852 154.53 73.3262 cv
154.53 74.3682 155.375 75.2131 156.416 75.2131 cv
157.458 75.2131 158.304 74.3682 158.304 73.3262 cv
@
167.359 83.8922 mo
167.359 82.8502 166.514 82.0052 165.473 82.0052 cv
164.431 82.0052 163.585 82.8502 163.585 83.8922 cv
163.585 84.9332 164.431 85.7781 165.473 85.7781 cv
166.514 85.7781 167.359 84.9332 167.359 83.8922 cv
f
167.359 83.8922 mo
167.359 82.8502 166.514 82.0052 165.473 82.0052 cv
164.431 82.0052 163.585 82.8502 163.585 83.8922 cv
163.585 84.9332 164.431 85.7781 165.473 85.7781 cv
166.514 85.7781 167.359 84.9332 167.359 83.8922 cv
@
176.289 91.8152 mo
176.289 90.7742 175.444 89.9291 174.403 89.9291 cv
173.361 89.9291 172.516 90.7742 172.516 91.8152 cv
172.516 92.8572 173.361 93.7021 174.403 93.7021 cv
175.444 93.7021 176.289 92.8572 176.289 91.8152 cv
f
176.289 91.8152 mo
176.289 90.7742 175.444 89.9291 174.403 89.9291 cv
173.361 89.9291 172.516 90.7742 172.516 91.8152 cv
172.516 92.8572 173.361 93.7021 174.403 93.7021 cv
175.444 93.7021 176.289 92.8572 176.289 91.8152 cv
@
185.346 95.4631 mo
185.346 94.4222 184.5 93.5771 183.458 93.5771 cv
182.417 93.5771 181.572 94.4222 181.572 95.4631 cv
181.572 96.5052 182.417 97.3492 183.458 97.3492 cv
184.5 97.3492 185.346 96.5052 185.346 95.4631 cv
f
185.346 95.4631 mo
185.346 94.4222 184.5 93.5771 183.458 93.5771 cv
182.417 93.5771 181.572 94.4222 181.572 95.4631 cv
181.572 96.5052 182.417 97.3492 183.458 97.3492 cv
184.5 97.3492 185.346 96.5052 185.346 95.4631 cv
@
194.402 99.4882 mo
194.402 98.4462 193.556 97.6011 192.515 97.6011 cv
191.473 97.6011 190.628 98.4462 190.628 99.4882 cv
190.628 100.529 191.473 101.375 192.515 101.375 cv
193.556 101.375 194.402 100.529 194.402 99.4882 cv
f
194.402 99.4882 mo
194.402 98.4462 193.556 97.6011 192.515 97.6011 cv
191.473 97.6011 190.628 98.4462 190.628 99.4882 cv
190.628 100.529 191.473 101.375 192.515 101.375 cv
193.556 101.375 194.402 100.529 194.402 99.4882 cv
@
203.457 104.644 mo
203.457 103.604 202.612 102.758 201.571 102.758 cv
200.529 102.758 199.684 103.604 199.684 104.644 cv
199.684 105.686 200.529 106.532 201.571 106.532 cv
202.612 106.532 203.457 105.686 203.457 104.644 cv
f
203.457 104.644 mo
203.457 103.604 202.612 102.758 201.571 102.758 cv
200.529 102.758 199.684 103.604 199.684 104.644 cv
199.684 105.686 200.529 106.532 201.571 106.532 cv
202.612 106.532 203.457 105.686 203.457 104.644 cv
@
212.388 105.274 mo
212.388 104.232 211.543 103.387 210.501 103.387 cv
209.46 103.387 208.614 104.232 208.614 105.274 cv
208.614 106.315 209.46 107.161 210.501 107.161 cv
211.543 107.161 212.388 106.315 212.388 105.274 cv
f
212.388 105.274 mo
212.388 104.232 211.543 103.387 210.501 103.387 cv
209.46 103.387 208.614 104.232 208.614 105.274 cv
208.614 106.315 209.46 107.161 210.501 107.161 cv
211.543 107.161 212.388 106.315 212.388 105.274 cv
@
221.443 107.035 mo
221.443 105.993 220.598 105.148 219.557 105.148 cv
218.515 105.148 217.671 105.993 217.671 107.035 cv
217.671 108.076 218.515 108.921 219.557 108.921 cv
220.598 108.921 221.443 108.076 221.443 107.035 cv
f
221.443 107.035 mo
221.443 105.993 220.598 105.148 219.557 105.148 cv
218.515 105.148 217.671 105.993 217.671 107.035 cv
217.671 108.076 218.515 108.921 219.557 108.921 cv
220.598 108.921 221.443 108.076 221.443 107.035 cv
@
230.5 111.06 mo
230.5 110.018 229.655 109.173 228.613 109.173 cv
227.572 109.173 226.726 110.018 226.726 111.06 cv
226.726 112.101 227.572 112.947 228.613 112.947 cv
229.655 112.947 230.5 112.101 230.5 111.06 cv
f
230.5 111.06 mo
230.5 110.018 229.655 109.173 228.613 109.173 cv
227.572 109.173 226.726 110.018 226.726 111.06 cv
226.726 112.101 227.572 112.947 228.613 112.947 cv
229.655 112.947 230.5 112.101 230.5 111.06 cv
@
239.557 115.21 mo
239.557 114.168 238.711 113.324 237.669 113.324 cv
236.628 113.324 235.783 114.168 235.783 115.21 cv
235.783 116.251 236.628 117.097 237.669 117.097 cv
238.711 117.097 239.557 116.251 239.557 115.21 cv
f
239.557 115.21 mo
239.557 114.168 238.711 113.324 237.669 113.324 cv
236.628 113.324 235.783 114.168 235.783 115.21 cv
235.783 116.251 236.628 117.097 237.669 117.097 cv
238.711 117.097 239.557 116.251 239.557 115.21 cv
@
248.486 121.248 mo
248.486 120.206 247.64 119.361 246.599 119.361 cv
245.557 119.361 244.713 120.206 244.713 121.248 cv
244.713 122.289 245.557 123.134 246.599 123.134 cv
247.64 123.134 248.486 122.289 248.486 121.248 cv
f
248.486 121.248 mo
248.486 120.206 247.64 119.361 246.599 119.361 cv
245.557 119.361 244.713 120.206 244.713 121.248 cv
244.713 122.289 245.557 123.134 246.599 123.134 cv
247.64 123.134 248.486 122.289 248.486 121.248 cv
@
246.662 128.983 mo
246.662 124.832 li
237.732 122.317 mo
237.732 118.543 li
228.676 117.663 mo
228.676 114.267 li
219.62 114.016 mo
219.62 110.745 li
210.564 114.77 mo
210.564 111.374 li
201.634 117.412 mo
201.634 113.513 li
192.577 111.625 mo
192.577 108.104 li
183.522 106.595 mo
183.522 103.45 li
174.465 102.444 mo
174.465 99.5511 li
165.535 94.6462 mo
165.535 92.1302 li
156.479 89.3632 mo
156.479 86.7222 li
147.423 83.4521 mo
147.423 80.6841 li
138.367 78.7972 mo
138.367 76.0302 li
129.437 70.1191 mo
129.437 67.7292 li
120.381 74.0182 mo
120.381 70.8732 li
111.325 93.5142 mo
111.325 85.3381 li
102.269 152.88 mo
102.269 125.965 li
246.662 124.832 mo
246.662 124.832 li
246.662 128.983 mo
246.662 128.983 li
237.732 118.543 mo
237.732 118.543 li
237.732 122.317 mo
237.732 122.317 li
228.676 114.267 mo
228.676 114.267 li
228.676 117.663 mo
228.676 117.663 li
219.62 110.745 mo
219.62 110.745 li
219.62 114.016 mo
219.62 114.016 li
210.564 111.374 mo
210.564 111.374 li
210.564 114.77 mo
210.564 114.77 li
201.634 113.513 mo
201.634 113.513 li
201.634 117.412 mo
201.634 117.412 li
192.577 108.104 mo
192.577 108.104 li
192.577 111.625 mo
192.577 111.625 li
183.522 103.45 mo
183.522 103.45 li
183.522 106.595 mo
183.522 106.595 li
174.465 99.5511 mo
174.465 99.5511 li
174.465 102.444 mo
174.465 102.444 li
165.535 92.1302 mo
165.535 92.1302 li
165.535 94.6462 mo
165.535 94.6462 li
156.479 86.7222 mo
156.479 86.7222 li
156.479 89.3632 mo
156.479 89.3632 li
147.423 80.6841 mo
147.423 80.6841 li
147.423 83.4521 mo
147.423 83.4521 li
138.367 76.0302 mo
138.367 76.0302 li
138.367 78.7972 mo
138.367 78.7972 li
129.437 67.7292 mo
129.437 67.7292 li
129.437 70.1191 mo
129.437 70.1191 li
120.381 70.8732 mo
120.381 70.8732 li
120.381 74.0182 mo
120.381 74.0182 li
111.325 85.3381 mo
111.325 85.3381 li
111.325 93.5142 mo
111.325 93.5142 li
102.269 125.965 mo
102.269 125.965 li
102.269 145.711 mo
111.325 89.2372 li
120.381 72.3832 li
129.437 68.8611 li
138.367 77.4142 li
147.423 82.0682 li
156.479 87.9792 li
165.535 93.3882 li
174.465 100.934 li
183.522 104.959 li
192.577 109.865 li
201.634 115.399 li
210.564 113.009 li
219.62 112.38 li
228.676 115.902 li
237.732 120.43 li
246.662 126.845 li
252.448 126.215 li
.694423 .677272 .637385 .738643 cmyk
@
100.634 147.347 mo
103.904 147.347 li
103.904 144.077 li
100.634 144.077 li
cp
0 0 0 0 cmyk
f
103.904 144.077 mo
100.634 144.077 li
100.634 147.347 li
103.904 147.347 li
cp
.694423 .677272 .637385 .738643 cmyk
@
109.69 90.8721 mo
112.96 90.8721 li
112.96 87.6021 li
109.69 87.6021 li
cp
0 0 0 0 cmyk
f
112.96 87.6022 mo
109.69 87.6022 li
109.69 90.8722 li
112.96 90.8722 li
cp
.694423 .677272 .637385 .738643 cmyk
@
118.746 74.0182 mo
122.016 74.0182 li
122.016 70.7477 li
118.746 70.7477 li
cp
0 0 0 0 cmyk
f
122.016 70.7471 mo
118.746 70.7471 li
118.746 74.0176 li
122.016 74.0176 li
cp
.694423 .677272 .637385 .738643 cmyk
@
127.802 70.4962 mo
131.072 70.4962 li
131.072 67.2261 li
127.802 67.2261 li
cp
0 0 0 0 cmyk
f
131.072 67.2261 mo
127.802 67.2261 li
127.802 70.4962 li
131.072 70.4962 li
cp
.694423 .677272 .637385 .738643 cmyk
@
136.732 79.0491 mo
140.002 79.0491 li
140.002 75.7791 li
136.732 75.7791 li
cp
0 0 0 0 cmyk
f
140.002 75.7792 mo
136.732 75.7792 li
136.732 79.0493 li
140.002 79.0493 li
cp
.694423 .677272 .637385 .738643 cmyk
@
145.788 83.7032 mo
149.059 83.7032 li
149.059 80.4326 li
145.788 80.4326 li
cp
0 0 0 0 cmyk
f
149.058 80.4322 mo
145.787 80.4322 li
145.787 83.7028 li
149.058 83.7028 li
cp
.694423 .677272 .637385 .738643 cmyk
@
154.844 89.6141 mo
158.114 89.6141 li
158.114 86.3441 li
154.844 86.3441 li
cp
0 0 0 0 cmyk
f
158.115 86.3442 mo
154.845 86.3442 li
154.845 89.6142 li
158.115 89.6142 li
cp
.694423 .677272 .637385 .738643 cmyk
@
163.9 95.0231 mo
167.17 95.0231 li
167.17 91.7526 li
163.9 91.7526 li
cp
0 0 0 0 cmyk
f
167.17 91.7521 mo
163.9 91.7521 li
163.9 95.0226 li
167.17 95.0226 li
cp
.694423 .677272 .637385 .738643 cmyk
@
172.83 102.569 mo
176.101 102.569 li
176.101 99.2994 li
172.83 99.2994 li
cp
0 0 0 0 cmyk
f
176.101 99.2991 mo
172.83 99.2991 li
172.83 102.569 li
176.101 102.569 li
cp
.694423 .677272 .637385 .738643 cmyk
@
181.886 106.595 mo
185.157 106.595 li
185.157 103.324 li
181.886 103.324 li
cp
0 0 0 0 cmyk
f
185.157 103.324 mo
181.886 103.324 li
181.886 106.595 li
185.157 106.595 li
cp
.694423 .677272 .637385 .738643 cmyk
@
190.943 111.499 mo
194.213 111.499 li
194.213 108.23 li
190.943 108.23 li
cp
0 0 0 0 cmyk
f
194.213 108.23 mo
190.943 108.23 li
190.943 111.499 li
194.213 111.499 li
cp
.694423 .677272 .637385 .738643 cmyk
@
199.998 117.034 mo
203.269 117.034 li
203.269 113.764 li
199.998 113.764 li
cp
0 0 0 0 cmyk
f
203.269 113.764 mo
199.998 113.764 li
199.998 117.034 li
203.269 117.034 li
cp
.694423 .677272 .637385 .738643 cmyk
@
208.929 114.644 mo
212.199 114.644 li
212.199 111.374 li
208.929 111.374 li
cp
0 0 0 0 cmyk
f
212.199 111.374 mo
208.929 111.374 li
208.929 114.644 li
212.199 114.644 li
cp
.694423 .677272 .637385 .738643 cmyk
@
217.985 114.016 mo
221.256 114.016 li
221.256 110.745 li
217.985 110.745 li
cp
0 0 0 0 cmyk
f
221.256 110.745 mo
217.985 110.745 li
217.985 114.016 li
221.256 114.016 li
cp
.694423 .677272 .637385 .738643 cmyk
@
227.041 117.537 mo
230.311 117.537 li
230.311 114.267 li
227.041 114.267 li
cp
0 0 0 0 cmyk
f
230.311 114.267 mo
227.041 114.267 li
227.041 117.537 li
230.311 117.537 li
cp
.694423 .677272 .637385 .738643 cmyk
@
236.097 122.065 mo
239.367 122.065 li
239.367 118.795 li
236.097 118.795 li
cp
0 0 0 0 cmyk
f
239.367 118.795 mo
236.097 118.795 li
236.097 122.065 li
239.367 122.065 li
cp
.694423 .677272 .637385 .738643 cmyk
@
245.027 128.479 mo
248.298 128.479 li
248.298 125.209 li
245.027 125.209 li
cp
0 0 0 0 cmyk
f
248.298 125.209 mo
245.027 125.209 li
245.027 128.479 li
248.298 128.479 li
cp
.694423 .677272 .637385 .738643 cmyk
@
gsave
258.03 1.74713 mo
67.869 1.74713 li
67.869 177.08 li
258.03 177.08 li
cp
clp
.629 lw
[2.5156 2.5156 ] 0 dsh
101.388 152.88 mo
102.269 145.711 li
111.325 85.4642 li
120.381 58.4211 li
129.437 43.4542 li
138.367 35.9072 li
147.423 30.7502 li
156.479 27.2281 li
165.535 24.4612 li
174.465 22.5751 li
183.522 21.0652 li
192.577 19.8072 li
201.634 18.9272 li
210.564 17.7952 li
219.62 16.7892 li
228.676 15.9092 li
237.732 15.2802 li
246.662 14.6512 li
252.448 14.2731 li
.512627 .963104 .344335 .174105 cmyk
@
.4 lw
[] 0 dsh
98.621 152.88 mo
98.621 1.94714 li
252.448 1.94714 li
252.448 152.88 li
98.621 152.88 li
.694423 .677272 .637385 .738643 cmyk
@
grestore
154.718 16.0342 mo
173.837 16.0342 li
.0161135 .957946 .906828 9.15541e-05 cmyk
@
156.542 16.0342 mo
156.542 14.9932 155.697 14.1472 154.656 14.1472 cv
153.614 14.1472 152.769 14.9932 152.769 16.0342 cv
152.769 17.0762 153.614 17.9211 154.656 17.9211 cv
155.697 17.9211 156.542 17.0762 156.542 16.0342 cv
0 0 0 0 cmyk
f
156.542 16.0342 mo
156.542 14.9932 155.697 14.1472 154.656 14.1472 cv
153.614 14.1472 152.769 14.9932 152.769 16.0342 cv
152.769 17.0762 153.614 17.9211 154.656 17.9211 cv
155.697 17.9211 156.542 17.0762 156.542 16.0342 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
175.661 16.0342 mo
175.661 14.9932 174.815 14.1472 173.774 14.1472 cv
172.732 14.1472 171.887 14.9932 171.887 16.0342 cv
171.887 17.0762 172.732 17.9211 173.774 17.9211 cv
174.815 17.9211 175.661 17.0762 175.661 16.0342 cv
0 0 0 0 cmyk
f
175.661 16.0342 mo
175.661 14.9932 174.815 14.1472 173.774 14.1472 cv
172.732 14.1472 171.887 14.9932 171.887 16.0342 cv
171.887 17.0762 172.732 17.9211 173.774 17.9211 cv
174.815 17.9211 175.661 17.0762 175.661 16.0342 cv
.0161135 .957946 .906828 9.15541e-05 cmyk
@
.694423 .677272 .637385 .738643 cmyk
%ADOBeginSubsetFont: ITAQMX+TimesNewRomanPS AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBDEBCC+TimesNewRomanPS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/nine <1C60D8A8C9B7A73D33855495D9933548CAEBCC99DCF7AB3BB8E9059071857DB9430B23426E6D6123291A4B6E2D5B9EFC1AAEB88E0A133C2BD24EF406FB30624C02344CCF6D3D463EDA7733F28DBAE0ED33CA9D6C96284BA4DA326C2BF04612848D192945EF99F3C915D01AA9016B57B70DE2D2D7D072> |-/Z <1C60D8A8C9B7D8BE6A6C4306EA564EF604D5FBACA04E93B95E64204EB112ACB55BC444A9218C5A1A6CEA19FA64C75F273D9C46A2EA6D00FB944A1FBC3CC397535A9C35D81A889A614B> |-/r <1C60D8A8C9B81F2C46F55B66694B115BD121138C19EA6BB9FDEC19598F770072F51D5A41ABEEF64C2EFB3D34AEC6538C0369C4D60825FCFA8F9BC491AD1E51614DE6C39F278C0428320D60B6B2A4FC28EE9886B8C0DFE33672D30A2E3A95CB1E3069AB76213D54C2F75C7C32E576B43F4E07EA5DCBEC65C3E55A274406F05764> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBCC+TimesNewRomanPS /Encoding getdup 57 /nine putdup 90 /Z putdup 114 /r putpop%ADOEndSubsetFont
/BDEBCC+TimesNewRomanPS*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven /.notdef /nine 9{/.notdef}rp /C 9{/.notdef}rp /M 3{/.notdef}rp /Q 4{/.notdef}rp /V 3{/.notdef}rp /Z /bracketleft /.notdef /bracketright 7{/.notdef}rp /e 8{/.notdef}rp /n /o 2{/.notdef}rp /r /s /t /u 9{/.notdef}rp /minus 128{/.notdef}rp]BDEBCC+TimesNewRomanPS nfBDEBCC+TimesNewRomanPS*1 [5.0311 0 0 -5.0311 0 0 ]msf178.618 13.7701 mo(90)[2.51605 0 ]xshBDEBCC+TimesNewRomanPS*1 [8.4271 0 0 -8.4271 0 0 ]msf183.647 18.8019 mo(Zr)[5.1489 0 ]xsh154.718 26.8511 mo
173.837 26.8511 li
.95346 .916228 .0104982 .0011902 cmyk
@
156.542 26.7881 mo
156.542 25.7462 155.697 24.9022 154.656 24.9022 cv
153.614 24.9022 152.769 25.7462 152.769 26.7881 cv
152.769 27.8292 153.614 28.6752 154.656 28.6752 cv
155.697 28.6752 156.542 27.8292 156.542 26.7881 cv
f
156.542 26.7881 mo
156.542 25.7462 155.697 24.9022 154.656 24.9022 cv
153.614 24.9022 152.769 25.7462 152.769 26.7881 cv
152.769 27.8292 153.614 28.6752 154.656 28.6752 cv
155.697 28.6752 156.542 27.8292 156.542 26.7881 cv
@
175.661 26.7881 mo
175.661 25.7462 174.815 24.9022 173.774 24.9022 cv
172.732 24.9022 171.887 25.7462 171.887 26.7881 cv
171.887 27.8292 172.732 28.6752 173.774 28.6752 cv
174.815 28.6752 175.661 27.8292 175.661 26.7881 cv
f
175.661 26.7881 mo
175.661 25.7462 174.815 24.9022 173.774 24.9022 cv
172.732 24.9022 171.887 25.7462 171.887 26.7881 cv
171.887 27.8292 172.732 28.6752 173.774 28.6752 cv
174.815 28.6752 175.661 27.8292 175.661 26.7881 cv
@
.694423 .677272 .637385 .738643 cmyk
BDEBCC+TimesNewRomanPS*1 [5.0311 0 0 -5.0311 0 0 ]msf178.618 24.587 mo(92)[2.51605 0 ]xshBDEBCC+TimesNewRomanPS*1 [8.4271 0 0 -8.4271 0 0 ]msf183.647 29.6188 mo(Zr)[5.1489 0 ]xsh154.718 37.6682 mo
173.837 37.6682 li
@
153.083 39.3032 mo
156.353 39.3032 li
156.353 36.0331 li
153.083 36.0331 li
cp
0 0 0 0 cmyk
f
156.353 36.0331 mo
153.083 36.0331 li
153.083 39.3032 li
156.353 39.3032 li
cp
.694423 .677272 .637385 .738643 cmyk
@
172.202 39.3032 mo
175.472 39.3032 li
175.472 36.0331 li
172.202 36.0331 li
cp
0 0 0 0 cmyk
f
175.472 36.0331 mo
172.202 36.0331 li
172.202 39.3032 li
175.472 39.3032 li
cp
.694423 .677272 .637385 .738643 cmyk
@
%ADOBeginSubsetFont: ITAQMX+TimesNewRomanPS AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBDEBCC+TimesNewRomanPS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B6079F1E4BF1D2F1A5C4F07672F4BA2C53186AAC39586E442D219F5855CE572BEAEE72C973AB935CD85279B4863B8A8B46CBB4EBAEB1BE1B4D0BB20AEA3C9965A91B61EC38596D49AC6AC0FB80A872DA6BC5C443F756C1864E6598C431E31C4915F4E3541E0E251FA78C26836D973D0123EED752ACDD18C0C08A> |-/c <1C60D8A8C9B77FE244009C258FADAA07F014C16C097F8130814B1D703E2A5F19C8BD209AEDF2FB4EDCDF4835EE7275E7F60FE6D8F649BAEE17C6D8CF05FEAFD1116FE31A6F8286493CE8747BAB981B86C68A41D9F8EBD4D0FDEC0082> |-/f <1C60D8A8C9B81F2C46F55B665860BF8109833FFA08C17B8ABAA8CD380D617A385AEC765D5F88687BDD8005D62D36DEA7CED94707CB12763943E8C21CB5D655A038F91F910BCFBF6D5C74BA318939B33B146F62EA6463418923462235E1B4D4608C> |-/i <1C60D8A8C9B854D0888002323AC88DE1D732A0B438F52A36AC4C8235B50195661EE4F4F056C00FB5169E51E2DC2CFF59762708862D2CF2C9EE7C48914B2654119B06323F8628EDED75E67065F91DA9A509BD0525258AACECE39D658FE1D17161E00965A567F64B9D149E83A8E009> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBCC+TimesNewRomanPS /Encoding getdup 68 /D putdup 99 /c putdup 102 /f putdup 105 /i putpop%ADOEndSubsetFont
/BDEBCC+TimesNewRomanPS*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven /.notdef /nine 9{/.notdef}rp /C /D 8{/.notdef}rp /M 3{/.notdef}rp /Q 4{/.notdef}rp /V 3{/.notdef}rp /Z /bracketleft /.notdef /bracketright 5{/.notdef}rp /c /.notdef /e /f 2{/.notdef}rp /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /s /t /u 9{/.notdef}rp /minus 128{/.notdef}rp]BDEBCC+TimesNewRomanPS nfBDEBCC+TimesNewRomanPS*1 [8.5529 0 0 -8.5529 0 0 ]msf178.616 40.4355 mo(Difference)[6.1752 2.3777 2.84805 2.84805 3.79749 2.84805 3.79749 4.27646 3.79749 0 ]xsh.629 lw
[2.5156 2.5156 ] 0 dsh
154.718 48.4852 mo
173.837 48.4852 li
.512627 .963104 .344335 .174105 cmyk
@
.694423 .677272 .637385 .738643 cmyk
%ADOBeginSubsetFont: ITAQMX+TimesNewRomanPS AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBDEBCC+TimesNewRomanPS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/a <1C60D8A8C9B77FE24414BFDEF4E80C4D790B946AE076B4646C6C07F81B63278106ED9FB404501811C1433BB554E5AF6B151556DC4888DE61E0E453C2D867FF5FA12CB2514FA57D4B2D64E56AC0AA25BEB67F6A8B72896256DD560EDD238056F1D454F3C5692E86E47B5E20E9285262829D061BA455239B9A260858B02489FEE0CDAE3B3615E7DEF515A3A31ACC4D34C45CBF8EF3D4BEFE8929ABF7E29056B502C7AD2297ABAD0E2B16AFCA275D51DC4912316BEE36D646955956EC70DA4CEFF7F44C20> |-/d <1C60D8A8C9B7A73D33D910C0ACF53AD6F42F01284C649BDAE51976E56022F2B4FF67866F5FFAAE991D2FE95B6A3269750D6D28FEA3386AF5F1BC91895FF64FAF866D9F578633EC86294552548FB9F2149F1A58E9460FE5F18391C90B8CD3D2E4DA7CFBE445A6D12B12BB75D90E7A342C2D2697650AAA0DFE9D43073FC7096E7B571F5D9544F410220D> |-/l <1C60D8A8C9B854D088800233608AB7E159853CDC033D68C9DCEBDCCC1C82ADBF3176A6831F1DAFFBB44FE9EF2050184C8695C4469941A21B63DD60DB9DA8EC0CF46B8C9B9638> |-/m <1C60D8A8C9B6FF86DEBE529995F26ADC252ABAF4F8ABCE39F6B951A24C8682F3B72A552C5D46A333AAEC49746F27474921C947B29E9EEE21EF479E8AC4CBA64B9B4BF4B54D7069EE8C71930A689A0AC30AA5DB406CB2F2DF67D1DFA36762A8298043AAD8738E3C2E6D8E87DCF89210EA6A7696675667850CACB8BD85BF1A9C23A6EB480778B459116760FD79DE8BA673C0A52BBAEAA003DFFA86FA6EC61FB9955126552099FD6C946BD155266FCC648BAFF24A5063CAAF26> |-/v <1C60D8A8C9B7A73DDC2846ECA40B97262C2AD14A2805EAD1E69076CD0E0A7D5B4EEC34584C5BC022D19B45F95A7939DF48B89DED6E78C4A11E77B84FBF230D99DA378F51E7277EE59B8DF5B130BFC334011C29B5D3A16B2075E37BAFD09D62E3053EF784A2ADF8D41EDBBF> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBCC+TimesNewRomanPS /Encoding getdup 97 /a putdup 100 /d putdup 108 /l putdup 109 /m putdup 118 /v putpop%ADOEndSubsetFont
/BDEBCC+TimesNewRomanPS*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven /.notdef /nine 9{/.notdef}rp /C /D 8{/.notdef}rp /M 3{/.notdef}rp /Q 4{/.notdef}rp /V 3{/.notdef}rp /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /d /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u /v 8{/.notdef}rp /minus 128{/.notdef}rp]BDEBCC+TimesNewRomanPS nfBDEBCC+TimesNewRomanPS*1 [8.5529 0 0 -8.5529 0 0 ]msf178.616 51.2524 mo(Cumulative sum)[5.70485 4.27644 6.65416 4.27644 2.37772 3.79749 2.3777 2.37772 4.27644 3.79749 2.13737 3.32715 4.27644 0 ]xsh178.616 62.0693 mo(of difference)[4.27644 2.84805 2.13823 4.27646 2.3777 2.84805 2.84805 3.79749 2.84805 3.79749 4.27646 3.79749 0 ]xsh.4 lw
[] 0 dsh
186.414 143.951 mo
185.157 141.435 li
183.899 143.951 li
185.157 141.435 mo
185.157 151.372 li
134.217 109.613 mo
132.959 107.098 li
131.701 109.613 li
132.959 107.098 mo
132.959 137.41 li
@
%ADOBeginSubsetFont: ITAQMX+TimesNewRomanPS AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBDEBCC+TimesNewRomanPS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/plus <1C60D8A8C9B7E7C1AF2D8FDCE9D340212A1593AF3894EEEE1D3BC6FD21DB82D7516964E1610DA2EAC9958A8B8351729C3C1AEB> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBCC+TimesNewRomanPS /Encoding getdup 43 /plus putpop%ADOEndSubsetFont
/BDEBCC+TimesNewRomanPS*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus 2{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven /.notdef /nine 9{/.notdef}rp /C /D 8{/.notdef}rp /M 3{/.notdef}rp /Q 4{/.notdef}rp /V 3{/.notdef}rp /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /d /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u /v 8{/.notdef}rp /minus 128{/.notdef}rp]BDEBCC+TimesNewRomanPS nfBDEBCC+TimesNewRomanPS*1 [11.0685 0 0 -11.0685 0 0 ]msf119.501 147.095 mo(2)shBDEBCC+TimesNewRomanPS*1 [6.5405 0 0 -6.5405 0 0 ]msf125.035 140.555 mo(+)shBDEBCC+TimesNewRomanPS*1 [11.0685 0 0 -11.0685 0 0 ]msf167.297 149.485 mo(4)shBDEBCC+TimesNewRomanPS*1 [6.5405 0 0 -6.5405 0 0 ]msf172.831 142.944 mo(+)sh1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: SBTAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBDEBBZ+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/percent <1C60D8A8C9B6B41CC7B7C23F654D8876BCF8210DB8E537449FC21E454F6BFC6A033D6264FCB9BA5C79C4E7AA7227BD3E1DE864D7864C7B18726524232E8431D8253A76C435C89541EA478453FEECDF6C9E27B0BB0EE977A12009EF6F2CDD847AFB437D494D039B0F49232B38E2277C2A8CAC5D1C4F6352623248C100A575E3C3A6A5824D0D0713CA3421F744402B75AFFC898E79686E10CC7D5C2F5C93F81A756FFC15AEA3877E726C38C497DC546B3283280F5FFDD2D1A096C544EE7DCBE6A55141B2D058A7727D561809ABCC814E7B08A994678E8486E5E8226EE68BB842C2584BF5C1E0231A52F647B814B3CF8853CC9D613153C972BD44D64163567FD498C84324779F05A69DA29DFF0309F46A3F18DFB876897072454E50FF70C99203A28974AA24B2F2AD0BF65FACA902CFE3A0967B21> |-/hyphen <1C60D8A8C9B81F2C3AED63678C15FF4B0D41EAF1ADF08534F78C6CFD85> |-/period <1C60D8A8C9B8707CABA78EB744DAD228E94EA6790A3CF5471A14CA1EC74457D34EB30A52B7D5CE690F230DA3> |-/seven <1C60D8A8C9B7A73DD6FE362CD24F05334B0EB647AEFE5409105064A3E2149E3F071B4B7682CB4AAE846128CC40E4FE81E9AE8C264167A3B3D819A723> |-/G <1C60D8A8C9B6079FE80B2D9B8A220BABE8A5775155D5AEE67EA9CE80530F42678BB7923C2E1998D5A150C054ED90E9D960696B97F4DB8EA42B60C13ED3831BAE2B146B775564D2359A7EC713509A43C5C5E3539551C39DB899CD95573B1D4F19BE1759C57CF1BCAA6FB7D841F4C17766A5D35D204457A8F7FAA27C0DD08A35CD68D893853416989C0D7266D1AB8433FCBD83529F03E02AAB3CCA8AF06110C60DDAA381BF4BF975C41ABF718C730E643CFDF62ABFA9468C> |-/M <1C60D8A8C9B59F859BE0FB9A2A0F7654C6EDCAEDEE9F7FF916442D9C9F4ED6F42D0588BBB70AFF4A34C797748BF897F607B52C72A4CB4A45FE66E245A32A75D88FD8959E00389A6DBAED16321CC2D91DF069B6D6467D128CC5B30A96938452FCD034FAF7C4DC50E3464B901F68B77945A36B587B81F6A85C08C5E954DCBEA7AEB21BCCFA49> |-/Z <1C60D8A8C9B7D8BE6A6EDEC9185C38B8A1B4E98DDBA0ADD0EBC62DF4F1DF2AC115152950B1B4300CAF5FD3A9831ED4BE2B0CBABB56F1E7F1E4D47831FA59792540FD9554FFC78A64DC234E66A3D7> |-/a <1C60D8A8C9B77FE2B8A4D222FB41F47F459CA0D95123D06ECF654AB05FF5B6DC144FC9BBEC366E5ECC063C78F59640CE32DD9D219C4F4385FAEDBC60FF334CB1D3BF02D9F353F73914E29D9DD64FAA28B45E23265BD78A90B345EFEAD972A0D93CE817026DBF17DB9E8E49AD8C2AF4FC6486D49F260206F186E614E3D16B2F4AD46463A28F92ED5F2851044761192B9ADCF8B12C73A96A7E57C5841BD16A930132DACDF469EE0C2A8F85A167570E289B5609FF9CB20DD38C9C84A9BB9FC8A7014AC491483F6C> |-/b <1C60D8A8C9B7A73DCF483CC3D064C5FA3DCB4FE14F64E061FC6B7B327BD3AD170E4E134821E89959D7FC86E9160C1887FE9D1E5C6528E6DF501B7B2F3F30D0CEE6E0ECDE5FBEA2BBABC11DF1E31664808113184F8240E66E326CF8F60725DAFAA94AA48A85FA298CB9ED7FFADEF21D27A3E79BDB2F75A75EA736FD59CC6559DB85761C885E021EFCF09E24B9> |-/c <1C60D8A8C9B77FE2B8B3EAC4BBDE029BAC315D1866DD79216DBC0D30C20B16F949C4DACB51911E080D5D4FADB2A127C4AB23B312E9F44F985AA21BA1A9B71EA7AE21C439E05A319047A6D64BC1D4392480160430400AFA5C943510A8521B80B0990CB49D8F01EE3F> |-/d <1C60D8A8C9B7A73DCF5C5F7CCFE1224745C14DED045144DECBED335D8767365A686119923BC683874F138A812E24882366A564440105A4DC036664F6BE736287F87B295D2920E5B8EA5128E5E6C4D3D8CC4EF499D5F82793394C8A44BB4BC5B324694DE039E82E3C3E95CCEA761C759B9AB2F813EF75023CD818EA7E49BFA40067FB96C397B29CD7920172CF32CEB2D7D6BA2C2C243F80C59229B326C2E018A09BBC01E8E5EAF27058ED024F330852F9551733A92CF8DD2FDE72DD73A6AB5C5124E5F56317BB270B722C0F9A2DB91EC3> |-/e <1C60D8A8C9B77FE2B8B0813537CAE403B54DB40537D3BCE3A721EBABA194412EC3061B00A07EF9497D2BA0393994B5BAD3D53481E4076AC8BDD976CDE1D7C869C749BF31CD9AA8D8775C17BFBC48988132FD7543B8680B068C59E2A9123C08B9AC1B> |-/f <1C60D8A8C9B81F2C46F2EFDEFE0CB59F321E43BFD6E82BCAAF0597468DCF77C72CE9F4FF44E681C46DF934E6F13477EDB282AE0A0AEB3C1EAE1FE7BD0F6DE854793C6EBB102BA640EE2A1937B205F1275AE2A18BEEEA6F56A75ACE6F8742D16A82839984> |-/g <1C60D8A8C9B7A73DB582976F6FA2EE84F51D64198201D65DA0379D449296CB33756AB3A7AE8A175ECCFBAEFE2D4D26FE981086B935FAC40322E1F0B8F7350D4069F2282387985119CD3420DA7C6AF69B6593DDE216B952D8FCDCBEF2F469E8089D575BA41CC65444D1B22A9D24CFC1E970C8B6BEDF22A18DB852FFB88FE3E61676AF1B587C8BEDC7F57FDC2C2A66C537084478A0CE11D64537C41EBBD5BF312EA203B1D25DC925907A26C5096A56920B8D980F1FDE4021D766D9EBB9E2D5040E1243BA22D72996312BD29C454816BAAC378D28EAD1B4E006AFB191F0E63614E1C1D12BF3C0816D46C6B4BFA439751F894732123CB9417F879A9079FEB665894A238DC5E00C5560672D49ED3BE797BB9B40B81D47DC4D6525BAC3E19A2463521FF7137CAAF2A9FB5F4F7C0D469F6100DFA27CAFCE39CE1E106B3138E3B02A642CB6CBDE836A606594170908768F9F84598AA082C678AA176A30FCE7778326054A4DB4C2521DC0835CAFB81BC8AFB272F07932AA37EF69999C6D26587244DB681D773B8265D77C46AB4A99012FE89850D5F97C81D2ACDC98A50506471087EB40F5> |-/h <1C60D8A8C9B7A73DC549024A8346FEB2B78E908B5A6E113B6B1D9F55576FB6430AA363CC7EA7A85866229D47A648E16050AC3817C69AC198992A95DC887E9C2F4E126428A388941BC547CF3DFD3AF002591B6C465CE80F6B0C8E3BF1745FFB044EE609634601B3F272E0A2A1613C8D3DAD607A9DF002A5DBDCD953AE67BA74F625AAC084AEBD78F5D55004D7E5DC895C1EC4CADD91BABB3BE394835C4CCB41B4BC3CDD> |-/i <1C60D8A8C9B854D08887A954377F4C214D4B21F7492A7553FF39CC630E801180DD16566EA992053D08DFDDD90B69C61E00DD73FA9F14D9F9BA0BA5DE6F463B9913A4C5B8DB11D33C1FDD97C4AED671CB9420D4160C0D8849042FEC7B7C3AD6164404608E93E91AD41C497AA4F0BFEC99AE40E5> |-/k <1C60D8A8C9B7A73DC549024AEE55A01243B0ED1B2825DB74E3D4409DAB03360E64EE70A07ED7B69F115EEF98820D21F1DE6EF3BB4358612BA07FC9A40921C0AD30EF197C3D695EFDC35D3C9730116E52E0ABEFC9769B9302392F123FDEAA4AA885495C7D34579141F0B531400B42BB4E124EADD24EC34F713FF7466019E554EC1582FC6D1F609CBE080383D47963691E73E752C0BDF5CFFA1CA9F764FD810298046BFCBC263AE7BCB74C096697F8A00B5877DC20F2A2> |-/l <1C60D8A8C9B854D08887A955C7D68D8C5333C31878F574AA9AE5E3E7AADBE1B3A329F6AE772A2FA9E3BCD7AD6B2EB2F08C5C060E81EC0A70F41E9D6D0E7B19D3FEF21F30C39B12829A5A4E4EDD48F68C41B6A233A2DBED> |-/m <1C60D8A8C9B6FF86E3B590DB9FE94810D7AFBFE7B946F15ADC4969344E90E1A3F6BB0EC423A0839831AD6C986649A08BE59C9A3AF60608A974950B299379DB00149450A78653D6D4B9B18966FB51AC5B75CCA0334B3300F064709EE5249490C1CB7C6E6F7A3DBD6837889932B38C16FA553F6A7BD9185FFB7638767BBEB1CC928CF2A5534FC32F6F3027FAF68DC8EE9A75EC980BD894ADC4F0B26421A336F0F6A40AAD70D4278736A8FEA511C2ED4A971DB961B998B0AA6DA2144859946854D246CD2A6E94B7321CC1214550> |-/n <1C60D8A8C9B7A73DC549024A80DEC09E4F713BEC6C634F1E9284F6FC7263711D03C47F22A203EB41F88268C104BC4A61C7649DA42D5BE18FE7F731730EB4D130993D14FEE046DD67E78C9CE5C5598D396AB18A5366D9E71D2D6A292A91089ACF40B09098B729C4807DB1C9D54B7EE1602D3D091D4525D3E7868AFA4B4D0DEB009172C2D67F26ED44CA4931A6533F30AB34> |-/o <1C60D8A8C9B7A73DCF4402F5174BF7DD0D28D0C5665CB34A93F0BF7A993E7B76B394E0DD4E0D515EE382B893A080E29B40A4402A4A406056947B5B2334F6D5909CCB56B0284CEFC066661E9D6B7471673D105428B9DFDD7F> |-/p <1C60D8A8C9B7A73DB581186A9391F1059D96F459FFDB82B44DD4DA245FA507D024F28401075285D307468CE0D757751AAB4F3490756973E462106B10BD7663199C4B8A27D5695A680192DE86699DAAF1A89717FDB65265476969999FB7D7847B55845008C66520A977913643311D83941F927D5B958DBE761028866277B01C9604CB3013C82C039B9AE8C95A3C2834B9ED8E05831C8156944A7F9B872094AF1AB63EB96F8DF66A491A85E4F72D480F637D538DE8> |-/q <1C60D8A8C9B7A73DB5811938DD329AF571F14FFDE692A057FCB729720A5BED4D1F9C0C23BDB1CB452F40EB6D848BE0932F4C760F5C2503004914FFB4B67682FA186AE228665B2BFEA6ACC885BEC05363FF79301DC87EB9E5C026E33B1707B560B235E300E90D1225B3F5646ADDE05DCB20F259A4A8F9EE35B417CA23FCC315BAD2FB6734C0B8BCA0E27A3A137C64206716203345A864EDB66059A017842F1314A9089CC31918917957F569> |-/r <1C60D8A8C9B81F2C46F2EFD1B3B81533015C6076AEA2DF2F336244DA608D0666A9C39147579BE5F84064BA5DCF6CD4C576D0177C42EAE7438D00AB1D65956107D443F0AD6F08A63F5306BE8A1920B3CB273D9CF24739F3E4740FB53EC981D22501D5AF8E600BA9EEBFA742EC328561AB6E257A9B7C3C0B4F8CAC20D46ECDF05FEB5C54162C09AD2C0169673C> |-/s <1C60D8A8C9B7361F743FE5C092782516B89C667F24852F2833C914D372741C204CB19829CF798EC00B6F60FD56301EF9B4136E1F422FAA9773C81ADFC08AFD24624819F92289BABB5D2A560D29B4C37B5C72F295B1A8757B2DDC4F96A3A7A76D5B8850E9D3B3108E173E7C2AC94ED9F5B4EBB2AC4F74997A581EAA1D8190963213A6DBA3FD99B4DDDF91DEB606EB29DAC3E030DB9A2BEA3B60C98F55A0A9B8097DA00FD849056413A4E04E950801ED07C405C45837491E4864754EBADCC32B5232850305BAEEDA0A345554138E3B49E2F7260D37E80E4C37FED6327D7438DA6B2E0355D0043D6795C50CA3> |-/t <1C60D8A8C9B854D082F829CADA24029904B667043F82AAF5798ADB1AF63787A08D89C04AC22E998B93D82023FC776DB3B03794FD10AD1A9169D67270B70CC8030C1164B605608F8ED713A3CC4AFDDB0825DD3A8B4DD78D9148075B5FF6> |-/u <1C60D8A8C9B7A73DE1FEDB846BC597269D9E0C51D8C22F2B722B34AEBAF190658C0559601B266D7A25A55FD43DDD5BEFD1643FDA15DB9307B56B392B5AC68F81B580F46B71CB6DE1A21AE03B91093587C26F113B0055E84FDB8C5EDADEE628F85456B6D1B0C90F3F4C6B66407F7C61F465E76A627C6E1AC486C9BC9506FCF303D0A507D5D7D5D700213EA098FC6A864FC4203B659E> |-/v <1C60D8A8C9B7A73DDC2846ECA263567D5FF766DAF6EDECBDA59981A2B8D852D5F3C735E0CB09E278E085C85902E93B6730AC94976F06C86CE79902DFE3D63F4327D345589E5D6D8E4470DC068DE92C7775CDBCE234CF63D9048B83B5B8225EB38A3E7FD244643B093F0131528FD6DE23> |-/w <1C60D8A8C9B6079F073CF9E9FD4DD755103DBBF986FA4805E36E84A4ECDE5D22075F7DCF210C6B1EBA68713659F633DB777AF20557A55192976916F7539FBF60FD9581CC24839D0FB84FEDB8D55FB604997EF9376D1DB0C150E41998C0DD7332B70334BC2A16949E085C7559C48EDDB465613BB3B4A21037C818DEE65F274EC082BD0BF16541E3A6DC67D01E45FCE5987C6993A634C7751F403C64619D5D34EDF98783774454B5C36C735A22C2> |-/x <1C60D8A8C9B7A73DC5490245197C6A10ADDC3E0FA58392059EC7D8F6B66FB0930B38EB119ACB6A2A3F634D77F5CF7C8D99C62501D6684A6FD07A49AFAD748B3BD4468AD4BA11802E815F7DDC3EFDD84C4D7209BF92B0439CDE5D6763248366DFBFD06A148E86014B62BD462267E2267FF702B3FE0C2F56259689794C288E394AE4382AFC6AC04373CAD56E7F81CE52F61834C7721A873F0194632E517E056B975C> |-/quotedblleft <1C60D8A8C9B77FE2C1E7B0700C7157D917BB0DC86B49A69767511C1C6E336A2F7FBC261BFB33C91E47E2A90EB6D8731402C0860D21FE9DFE5F85DDC388E7F0EACDBC65CE05C85F6E46493A3EDFA326150B0EBF472E9386AB07451682484A2C15C0C59C5F16DB867A749B6FE5A956F998FE732DE5783FB55B566B3BA327D86277B62D06B7F9E0878F065A78F2C8> |-/fi <1C60D8A8C9B7EF32570AFF8232948072BEC4C50248C1208A69B28B65AADBCA92759C919FA1E9FEED9805553A4DA719E642BF818FA1F207BFFFA261F4684EEDEC74D5FA21E60ACFC86CCDCCAB1F34855657DE53C09E74BC643E809747A4490D6E2D525AF43CE58C8030D80DD7C648C3036BD5C3D4AD9A69D5D31C9A067EA77341991BEAF0722208EC7CF6FF370325F44116B8F101A9BC9394B7572AA8CB6FD53542F5362A92C681DCE3150EDF3158D05182681F9FAFCE92EDE83E3B17EF7235AE203955993A0D562648749B3CC0> |-/quotedblright <1C60D8A8C9B77FE2C1E7B0700C6EC2218A2A4DB75E2ECEF61C7E7FC8F80ED7CFC1EAF9327AB491AD4012F05E70D9F10D9758CDF7B2EBF482D2653BBF0F27CBBACAFB2891C4095B3C8CC790ACF4588817D8D30B13AE4F4CDCEA3D13878B977F9BBF32F0BE902BF38D0E0EA0C7457E93AF4E40D033D1D4E1EA730F8C70D0CACF43689925B2DB9C61E0DAAC2E1C> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBBZ+Times-Roman /Encoding getdup 37 /percent putdup 45 /hyphen putdup 46 /period putdup 55 /seven putdup 71 /G putdup 77 /M putdup 90 /Z putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 107 /k putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 113 /q putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 118 /v putdup 119 /w putdup 120 /x putdup 170 /quotedblleft putdup 174 /fi putdup 186 /quotedblright putpop%ADOEndSubsetFont
/BDEBBZ+Times-Roman*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /.notdef /nine 7{/.notdef}rp /A /.notdef /C /D /E /F /G /H /I /.notdef /K /L /M /N /O /P /.notdef /R /S /T /U /V /W /.notdef /Y /Z 6{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x 49{/.notdef}rp /quotedblleft 3{/.notdef}rp /fi 11{/.notdef}rp /quotedblright 69{/.notdef}rp]BDEBBZ+Times-Roman nfBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf52.785 195.008 mo(FIG.6.\(Coloronline\)Squaresshowthedifferencebetweenthe)[4.98442 2.98485 6.47284 5.19334 4.48231 6.0299 2.98486 5.97975 4.48231 2.49176 4.4823 5.72408 4.4823 4.4823 2.49176 2.49176 4.48232 3.98018 5.72409 4.98442 4.4823 4.4823 3.98018 2.98485 3.98019 6.23709 3.49248 4.4823 4.25725 9.2076 2.49266 4.48232 6.71405 4.4823 2.49178 2.76338 2.98843 3.98019 2.98485 3.98019 4.48232 3.98019 6.72301 4.4823 3.98019 2.49178 6.47285 3.98019 3.98019 7.23587 2.49176 4.48233 0 ]xshBDEBBZ+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf40.824 202.712 mo(20)[2.9882 0 ]xshBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf47.304 205.97 mo(Ne)[6.47105 0 ]xsh%ADOBeginSubsetFont: YGTBAA+MTSY Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /YGTBAA+MTSY def/FontInfo 8 dict dup begin/Notice (Copyright (C) 1992, 1993 The TeXplorators Corporation and Y&Y, Inc. (508) 371-3286. All Rights Reserved.) def/Weight (Medium) def/ItalicAngle 0 def/BaseFontName (MTSY) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 67 /plus putdup 68 /equal putdup 161 /minus putdef/FontBBox {0 -954 1043 796} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 -0 465 484 501 506 657 676] def/OtherBlues [-209 -186] def/BlueScale 0.0479599 def/StdHW [50] def/StdVW [50] def/StemSnapH [20 50] def/StemSnapV [30 50] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/plus <1C60D8A8C9B6C180FE7E255088499B6A505EB6DB68D164488832FE8CE1A33AC5E060A59D03BCEB9639BC4D489466A32ABD040C578748437F6AB5A2> |-/equal <1C60D8A8C9B6C180329C486F337E2637810D8548FE31FA7E089C659A5FA4521910F4A25ADF4E42AFDF85360EA65D> |-/minus <1C60D8A8C9B6C18031E531D62CCFFB4F07592A446F7E1EF35039F4AC88C2> |-/.notdef <1C60D8A8C9B81F2CC3> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/BDEBCD+MTSY /YGTBAA+MTSY findfont ct_VMDictPut/BDEBCD+MTSY*1 [67{/.notdef}rp /plus /equal 92{/.notdef}rp /minus 94{/.notdef}rp]BDEBCD+MTSY nfBDEBCD+MTSY*1 [8.9664 0 0 -8.9664 0 0 ]msf61.245 205.97 mo(C)shBDEBBZ+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf71.721 202.712 mo(92)[2.9882 0 ]xshBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf78.201 205.97 mo(Zrinelasticdata\(\256lledcircles\)andthosefor)[5.4784 5.30087 2.49266 4.4832 3.98108 2.49266 3.98108 3.488 2.49266 2.49265 6.28187 4.4823 3.98109 2.49266 6.29082 2.98843 4.98532 2.49266 2.49266 3.98108 6.77681 3.97839 2.49266 2.98575 3.98108 2.49265 3.98109 3.48799 5.2919 3.97839 4.48322 6.78577 2.49265 4.48322 4.48318 3.48801 6.28186 2.98843 4.48318 0 ]xshBDEBBZ+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf240.048 202.712 mo(20)[2.9882 0 ]xshBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf246.528 205.97 mo(Ne)[6.47105 0 ]xshBDEBCD+MTSY*1 [8.9664 0 0 -8.9664 0 0 ]msf260.469 205.97 mo(C)shBDEBBZ+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf270.954 202.712 mo(90)[2.98819 0 ]xshBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf277.425 205.97 mo(Zr)[5.48108 0 ]xsh40.8232 216.923 mo(\(opencircles\).Intheregionbetweentheenergiesofthe2)[2.98574 4.4832 4.4832 3.98108 7.29058 3.97839 2.49266 2.98574 3.98109 2.49265 3.98109 3.488 2.98575 5.04897 2.98574 7.28072 2.49265 4.4832 6.78578 2.98843 3.843 4.4823 2.49266 4.4832 7.29057 4.4823 3.98109 2.49266 6.47374 3.98108 3.98109 7.29057 2.49266 4.48318 6.78577 3.97841 4.4832 3.98108 2.82614 4.48232 2.49266 3.98108 6.29987 4.48232 5.78685 2.49266 4.4832 6.78577 0 ]xshBDEBCD+MTSY*1 [5.9776 0 0 -5.9776 0 0 ]msf252.549 213.674 mo(C)shBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf260.514 216.923 mo(and4)[3.97928 4.48141 7.29059 0 ]xshBDEBCD+MTSY*1 [5.9776 0 0 -5.9776 0 0 ]msf280.746 213.674 mo(C)shBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf40.824 227.885 mo(statesin)[3.4871 2.49176 3.98019 2.49176 3.98019 6.1295 2.49176 0 ]xshBDEBBZ+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf72.999 224.627 mo(20)[2.9882 0 ]xshBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf79.47 227.885 mo(Ne,thedifferenceshowsnoneofthestructureduetothe)[6.47374 3.98109 4.87772 2.49266 4.4832 6.61541 4.48319 2.49266 2.76338 2.98843 3.98108 2.98575 3.98108 4.48322 3.98108 6.62437 3.48799 4.48322 4.25723 6.47105 6.1295 4.48318 4.48322 4.48318 6.62439 4.48318 5.61649 2.49268 4.48318 6.62439 3.49248 2.49265 2.98575 4.4832 3.98109 2.49265 4.4832 2.98575 6.61542 4.4832 4.4832 6.61542 2.49265 7.11932 2.49268 4.48322 0 ]xsh40.8239 238.847 mo(couplingtothosestatesthatisseenintheindividualcurves.This)[3.98108 4.4832 4.4832 4.4832 2.49266 2.49266 4.4832 7.85725 2.49266 7.83932 2.49266 4.4832 4.4832 3.48799 7.34439 3.49248 2.49266 3.98108 2.49266 3.98108 6.8495 2.49266 4.4832 3.98108 5.85954 2.49266 6.84949 3.49249 3.98108 3.98108 7.8483 2.49266 7.84828 2.49266 4.4832 7.34438 2.49266 4.4832 4.4832 2.26849 4.4832 2.49266 4.4832 4.4832 3.98109 5.85953 3.97841 4.4832 2.98573 4.34692 3.97839 3.48801 5.60669 5.47839 4.48322 2.49265 0 ]xsh40.8239 249.801 mo(impliesthattheircontributionsarethesameinbothreactions.The)[2.49176 6.97496 4.4823 2.49176 2.49176 3.98019 6.48008 2.49266 4.48231 3.98019 5.48116 2.49266 4.4823 3.98019 2.49176 5.97603 3.98019 4.4823 4.4823 2.49176 2.98485 2.49176 4.30208 4.48232 2.49176 2.49176 4.4823 4.4823 6.48009 3.98018 2.98485 6.966 2.49266 4.4823 6.96599 3.48712 3.98019 6.97496 6.95703 2.49178 7.46989 4.48232 4.48232 2.49176 7.46991 2.98842 3.98019 3.98019 3.98019 2.49178 2.49178 4.4823 4.48233 3.48709 5.22922 5.48108 4.48233 0 ]xsh40.8239 260.763 mo(cumulativesumofthedifference\(dashedline\)showsthat75%of)[3.98019 4.4823 6.97496 4.4823 2.49176 3.98019 2.49177 2.26849 4.34692 7.21796 3.49248 4.4823 10.1975 4.4823 6.21007 2.49176 4.4823 7.20898 4.4823 2.49176 2.76338 2.98483 3.98019 2.98485 3.98018 4.4823 3.98019 7.20898 2.98843 4.4823 3.98019 3.48709 4.4823 3.98019 7.70393 2.49176 2.49178 4.48232 3.98019 6.21902 3.48711 4.48232 4.25725 6.47105 6.71411 2.49266 4.4823 3.98019 5.71519 4.4823 4.48233 10.7013 4.4823 0 ]xsh40.8239 271.725 mo(theextracrosssectioninthe)[2.49266 4.4832 6.84047 3.843 4.4832 2.49266 2.98574 6.84047 3.98109 2.98574 4.4832 3.488 6.33662 3.49248 3.98109 3.98109 2.49266 2.49265 4.4832 7.34439 2.49265 7.33542 2.49266 4.4832 0 ]xshBDEBBZ+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf148.455 268.466 mo(20)[2.9882 0 ]xshBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf154.935 271.724 mo(Ne)[6.47105 0 ]xshBDEBCD+MTSY*1 [8.9664 0 0 -8.9664 0 0 ]msf168.876 271.724 mo(C)shBDEBBZ+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf179.352 268.466 mo(92)[2.9882 0 ]xshBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf185.832 271.724 mo(Zrreactioncomesfromthe)[5.47841 5.85947 2.98575 3.98108 3.98109 3.98108 2.49266 2.49266 4.48318 7.34439 3.97839 4.4832 6.97585 3.98109 6.3456 2.98575 2.98575 4.48318 9.82806 2.49268 4.48318 0 ]xsh40.8238 282.678 mo(region)[2.98664 3.843 4.4841 2.49355 4.4841 0 ]xshBDEBCD+MTSY*1 [8.9664 0 0 -8.9664 0 0 ]msf65.8445 282.678 mo(\241)sh%ADOBeginSubsetFont: TZMBAA+MTMI AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginBDEBCA+MTMI dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/less <1C60D8A8C9B6C1804D9D600B426A54AB20C8AE7ED6C17680FCB3ED164344E3426AD17C08660526317EDE27F596A4FE> |-/N <1C60D8A8C9B6E224F56A27CEE6438795E640C8A0B943350A298C65B6D1CB581F32FF8DA7E16614040050260F7CF65FD006C4E4051F2F934C4F3F28A634325FC89B88BD7BD5A1080A30CA02EA1F03167B20CC8125C046973515935ABEE1110C136E232B96CD8CB898E41E6F5232CE131D4EAAD7407CB94AF042BA178ED6374729E0224A04A03C15713C1BA86525D1> |-/Q <1C60D8A8C9B68526F8CE277F69C50E315DA1AFB3CF74BC68725E3B28111EC7AE2F9552D742AB23417643D7C5209367BF315A5A3AF9616C0FE4A96399BF366140F216A75510B2434D6E2653267FFCA6351459F03E510730AF26850AAEDCB22BE84C5C771171AD29C92D6F1B7FA784E00D0DFC4E842C442761B11AD223588912A8B87CBDFE73B2117A5D22439AA3FFA67918C0261FA708CB53C8011D11B3360C7A4A205B4D7EF25032EE33E0AC756F3EAF0F3963A0A62981D35DAE7B27559A83305B7457E269F46B899A68F4F9FDD1F55D639601DB687C769322424F7C262DCF8A> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBCA+MTMI /Encoding getdup 60 /less putdup 78 /N putdup 81 /Q putpop%ADOEndSubsetFont
/BDEBCA+MTMI*1 [58{/.notdef}rp /period /.notdef /less 17{/.notdef}rp /N 2{/.notdef}rp /Q 174{/.notdef}rp]BDEBCA+MTMI nfBDEBCA+MTMI*1 [8.9664 0 0 -8.9664 0 0 ]msf72.8374 282.678 mo(Q<)[10.098 0 ]xshBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf92.4129 282.678 mo(5MeV.)[6.73197 7.97478 3.97839 5.30991 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf40.824 305.438 mo(\252background\272ofnoncollective\(n-particle-n-hole\)excitations)[4.42141 4.97931 4.42141 4.4214 4.97931 4.97931 3.31548 4.97931 4.97931 4.97931 4.97931 7.2179 4.97931 6.08408 4.97931 4.97931 4.97931 4.4214 4.97931 2.76759 2.76761 4.4214 4.4214 2.76761 2.52054 4.82388 7.20895 3.32144 4.97931 3.31548 4.97931 4.4214 3.31548 2.76761 2.76761 4.4214 2.76761 4.4214 3.31548 4.97931 3.31548 4.97931 4.97929 2.76761 4.4214 6.08409 4.26598 4.97931 4.42139 2.76761 2.76761 4.42142 2.76761 2.76761 4.97928 4.97931 0 ]xsh40.824 316.895 mo(in)[2.7716 0 ]xshBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf52.965 313.277 mo(92)[3.48341 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf60.444 316.895 mo(Zr,whichpossessestwovalenceneutronsoutsidethe)[6.08607 3.31647 6.87619 7.191 4.9803 2.76861 4.4224 9.3778 4.9803 4.9803 3.87453 3.87453 4.42239 3.87454 3.87451 4.42241 8.27103 2.77159 7.09238 9.36884 4.72525 4.41943 2.76859 4.42241 4.9803 4.42239 8.83783 4.9803 4.42241 4.9803 2.7686 3.31647 4.98032 4.98032 8.28 4.9803 4.98032 2.76862 3.87453 2.76862 4.98032 8.81989 2.76862 4.98032 0 ]xsh40.8237 328.352 mo(closed)[4.42141 2.76761 4.97931 3.87354 4.4214 0 ]xshBDEBCA+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf68.1929 328.352 mo(N)shBDEBCD+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf79.4427 328.352 mo(D)shBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf89.9821 328.352 mo(50neutronshellin)[4.97931 6.90308 4.97931 4.4214 4.97931 2.76761 3.31548 4.97931 6.90308 3.87952 4.97931 4.42142 2.76761 4.68939 2.77159 0 ]xshBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf164.61 324.734 mo(90)[3.48341 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf172.08 328.352 mo(Zr.Fromthecumulativesum)[6.08707 3.31747 4.40147 5.53522 3.31747 4.98131 9.67467 2.77161 4.98129 6.33621 4.4234 4.98129 7.75092 4.98129 2.76959 4.4234 2.76961 2.51955 4.82391 6.3631 3.87952 4.98129 0 ]xsh40.8247 339.809 mo(ofthisdifference\(dashedcurveinFig.)[4.97931 6.72269 2.76761 4.97931 2.76761 7.28074 4.97931 2.76761 3.0694 3.32046 4.42141 3.31548 4.42141 4.97931 4.4214 7.83858 3.31548 4.97931 4.4214 3.87352 4.97931 4.4214 8.39748 4.42142 4.97929 3.31548 4.8239 7.83858 2.76761 8.37854 5.5372 2.76761 4.97931 0 ]xsh.883635 .769161 0 0 cmyk
BDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf203.967 339.809 mo(6)sh1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: SBTAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBDEBBZ+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/y <1C60D8A8C9B7A73DB5828C8EB66C86A2A0178950C8A5D2BCDF7E587CE4AD01DF8AD4603198C6F5DF9E7F658259AE7FF6DC72080528C2A7D419F982E298CCAED2E6BCC85E06532CEB363664FB4449960341BAA9D39DAAAF5C47EC79D4FFB0F446C4E2A0FDC91EAC4399171E6DFD5F8C5B3A9EDD053AD9BFC6A562A7DCD44F19646282D2DDE100CDBBA0EDB34E355DB469767675AF6D94185E4181FCCDCD20A6CA572AF5532989> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBBZ+Times-Roman /Encoding getdup 121 /y putpop%ADOEndSubsetFont
/BDEBBZ+Times-Roman*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /.notdef /nine 7{/.notdef}rp /A /.notdef /C /D /E /F /G /H /I /.notdef /K /L /M /N /O /P /.notdef /R /S /T /U /V /W /.notdef /Y /Z 6{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y 48{/.notdef}rp /quotedblleft 3{/.notdef}rp /fi 11{/.notdef}rp /quotedblright 69{/.notdef}rp]BDEBBZ+Times-Roman nfBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf208.945 339.809 mo(\),weseethat75%)[3.31548 5.89487 7.19101 7.82065 3.87354 4.4214 7.82961 2.77159 4.97932 4.42139 6.17383 4.97931 4.97931 0 ]xsh40.8257 351.266 mo(oftheextracrosssectionfor)[4.9803 6.70475 2.76861 4.9803 7.80271 4.26599 4.9803 2.7686 3.31648 7.81168 4.42239 3.31648 4.9803 3.87453 7.26281 3.87952 4.4224 4.4224 2.76861 2.76859 4.98032 8.36061 3.32047 4.9803 0 ]xshBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf161.667 347.648 mo(92)[3.48341 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf169.137 351.266 mo(Zrcomesfromcontributions)[6.08508 6.72269 4.4214 4.97931 7.7489 4.4214 7.27179 3.31548 3.31548 4.97931 11.1242 4.42142 4.97931 4.97931 2.76761 3.31546 2.76761 4.77908 4.97729 2.76761 2.76761 4.97931 4.97931 0 ]xsh40.8247 362.723 mo(having)[4.97831 4.22116 4.97831 2.76661 4.97831 0 ]xshBDEBCD+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf71.7038 362.723 mo(\241)shBDEBCA+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf79.4706 362.723 mo(Q<)[11.2229 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf101.233 362.723 mo(5MeV.Furthermore,sincethenoncollective)[8.93745 8.85583 4.4214 5.90384 6.46175 5.5372 4.97931 3.31549 2.76761 4.97931 4.4214 3.31548 7.74892 4.97931 3.31548 4.4214 6.46175 3.8795 2.76761 4.97929 4.42142 8.3885 2.76761 4.97929 8.38852 4.97931 4.97931 4.97928 4.42142 4.97931 2.76761 2.76761 4.42139 4.42142 2.76761 2.51953 4.82388 0 ]xsh40.8247 374.18 mo(backgroundfor)[4.97831 4.42041 4.42041 4.97831 4.97832 3.31448 4.97831 4.97831 4.97831 8.16335 3.31448 4.97832 0 ]xshBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf105.777 370.562 mo(90)[3.48341 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf113.247 374.18 mo(Zrisverysmall\(seeFig.)[6.08707 6.48856 2.7696 7.01973 4.82388 4.41942 3.31747 8.14542 3.87553 7.75089 4.4234 2.76961 5.9128 3.31747 3.87553 4.42339 7.5686 5.53522 2.76959 4.98129 0 ]xsh.883635 .769161 0 0 cmyk
BDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf219.176 374.18 mo(5)sh1 /0 /CSD get_res sepcs
1 sep
BDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf224.154 374.18 mo(\),thetotalsum)[3.31648 5.64281 2.7686 4.98032 7.56859 2.77159 4.98032 2.76859 4.42242 5.92175 3.87451 4.98032 0 ]xsh40.8239 385.637 mo(givesagoodapproximationforthedifferentialcrosssection)[4.9803 2.51954 4.82389 4.41941 7.08348 7.60545 4.9803 4.9803 4.98031 8.18128 4.4224 4.9803 4.9803 3.31647 4.9803 4.98031 2.76861 7.74989 4.42241 2.7686 2.76862 4.98029 8.19025 3.32047 4.98032 6.5065 2.7686 4.9803 7.60545 4.97731 2.7686 3.0694 3.3165 4.42241 3.31648 4.42241 4.9803 2.76862 2.76862 4.42241 5.9666 4.4194 3.31648 4.98032 3.87454 7.06555 3.87451 4.42242 4.42242 2.76862 2.76862 4.98029 0 ]xsh40.8239 397.094 mo(tothenoncollectivestatesin)[2.7686 7.92027 2.7686 4.9803 7.37133 4.9803 4.98031 4.9803 4.4224 4.9803 2.7686 2.7686 4.42241 4.42239 2.76861 2.51953 4.82389 7.39823 3.87951 2.7686 4.42239 2.76862 4.42239 6.81351 2.77158 0 ]xshBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf158.625 393.476 mo(92)[3.48341 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf166.095 397.094 mo(Zr.We\256ndavalueofaround)[6.08508 3.31548 5.43559 8.60371 7.36235 5.53722 4.97931 7.9382 7.36237 4.72527 4.4214 2.76761 4.97931 7.38029 4.97931 6.2644 4.42142 3.31546 4.97931 4.97931 4.97931 0 ]xsh40.8243 408.551 mo(13mb)[4.97831 7.43409 7.74791 0 ]xsh%ADOBeginSubsetFont: TZMBAA+MTMI AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginBDEBCA+MTMI dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/slash <1C60D8A8C9B745265DB920B47933B671A6716EFB8EB6DAEE719CDC462CFE1483DCAB3C27> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBCA+MTMI /Encoding getdup 61 /slash putpop%ADOEndSubsetFont
/BDEBCA+MTMI*1 [58{/.notdef}rp /period /.notdef /less /slash 16{/.notdef}rp /N 2{/.notdef}rp /Q 174{/.notdef}rp]BDEBCA+MTMI nfBDEBCA+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf65.9619 408.551 mo(=)shBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf70.6423 408.551 mo(steratthisscatteringangle\(156)[3.87453 2.76861 4.4224 5.77824 4.4224 5.22936 2.76861 4.98031 2.7686 6.31836 3.87453 4.4224 4.4224 2.7686 2.7686 4.42239 3.31648 2.7686 4.98032 7.43408 4.42239 4.9803 4.9803 2.76862 6.88515 3.32047 4.9803 4.9803 0 ]xsh%ADOBeginSubsetFont: YGTBAA+MTSY AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginBDEBCD+MTSY dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/openbullet <1C60D8A8C9B7A73DE6C27D577B58CF0E80FC15DDE445150B7A33A2DE3E753853E9F310F6921530C3CE006D5E590F1E3A05E9355AE43E8CBB017F13F405FF7171AC45A9A143F7C8C0C5749270645BEC342D> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBCD+MTSY /Encoding getdup 177 /openbullet putpop%ADOEndSubsetFont
/BDEBCD+MTSY*1 [67{/.notdef}rp /plus /equal 92{/.notdef}rp /minus 15{/.notdef}rp /openbullet 78{/.notdef}rp]BDEBCD+MTSY nfBDEBCD+MTSY*1 [6.9738 0 0 -6.9738 0 0 ]msf197.442 404.933 mo(\261)shBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf201.438 408.551 mo(\).Thisismorethana)[3.31747 4.94145 6.08707 4.98131 2.76959 6.32732 2.76961 6.32732 7.75092 4.98129 3.31747 6.87619 2.76959 4.98132 4.4234 7.43408 0 ]xsh40.825 420.008 mo(factorof3largerthanthecontributionfromtransferchannels.)[3.22183 4.4214 4.42141 2.76761 4.97931 5.61584 4.97931 5.61584 7.2717 2.77159 4.4214 3.14114 4.97931 4.42141 5.6248 2.76762 4.97931 4.4214 7.28066 2.76761 4.97931 6.71381 4.42139 4.97931 4.97931 2.76761 3.31548 2.76759 4.77907 4.97733 2.76761 2.76759 4.97931 7.28964 3.32144 3.31548 4.97931 10.0353 2.77159 3.31548 4.4214 4.97931 3.87354 3.31548 4.4214 5.61583 4.4214 4.97932 4.42139 4.97931 4.97931 4.42139 2.76761 3.87354 0 ]xsh52.7861 431.465 mo(Theseobservationscanbeunderstoodintermsoftheenergy)[6.08508 4.97931 4.42141 3.87353 6.0214 4.97931 4.9793 3.87354 4.42141 3.31548 4.72526 4.41941 2.76761 2.76762 4.97931 4.97931 5.4815 4.4214 4.4214 6.5793 4.97931 6.02141 4.97929 4.97931 4.97929 4.42142 3.31546 3.87354 2.76761 4.97931 4.97931 6.57928 2.76761 6.57932 2.76761 4.42142 3.31546 7.7489 5.48151 4.97733 4.92242 2.77161 4.97931 6.02139 4.42142 4.97931 4.42139 3.14114 4.97928 0 ]xsh40.825 442.922 mo(leveldiagramsforthesetwoisotopesshowninFig.)[2.7686 4.16736 4.82389 4.41941 6.45277 4.97732 2.7686 4.42241 4.9803 3.31647 4.4224 7.7499 7.55073 3.32146 4.9803 6.98371 2.7686 4.98031 4.42239 3.87453 8.09064 2.77159 7.09238 8.63957 2.76859 3.87454 4.9803 2.7686 4.9803 4.9803 4.42241 7.55074 3.87453 4.98032 4.72527 7.19101 8.64851 2.77161 8.64952 5.53522 2.76862 4.98032 0 ]xsh.883635 .769161 0 0 cmyk
BDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf258.174 442.922 mo(7)sh1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: SBTAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBDEBBZ+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/bracketleft <1C60D8A8C9B81F2C36B2094B9ED0E07AA432BA5CE2E30656FAF6FD647FB4730E81C90D45CA2A3E2357B2F5E09E9C4D9F27ADC522DE90> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBBZ+Times-Roman /Encoding getdup 91 /bracketleft putpop%ADOEndSubsetFont
/BDEBBZ+Times-Roman*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /.notdef /nine 7{/.notdef}rp /A /.notdef /C /D /E /F /G /H /I /.notdef /K /L /M /N /O /P /.notdef /R /S /T /U /V /W /.notdef /Y /Z /bracketleft 5{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y 48{/.notdef}rp /quotedblleft 3{/.notdef}rp /fi 11{/.notdef}rp /quotedblright 69{/.notdef}rp]BDEBBZ+Times-Roman nfBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf266.823 442.922 mo([)sh.883635 .769161 0 0 cmyk
BDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf270.143 442.922 mo(20)[4.97733 0 ]xsh1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: SBTAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBDEBBZ+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/colon <1C60D8A8C9B854D0F4C3D92D816E2ECB7379D6E9CCDD18181277390E435A4F9286287C26709A7A3847FAD4C0EAD036C0A2A8D3B3CCF6217533C359A366F9DFF3159334E6E32E3452EAD4EA9B044C5B5B415F> |-/bracketright <1C60D8A8C9B81F2C36B2094B9ED0E07AB0AE245978D415C9B35A8D321C0AFE31914517F88ADB7E52176ED8827A777F14FE6FD4341F74> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBBZ+Times-Roman /Encoding getdup 58 /colon putdup 93 /bracketright putpop%ADOEndSubsetFont
/BDEBBZ+Times-Roman*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /.notdef /nine /colon 6{/.notdef}rp /A /.notdef /C /D /E /F /G /H /I /.notdef /K /L /M /N /O /P /.notdef /R /S /T /U /V /W /.notdef /Y /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y 48{/.notdef}rp /quotedblleft 3{/.notdef}rp /fi 11{/.notdef}rp /quotedblright 69{/.notdef}rp]BDEBBZ+Times-Roman nfBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf280.097 442.922 mo(].)[3.32047 0 ]xsh40.824 454.379 mo(Wealsoindicateinthis\256guretheenergiesofthe2)[8.6037 7.52376 4.4214 2.76761 3.87354 8.08166 2.76761 4.97931 4.97931 2.76761 4.42141 4.42141 2.76761 7.53272 2.77159 8.07269 2.7716 4.97929 2.76761 6.9749 5.53722 4.97929 4.97931 3.31548 7.53271 2.77161 4.97931 7.52376 4.4214 4.97931 4.4214 3.14113 4.97931 2.76761 4.4214 6.99283 4.97931 6.41682 2.76761 4.97931 7.52374 0 ]xshBDEBCD+MTSY*1 [6.9738 0 0 -6.9738 0 0 ]msf248.463 450.761 mo(C)shBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf257.508 454.379 mo(and4)[4.4194 4.97733 8.08167 0 ]xshBDEBCD+MTSY*1 [6.9738 0 0 -6.9738 0 0 ]msf279.963 450.761 mo(C)shBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf40.824 465.836 mo(statesin)[3.87553 2.7696 4.42339 2.7696 4.4234 6.12907 2.7696 0 ]xshBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf75.222 462.218 mo(20)[3.48341 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf82.692 465.836 mo(Neandtheenergiesofthequadrupoleandoctupole)[7.19001 6.67793 4.42041 4.97831 7.2448 2.76661 4.97832 6.67793 4.42041 4.97832 4.42039 3.14113 4.97832 2.76662 4.42041 6.147 4.9783 5.57999 2.7666 4.9783 6.67795 4.9783 4.9783 4.42041 4.9783 3.31448 4.9783 4.97832 4.9783 2.7666 6.69588 4.42039 4.97832 7.2448 4.97832 4.42041 2.7666 4.97833 4.97833 4.9783 2.76663 0 ]xsh40.8242 477.293 mo(targetstates.Weseethatbelowtheenergyofthe4)[2.76761 4.42141 3.14113 4.97931 4.42141 5.8321 3.87354 2.76761 4.4214 2.76761 4.42141 3.87354 5.54419 8.6037 7.47893 3.87952 4.4214 7.47893 2.76761 4.97929 4.4214 5.83211 4.97931 4.4214 2.76761 4.72525 10.2605 2.76759 4.97931 7.47893 4.4214 4.97929 4.4214 3.14114 4.97929 8.04581 4.97929 6.38098 2.76761 4.97931 7.46996 0 ]xshBDEBCD+MTSY*1 [6.9738 0 0 -6.9738 0 0 ]msf247.842 473.675 mo(C)shBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf256.842 477.293 mo(statein)[3.87653 2.7706 4.42438 2.7706 7.46997 2.77161 0 ]xshBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf40.824 485.132 mo(20)[3.48341 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf48.303 488.75 mo(Ne,thereareratherfewnoncollectivestatesin)[7.192 4.4224 4.52701 2.77159 4.9803 4.42241 3.31647 6.46174 4.41942 3.31647 6.46175 3.31647 4.4224 2.7686 4.9803 4.4224 5.35483 3.31647 4.16737 9.23431 4.98032 4.98029 4.98032 4.42239 4.98032 2.76859 2.76862 4.42239 4.42239 2.76862 2.51953 4.82388 6.48865 3.87952 2.76862 4.42239 2.76862 4.42239 5.9129 2.77158 0 ]xshBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf231.849 485.132 mo(90)[3.48341 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf239.319 488.75 mo(Zr,whereas)[6.08707 3.31747 4.52701 7.19101 4.98129 4.4234 3.31747 4.4234 4.4234 0 ]xsh40.8251 500.207 mo(thereareverymanyin)[2.7716 4.97731 4.41941 3.32046 8.83782 4.41942 3.32146 8.83781 4.8239 4.4194 3.32047 9.39573 7.74891 4.41941 4.82389 9.40471 2.77158 0 ]xshBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf142.254 496.589 mo(92)[3.48341 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf149.724 500.207 mo(Zr.Theextrabackgroundinthe)[6.08607 3.31648 6.90308 6.08409 4.9803 8.83783 4.26599 4.97731 2.7686 3.31647 8.8468 4.9803 4.42239 4.42241 4.98029 4.98032 3.31647 4.9803 4.9803 4.98032 9.42261 2.76862 9.38675 2.76862 4.98029 0 ]xsh40.8248 511.664 mo(lattercaseis,therefore,notsurprising.Furthermore,wesee)[2.7686 4.4224 2.7686 2.76861 4.4224 6.84025 4.42239 4.42241 3.87453 7.95613 2.77159 3.87453 6.00346 2.76861 4.9803 4.42239 3.31647 4.4224 3.31647 4.9803 3.31647 4.42239 6.02139 4.98032 4.98029 6.30035 3.87453 4.9803 3.31647 4.98032 3.31647 2.76862 3.87451 2.76862 4.98029 4.98032 6.01242 5.53821 4.98032 3.3165 2.76862 4.98029 4.42242 3.31647 7.74994 4.98029 3.3165 4.42239 6.0304 7.19098 7.94717 3.87952 4.42242 0 ]xsh40.8248 523.121 mo(thatthecollectivestatesofthetarget,whichareeasytotake)[2.76761 4.97931 4.4214 5.83211 2.76761 4.97931 7.46996 4.42141 4.97931 2.76761 2.76761 4.4214 4.42141 2.76762 2.51953 4.82389 7.49686 3.87952 2.76761 4.4214 2.76762 4.42139 6.92111 4.97731 6.37199 2.77161 4.97931 7.47891 2.76761 4.42139 3.14114 4.97931 4.42139 2.76761 5.54419 7.19104 4.97928 2.76761 4.42142 8.04578 4.42142 3.31546 7.46997 4.42139 4.42142 3.87354 8.0368 2.77161 8.02786 2.77161 4.42139 4.87769 0 ]xsh40.8248 534.578 mo(intoaccountintheCCcalculations,areembeddedamong)[2.76761 4.97931 2.76761 9.36883 4.4214 4.4214 4.42141 4.9793 4.97931 4.97931 7.18204 2.76762 9.35986 2.76762 4.97931 8.81092 6.64214 11.0247 4.4214 4.4214 2.76759 4.42142 4.97931 2.76759 4.4214 2.76761 2.76761 4.97931 4.97931 3.87354 6.8941 4.41943 3.31546 8.81091 4.42142 7.7489 4.97931 4.42139 4.97931 4.97931 4.42139 9.38678 4.42139 7.7489 4.97931 4.97931 0 ]xsh40.8248 546.035 mo(thenoncollectivestates.Itisverydif\256culttoaccountforthese)[2.7686 4.9803 6.6869 4.9803 4.9803 4.9803 4.42241 4.9803 2.7686 2.76861 4.4224 4.42239 2.76861 2.51954 4.8239 6.71379 3.87952 2.7686 4.42241 2.7686 4.42241 3.87451 4.74319 3.31648 5.03111 2.7686 6.12907 4.82388 4.41942 3.31647 7.2448 4.98032 2.76859 3.0694 5.53821 4.42239 4.98032 2.76862 5.04007 2.77161 7.23584 4.42239 4.42242 4.42239 4.98032 4.98032 4.98032 5.05801 3.31647 4.98032 5.57999 2.77161 4.98029 4.42242 3.87454 0 ]xsh40.8248 557.492 mo(statesinCCcalculationsfortworeasons:1.Theirlargenumber)[3.87354 2.76761 4.4214 2.76761 4.42141 5.48149 2.76761 6.5793 6.64314 8.23515 4.4214 4.42141 2.76762 4.4214 4.97931 2.76761 4.42141 2.76761 2.76762 4.9793 4.9793 5.48151 3.31546 4.97931 4.92343 2.77161 7.09238 6.5793 3.31548 4.42142 4.42139 3.87354 4.97931 4.97931 3.8735 4.3736 4.97729 4.09464 6.08408 4.97931 4.42142 2.76758 4.92245 2.77161 4.42139 3.14114 4.97931 6.02139 4.97931 4.97931 7.7489 4.97931 4.42139 0 ]xsh40.8248 568.949 mo(makesthecalculationsintractableand2.thereis,inanycase,)[7.74891 4.42141 4.87769 4.41941 6.42595 2.7716 4.9793 6.96585 4.42141 4.42141 2.76761 4.4214 4.97931 2.76762 4.4214 2.76762 2.76761 4.97931 4.97931 6.43492 2.76761 4.97929 2.76761 3.31548 4.4214 4.4214 2.76761 4.42139 4.97931 2.76761 6.96585 4.42142 4.97931 7.53271 4.97931 5.0311 2.76761 4.97931 4.42139 3.31549 6.96585 2.77158 3.87354 5.02216 2.76761 7.5148 4.42139 4.82388 7.53271 4.42142 4.42139 3.87354 4.42142 0 ]xsh40.8248 580.406 mo(nosimpledescriptionforthecouplingstothem.)[4.9803 7.47892 3.87453 2.76861 7.74991 4.9803 2.7686 6.91206 4.9803 4.42239 3.87453 4.4224 3.31647 2.76861 4.9803 2.7686 2.76861 4.98031 7.47892 3.32047 4.9803 5.8141 2.7686 4.9803 6.91205 4.42239 4.98032 4.98029 4.98032 2.76862 2.76859 4.98032 4.98029 6.39011 2.76862 7.46994 2.76862 4.98032 4.42239 7.74994 0 ]xsh52.7859 591.863 mo(Weshall,therefore,treattheeffectofthemanynoncol-)[8.6037 8.32475 3.87354 4.97931 4.4214 2.76761 2.76761 6.39898 2.76762 4.97931 4.4214 3.31548 4.42142 3.31548 4.97931 3.31548 4.42139 6.40796 2.76761 3.31546 4.42142 4.42139 6.66898 2.76761 4.97931 8.33371 4.4194 3.06941 3.32047 4.4214 4.4214 6.67792 4.97931 7.22681 2.76761 4.97929 8.33372 7.7489 4.4214 4.82388 8.90059 4.97932 4.97931 4.97928 4.42142 4.97931 2.76758 0 ]xsh40.8248 603.32 mo(lectivestatesintheusualway,thatis,usinganimaginary)[2.76761 4.42141 4.4214 2.76761 2.51954 4.82389 8.63957 3.87951 2.76761 4.42141 2.76761 4.4214 8.07277 2.77159 9.17954 2.77159 4.97931 8.6306 4.97932 3.87352 4.97931 4.4214 6.98378 7.09238 4.41942 4.32874 6.69586 2.76761 4.97931 4.42142 6.98376 2.76761 3.87354 6.67795 4.97729 3.87354 2.76761 4.97931 9.18948 4.42142 9.18948 2.76761 7.7489 4.42142 4.97931 2.76758 4.97931 4.42142 3.31546 0 ]xsh40.8248 614.777 mo(componenttotheopticalpotential.Thisisnonethelessa)[4.42141 4.97931 7.74891 4.97931 4.97931 4.97931 4.4214 4.97931 7.94716 2.76762 10.116 2.76762 4.97931 9.56709 4.9793 4.9793 2.76761 2.76761 4.4214 4.4214 7.92923 4.97931 4.97931 2.76759 4.4214 4.97931 2.76761 2.76761 4.42139 2.76761 7.6503 6.08508 4.97928 2.76761 9.01822 2.76761 9.01822 4.97931 4.97928 4.97931 4.42142 2.76761 4.97931 4.42139 2.76761 4.42142 3.8735 9.03616 0 ]xsh40.8248 626.234 mo(signi\256cantlymorecompletedescriptionofthefullproblem)[3.87453 2.7686 4.9803 4.9803 2.7686 5.53821 4.42239 4.42241 4.9803 2.7686 2.76861 8.85575 7.74991 4.9803 3.31647 8.28889 4.4224 4.9803 7.74992 4.98029 2.76862 4.42239 2.7686 8.29785 4.9803 4.42239 3.87454 4.42239 3.31647 2.76862 4.98029 2.76862 2.76862 4.98029 8.85574 4.97733 7.18195 2.77161 4.98032 8.27991 3.3165 4.98032 2.76862 6.63309 4.98032 3.31647 4.98032 4.98032 2.76862 4.42242 0 ]xsh40.8248 637.691 mo(thanusual,sincethecollectiveexcitationscanstillbetreated)[2.7686 4.9803 4.4224 7.77581 4.9803 3.87453 4.98031 4.42239 2.7686 5.29214 3.87951 2.76861 4.9803 4.4224 7.2179 2.76861 4.9803 7.20893 4.4224 4.9803 2.7686 2.76862 4.42239 4.42239 2.76862 2.52054 4.82388 7.23584 4.26599 4.98032 4.42239 2.76862 2.76859 4.42239 2.76862 2.76862 4.98029 4.98032 6.68698 4.42239 4.42242 7.77579 3.87454 2.76862 2.76862 2.76862 5.55316 4.98032 7.2179 2.76862 3.3165 4.42239 4.42242 2.76859 4.42242 0 ]xsh40.8248 649.148 mo(throughtheCCapproach.Inthelanguageofthe\252barrier)[2.76761 4.97931 3.31548 4.97931 4.97931 4.97931 9.62984 2.76761 4.97931 9.06298 6.64214 11.2857 4.4214 4.97931 4.97931 3.31548 4.97931 4.42139 4.42142 4.97931 7.15512 3.31549 9.61191 2.76761 4.97931 9.06296 2.77161 4.42142 4.97928 4.97931 4.97931 4.42142 4.97931 9.08987 4.97931 7.95605 2.76761 4.97931 9.06299 4.42139 4.97931 4.42142 3.31546 3.31549 2.76761 4.42139 0 ]xsh40.8248 660.605 mo(distribution,\272thebarrierscanstillbeevaluatedviaCC)[4.9803 2.7686 3.87453 2.7686 3.31647 2.76861 4.77906 4.97731 2.76861 2.76861 4.9803 4.9803 2.48965 10.4846 2.77159 4.9803 10.4846 4.98031 4.4224 3.31647 3.31648 2.7686 4.42239 3.31648 9.93578 4.42239 4.42241 11.0525 3.87454 2.76859 2.76862 2.76862 8.81989 4.98029 10.4936 4.16736 4.72528 4.4194 2.76862 4.98032 4.42239 2.76862 4.42239 11.0705 4.98032 2.76859 10.4846 6.64215 0 ]xsh40.8248 672.062 mo(calculations,buttheelasticscatteringfromeachbarrierwill)[4.4224 4.4224 2.7686 4.4224 4.98031 2.76861 4.42239 2.76861 2.76861 4.9803 4.9803 3.87453 5.81417 4.77906 4.98031 6.08415 2.7686 4.98031 7.73097 4.41943 2.76859 4.42241 3.87453 2.76862 2.76859 7.72203 3.87453 4.42239 4.42239 2.76862 2.76862 4.42239 3.31647 2.76862 4.98029 8.28888 3.31647 3.3165 4.98029 11.0525 4.42239 4.42242 4.42239 8.29788 4.98032 4.42239 3.3165 3.31647 2.76862 4.42239 6.62405 7.19202 2.76862 2.76862 0 ]xshgsave
545.316 1.33417 mo
307.386 1.33417 li
307.386 239.072 li
545.316 239.072 li
cp
clp
367.996 1.53418 mo
367.996 1.53418 li
367.996 234.277 mo
367.996 234.277 li
367.996 1.53418 mo
367.996 1.53418 li
367.996 234.277 mo
367.996 234.277 li
.694423 .677272 .637385 .738643 cmyk
@
grestore
BDEBCC+TimesNewRomanPS*1 [6.6671 0 0 -6.6671 0 0 ]msf392.069 210.156 mo(90)[3.33356 0 ]xshBDEBCC+TimesNewRomanPS*1 [11.1523 0 0 -11.1523 0 0 ]msf398.735 216.822 mo(Zr)[6.81396 0 ]xsh437.819 14.7471 mo
437.819 14.7471 li
437.819 58.6292 mo
437.819 58.6292 li
437.819 102.631 mo
437.819 102.631 li
437.819 146.514 mo
437.819 146.514 li
437.819 190.396 mo
437.819 190.396 li
437.819 234.277 mo
437.819 234.277 li
367.996 14.7471 mo
367.996 14.7471 li
367.996 58.6292 mo
367.996 58.6292 li
367.996 102.631 mo
367.996 102.631 li
367.996 146.514 mo
367.996 146.514 li
367.996 190.396 mo
367.996 190.396 li
367.996 234.277 mo
367.996 234.277 li
437.819 14.7471 mo
437.819 14.7471 li
437.819 58.6292 mo
437.819 58.6292 li
437.819 102.631 mo
437.819 102.631 li
437.819 146.514 mo
437.819 146.514 li
437.819 190.396 mo
437.819 190.396 li
437.819 234.277 mo
437.819 234.277 li
367.996 14.7471 mo
367.996 14.7471 li
367.996 58.6292 mo
367.996 58.6292 li
367.996 102.631 mo
367.996 102.631 li
367.996 146.514 mo
367.996 146.514 li
367.996 190.396 mo
367.996 190.396 li
367.996 234.277 mo
367.996 234.277 li
.694423 .677272 .637385 .738643 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: ITAQMX+TimesNewRomanPS AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBDEBCC+TimesNewRomanPS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B81F2C36D59043575ABF8222E88700B247745F4047C981BE6EABA4692012275B3D88343BD48C515FB1C784AAA1DC1511E4D2C3B5E64339E790C5343A947299> |-/parenright <1C60D8A8C9B81F2C36D59043575ABF826197DD6606F1D3B79FDDFC6573377CBD47CB36FF7458E94315FA4E4C6B865ABBE434E872BA40730CB01B8AB373F5B93C8F358D33> |-/E <1C60D8A8C9B7D8BE6A707DDA156E602B4D3783BAC9F66D9E14D07272FF2B0ACBC02ACF5DFFC08DD010957A67CFB5BD9F5C514738D514A6807FAE015DC52FB9E9D8B8ACAC82C0B54BB43F7DADD7548FDCDB21A30C659C75F58E7557A526258D65798AFEEA17B81BCC50B207D79751F92B32F4617AEFC9133DEB71B47914683BF8F7E80D8B427DCD5C272A4CD16742391AAF986CFF65FAD517194B8C98D3C05676B2E0411AFDD0A41E4F82F57478ADF0CA77EB> |-/k <1C60D8A8C9B7A73DC54E0D6DF53AC033F4F221AAA569BCA1E5A0081884376EE5E9F580D7869189E19728FCE941A88EFFE1FD3475A7C6156A16925679F882171B8568549694771F07374784598FC615334A193E7CA66A65411D7C0F2F390ED9F8F111C50B1CBFFDA774218E6FAC66544C42A3B9C4F44F871DDB3EC99D26A0D9AA1585AAC88B1A8D6C41D3CD2FD842D7> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBCC+TimesNewRomanPS /Encoding getdup 40 /parenleft putdup 41 /parenright putdup 69 /E putdup 107 /k putpop%ADOEndSubsetFont
/BDEBCC+TimesNewRomanPS*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus 2{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven /.notdef /nine 9{/.notdef}rp /C /D /E 7{/.notdef}rp /M 3{/.notdef}rp /Q 4{/.notdef}rp /V 3{/.notdef}rp /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /d /e /f 2{/.notdef}rp /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /s /t /u /v 8{/.notdef}rp /minus 128{/.notdef}rp]BDEBCC+TimesNewRomanPS nfBDEBCC+TimesNewRomanPS*1 [8.7279 0 0 -8.7279 0 0 ]msf358.419 237.187 mo(0)sh345.326 193.305 mo(1000)[4.36395 4.36395 4.36395 0 ]xsh345.326 149.423 mo(2000)[4.36395 4.36395 4.36395 0 ]xsh345.326 105.542 mo(3000)[4.36395 4.36395 4.36395 0 ]xsh345.326 61.538 mo(4000)[4.36395 4.36395 4.36395 0 ]xsh345.326 17.6567 mo(5000)[4.36395 4.36395 4.36395 0 ]xshBDEBCC+TimesNewRomanPS*1 [0 -10.9099 -10.9099 0 0 0 ]msf337.205 135.323 mo(E \(keV\))[-6.66589 -2.72742 -3.63293 -5.34912 -4.84399 -7.87695 0 ]ysh367.996 3.95819 mo
437.819 3.95819 li
367.996 5.29114 mo
437.819 5.29114 li
367.996 6.50415 mo
437.819 6.50415 li
367.996 7.59515 mo
437.819 7.59515 li
367.996 9.89813 mo
437.819 9.89813 li
367.996 12.0801 mo
437.819 12.0801 li
367.996 15.5962 mo
437.819 15.5962 li
367.996 17.1711 mo
437.819 17.1711 li
367.996 22.7482 mo
437.819 22.7482 li
367.996 24.3232 mo
437.819 24.3232 li
367.996 28.8091 mo
437.819 28.8091 li
367.996 30.0212 mo
437.819 30.0212 li
367.996 33.1722 mo
437.819 33.1722 li
367.996 34.8702 mo
437.819 34.8702 li
367.996 34.9911 mo
437.819 34.9911 li
367.996 36.6882 mo
437.819 36.6882 li
367.996 36.9312 mo
437.819 36.9312 li
367.996 38.0212 mo
437.819 38.0212 li
367.996 38.3851 mo
437.819 38.3851 li
367.996 40.0822 mo
437.819 40.0822 li
367.996 42.2642 mo
437.819 42.2642 li
367.996 43.9612 mo
437.819 43.9612 li
367.996 45.2952 mo
437.819 45.2952 li
367.996 46.3862 mo
437.819 46.3862 li
367.996 48.4471 mo
437.819 48.4471 li
367.996 48.6891 mo
437.819 48.6891 li
367.996 48.9322 mo
437.819 48.9322 li
367.996 53.1741 mo
437.819 53.1741 li
367.996 55.9622 mo
437.819 55.9622 li
367.996 60.4471 mo
437.819 60.4471 li
367.996 65.5392 mo
437.819 65.5392 li
367.996 76.6912 mo
437.819 76.6912 li
367.996 82.8741 mo
437.819 82.8741 li
367.996 89.0552 mo
437.819 89.0552 li
367.996 99.2382 mo
437.819 99.2382 li
367.996 113.663 mo
437.819 113.663 li
367.996 114.026 mo
437.819 114.026 li
367.996 132.452 mo
437.819 132.452 li
367.996 138.392 mo
437.819 138.392 li
367.996 157.06 mo
437.819 157.06 li
367.996 234.277 mo
437.819 234.277 li
.694423 .677272 .637385 .738643 cmyk
@
gsave
545.316 1.33417 mo
307.386 1.33417 li
307.386 239.072 li
545.316 239.072 li
cp
clp
1.333 lw
[2.4244 2.4244 ] 0 dsh
367.996 113.663 mo
437.819 113.663 li
367.996 138.392 mo
437.819 138.392 li
@
.4 lw
[] 0 dsh
461.891 1.53418 mo
461.891 1.53418 li
461.891 234.277 mo
461.891 234.277 li
461.891 1.53418 mo
461.891 1.53418 li
461.891 234.277 mo
461.891 234.277 li
367.996 234.277 mo
367.996 1.53418 li
437.819 1.53418 li
437.819 234.277 li
367.996 234.277 li
@
grestore
1 /0 /CSD get_res sepcs
1 sep
BDEBCC+TimesNewRomanPS*1 [6.6671 0 0 -6.6671 0 0 ]msf485.962 210.156 mo(92)[3.33356 0 ]xshBDEBCC+TimesNewRomanPS*1 [11.1523 0 0 -11.1523 0 0 ]msf492.629 216.822 mo(Zr)[6.81509 0 ]xsh531.713 14.7471 mo
531.713 14.7471 li
531.713 58.6292 mo
531.713 58.6292 li
531.713 102.631 mo
531.713 102.631 li
531.713 146.514 mo
531.713 146.514 li
531.713 190.396 mo
531.713 190.396 li
531.713 234.277 mo
531.713 234.277 li
461.891 14.7471 mo
461.891 14.7471 li
461.891 58.6292 mo
461.891 58.6292 li
461.891 102.631 mo
461.891 102.631 li
461.891 146.514 mo
461.891 146.514 li
461.891 190.396 mo
461.891 190.396 li
461.891 234.277 mo
461.891 234.277 li
531.713 14.7471 mo
531.713 14.7471 li
531.713 58.6292 mo
531.713 58.6292 li
531.713 102.631 mo
531.713 102.631 li
531.713 146.514 mo
531.713 146.514 li
531.713 190.396 mo
531.713 190.396 li
531.713 234.277 mo
531.713 234.277 li
461.891 14.7471 mo
461.891 14.7471 li
461.891 58.6292 mo
461.891 58.6292 li
461.891 102.631 mo
461.891 102.631 li
461.891 146.514 mo
461.891 146.514 li
461.891 190.396 mo
461.891 190.396 li
461.891 234.277 mo
461.891 234.277 li
.694423 .677272 .637385 .738643 cmyk
@
gsave
545.316 1.33417 mo
307.386 1.33417 li
307.386 239.072 li
545.316 239.072 li
cp
clp
1.333 lw
[2.4244 2.4244 ] 0 dsh
461.891 131.604 mo
531.713 131.604 li
461.891 193.305 mo
531.713 193.305 li
@
.4 lw
[] 0 dsh
351.51 49.2952 mo
353.934 48.0822 li
351.51 46.8712 li
353.934 48.0822 mo
321.325 48.0822 li
353.329 163.848 mo
355.753 162.636 li
353.329 161.424 li
355.753 162.636 mo
324.236 162.636 li
461.891 234.277 mo
461.891 1.53418 li
531.713 1.53418 li
531.713 234.277 li
461.891 234.277 li
461.891 2.50415 mo
531.713 2.50415 li
461.891 5.29114 mo
531.713 5.29114 li
461.891 6.14014 mo
531.713 6.14014 li
461.891 9.77716 mo
531.713 9.77716 li
461.891 10.7462 mo
531.713 10.7462 li
461.891 11.8372 mo
531.713 11.8372 li
461.891 12.3232 mo
531.713 12.3232 li
461.891 13.0502 mo
531.713 13.0502 li
461.891 14.2621 mo
531.713 14.2621 li
461.891 15.5962 mo
531.713 15.5962 li
461.891 15.8381 mo
531.713 15.8381 li
461.891 17.0502 mo
531.713 17.0502 li
461.891 17.8981 mo
531.713 17.8981 li
461.891 19.4742 mo
531.713 19.4742 li
461.891 21.5352 mo
531.713 21.5352 li
461.891 22.6262 mo
531.713 22.6262 li
461.891 22.9902 mo
531.713 22.9902 li
461.891 23.2322 mo
531.713 23.2322 li
461.891 24.2032 mo
531.713 24.2032 li
461.891 27.1122 mo
531.713 27.1122 li
461.891 29.2932 mo
531.713 29.2932 li
461.891 30.6271 mo
531.713 30.6271 li
461.891 32.0822 mo
531.713 32.0822 li
461.891 32.2032 mo
531.713 32.2032 li
461.891 34.9911 mo
531.713 34.9911 li
461.891 36.5671 mo
531.713 36.5671 li
461.891 36.9312 mo
531.713 36.9312 li
461.891 38.2642 mo
531.713 38.2642 li
461.891 38.7491 mo
531.713 38.7491 li
461.891 41.2942 mo
531.713 41.2942 li
461.891 42.0222 mo
531.713 42.0222 li
461.891 44.0822 mo
531.713 44.0822 li
461.891 45.6581 mo
531.713 45.6581 li
461.891 46.2642 mo
531.713 46.2642 li
461.891 47.4772 mo
531.713 47.4772 li
461.891 49.2952 mo
531.713 49.2952 li
461.891 50.6282 mo
531.713 50.6282 li
461.891 50.7491 mo
531.713 50.7491 li
461.891 51.5981 mo
531.713 51.5981 li
461.891 52.4471 mo
531.713 52.4471 li
461.891 55.1132 mo
531.713 55.1132 li
461.891 56.9322 mo
531.713 56.9322 li
461.891 58.1442 mo
531.713 58.1442 li
461.891 58.7502 mo
531.713 58.7502 li
461.891 58.9932 mo
531.713 58.9932 li
461.891 59.4781 mo
531.713 59.4781 li
461.891 61.1741 mo
531.713 61.1741 li
461.891 66.1451 mo
531.713 66.1451 li
461.891 66.6292 mo
531.713 66.6292 li
461.891 66.8721 mo
531.713 66.8721 li
461.891 68.9332 mo
531.713 68.9332 li
461.891 69.1752 mo
531.713 69.1752 li
461.891 70.7512 mo
531.713 70.7512 li
461.891 71.7212 mo
531.713 71.7212 li
461.891 74.1451 mo
531.713 74.1451 li
461.891 74.5092 mo
531.713 74.5092 li
461.891 74.9941 mo
531.713 74.9941 li
461.891 76.2062 mo
531.713 76.2062 li
461.891 76.6912 mo
531.713 76.6912 li
461.891 80.5702 mo
531.713 80.5702 li
461.891 81.0552 mo
531.713 81.0552 li
461.891 82.3882 mo
531.713 82.3882 li
461.891 82.7521 mo
531.713 82.7521 li
461.891 82.9941 mo
531.713 82.9941 li
461.891 84.6921 mo
531.713 84.6921 li
461.891 85.7831 mo
531.713 85.7831 li
461.891 85.9042 mo
531.713 85.9042 li
461.891 87.4792 mo
531.713 87.4792 li
461.891 89.0552 mo
531.713 89.0552 li
461.891 89.2972 mo
531.713 89.2972 li
461.891 89.9042 mo
531.713 89.9042 li
461.891 90.5101 mo
531.713 90.5101 li
461.891 91.1161 mo
531.713 91.1161 li
461.891 92.2072 mo
531.713 92.2072 li
461.891 94.1462 mo
531.713 94.1462 li
461.891 94.7521 mo
531.713 94.7521 li
461.891 97.1772 mo
531.713 97.1772 li
461.891 100.086 mo
531.713 100.086 li
461.891 100.813 mo
531.713 100.813 li
461.891 104.45 mo
531.713 104.45 li
461.891 106.632 mo
531.713 106.632 li
461.891 106.875 mo
531.713 106.875 li
461.891 108.571 mo
531.713 108.571 li
461.891 110.511 mo
531.713 110.511 li
461.891 113.542 mo
531.713 113.542 li
461.891 113.905 mo
531.713 113.905 li
461.891 125.179 mo
531.713 125.179 li
461.891 129.059 mo
531.713 129.059 li
461.891 131.604 mo
531.713 131.604 li
461.891 138.513 mo
531.713 138.513 li
461.891 143.605 mo
531.713 143.605 li
461.891 153.182 mo
531.713 153.182 li
461.891 168.697 mo
531.713 168.697 li
461.891 173.667 mo
531.713 173.667 li
461.891 193.305 mo
531.713 193.305 li
461.891 234.277 mo
531.713 234.277 li
@
grestore
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: ITAQMX+TimesNewRomanPS AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBDEBCC+TimesNewRomanPS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/N <1C60D8A8C9B6079F1E4BF1D2F1A5C4F0788EBC8FFA49E681CC7B9C251E1CEEC297A8BEAA47DE23B5022C6BFCA8EEE4CD66F88E54A0AD7CE2637A26C5D1A783A47CA03C212AC3CBAB2150F249D4EECF865959158F43BD52BDC92B17C75DEB7960546FB177125E871245835BCA8AE0527A724CF56A89909487030FCAA713F3578057A7FA4517BB79> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBCC+TimesNewRomanPS /Encoding getdup 78 /N putpop%ADOEndSubsetFont
/BDEBCC+TimesNewRomanPS*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus 2{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven /.notdef /nine 9{/.notdef}rp /C /D /E 7{/.notdef}rp /M /N 2{/.notdef}rp /Q 4{/.notdef}rp /V 3{/.notdef}rp /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /d /e /f 2{/.notdef}rp /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /s /t /u /v 8{/.notdef}rp /minus 128{/.notdef}rp]BDEBCC+TimesNewRomanPS nfBDEBCC+TimesNewRomanPS*1 [10.1826 0 0 -10.1826 0 0 ]msf442.063 142.514 mo(2)shBDEBCC+TimesNewRomanPS*1 [6.061 0 0 -6.061 0 0 ]msf447.154 136.454 mo(+)shBDEBCC+TimesNewRomanPS*1 [10.1826 0 0 -10.1826 0 0 ]msf535.836 197.185 mo(2)shBDEBCC+TimesNewRomanPS*1 [6.061 0 0 -6.061 0 0 ]msf540.927 191.125 mo(+)shBDEBCC+TimesNewRomanPS*1 [10.1826 0 0 -10.1826 0 0 ]msf443.032 117.664 mo(3)shBDEBCC+TimesNewRomanPS*1 [6.061 0 0 -6.061 0 0 ]msf448.123 111.604 mo(\177)shBDEBCC+TimesNewRomanPS*1 [10.1826 0 0 -10.1826 0 0 ]msf536.805 135.362 mo(3)shBDEBCC+TimesNewRomanPS*1 [6.061 0 0 -6.061 0 0 ]msf541.898 129.302 mo(\177)sh307.872 167.123 mo(20)[3.02991 0 ]xshBDEBCC+TimesNewRomanPS*1 [10.0613 0 0 -10.0613 0 0 ]msf313.932 173.184 mo(Ne 2)[7.26425 4.46722 2.51331 0 ]xshBDEBCC+TimesNewRomanPS*1 [6.061 0 0 -6.061 0 0 ]msf333.208 167.123 mo(+)sh307.386 37.7807 mo(20)[3.02991 0 ]xshBDEBCC+TimesNewRomanPS*1 [10.0613 0 0 -10.0613 0 0 ]msf313.447 43.8403 mo(Ne 4)[7.26425 4.46722 2.51431 0 ]xshBDEBCC+TimesNewRomanPS*1 [6.061 0 0 -6.061 0 0 ]msf332.724 37.7798 mo(+)shBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf315.792 257.009 mo(FIG.7.Knownlevelsin)[4.98441 2.98486 6.47284 5.2023 4.4823 6.02991 6.47284 4.4823 4.25726 6.47104 7.19107 2.49265 3.75333 4.34692 3.98019 2.49176 6.20123 2.49265 0 ]xshBDEBBZ+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf407.763 253.751 mo(90)[2.98819 0 ]xshBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf414.234 257.009 mo(Zrand)[5.47931 5.70615 3.98196 4.4841 0 ]xshBDEBBZ+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf441.063 253.751 mo(92)[2.98819 0 ]xshBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf447.543 257.009 mo(Zrupto5.3MeV[)[5.47839 5.6972 4.48318 7.19104 2.49268 7.18207 4.48322 2.24161 7.18207 7.97122 3.98108 9.17084 0 ]xsh.883635 .769161 0 0 cmyk
BDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf518.085 257.009 mo(20)[4.4823 0 ]xsh1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: SBTAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBDEBBZ+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/semicolon <1C60D8A8C9B854D09D7AD97383C8388D4CD6615DF9607347FFFDEAB0E7479FDC37D8D2BA7CE7A7E10202379107368A0370C61822048DB2CEB190B444AC36D82DCB4D58EC11FE55E48CC97CF38F7FCAC86DE803E25C3A630623B78B93D91235D86534524222C8ED158E98604639FFBE02473907B87A9E22291E8041B73C2CEBB5F6401B737226D9084EEDDDA9E9> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBBZ+Times-Roman /Encoding getdup 59 /semicolon putpop%ADOEndSubsetFont
/BDEBBZ+Times-Roman*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /.notdef /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C /D /E /F /G /H /I /.notdef /K /L /M /N /O /P /.notdef /R /S /T /U /V /W /.notdef /Y /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y 48{/.notdef}rp /quotedblleft 3{/.notdef}rp /fi 11{/.notdef}rp /quotedblright 69{/.notdef}rp]BDEBBZ+Times-Roman nfBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf527.049 257.009 mo(].The)[2.98755 4.94135 5.48022 4.48499 0 ]xsh303.839 267.971 mo(leveldensityissigni\256cantlyhigherfortheheavierisotopeowing)[2.49176 3.75333 4.34692 3.97839 6.18323 4.4823 3.98019 4.4823 3.48709 2.49176 2.49176 8.172 2.49176 7.17319 3.48709 2.49176 4.4823 4.4823 2.49176 4.98444 3.98016 3.98019 4.4823 2.49176 2.49176 8.17197 4.4823 2.49176 4.48233 4.4823 3.98019 6.6781 2.98843 4.4823 6.66916 2.49176 4.4823 7.65912 4.4823 3.98019 3.79819 4.4823 2.49176 3.98022 6.68707 2.49176 3.48709 4.48233 2.49176 4.4823 4.4823 7.66809 4.25726 6.47101 2.49176 4.48236 0 ]xsh303.839 278.925 mo(tothetwovalenceneutronsoutsidethe)[2.49176 7.91104 2.49179 4.4823 7.40714 2.49265 6.38141 7.92001 4.25723 3.97842 2.49176 3.98016 4.4823 3.98019 7.41611 4.4823 3.98019 4.4823 2.49176 2.98483 4.4823 4.4823 6.93021 4.4823 4.4823 2.49176 3.48709 2.49176 4.4823 7.40717 2.49176 4.4823 0 ]xshBDEBCA+MTMI*1 [8.9664 0 0 -8.9664 0 0 ]msf454.036 278.925 mo(N)shBDEBCD+MTSY*1 [8.9664 0 0 -8.9664 0 0 ]msf464.16 278.925 mo(D)shBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf473.638 278.925 mo(50closedshell.The)[4.48322 7.92001 3.98108 2.49265 4.48322 3.48798 3.98111 7.91104 3.48798 4.48322 3.98108 2.49268 2.49268 5.67035 5.47839 4.48322 0 ]xsh303.838 289.887 mo(dashedlinesindicatetheenergiesofthemostcollectivestatesin)[4.4823 3.98019 3.48709 4.4823 3.98019 8.18094 2.49176 2.49176 4.48233 3.98016 7.18216 2.49265 4.48233 4.4823 2.49176 3.98019 3.98016 2.49176 7.67703 2.49268 4.4823 7.67703 3.98019 4.4823 3.98019 2.82611 4.4823 2.49176 3.98019 7.19113 4.4823 6.6781 2.49176 4.4823 7.67703 6.97498 4.48233 3.48709 6.17429 3.97839 4.4823 2.49176 2.49176 3.98022 3.98016 2.49176 2.26852 4.34689 7.68604 3.49243 2.49182 3.98016 2.49176 3.98022 7.18213 2.49268 0 ]xsh303.838 300.849 mo(thesetwonuclides;quadrupole\(2)[2.49265 4.48322 3.98108 3.48801 7.31747 2.49265 6.38141 7.82138 4.48322 4.48318 3.98108 2.49268 2.49265 4.48322 3.98108 3.48798 5.82278 4.48322 4.48318 3.98108 4.48322 2.98575 4.48318 4.48322 4.48318 2.49268 7.32645 2.98843 0 ]xshBDEBCD+MTSY*1 [5.9776 0 0 -5.9776 0 0 ]msf429.147 297.59 mo(C)shBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf434.304 300.848 mo(\)andoctupole\(3)[6.32751 3.97839 4.4823 7.82141 4.4823 3.98019 2.49176 4.4823 4.4823 4.4823 2.49176 7.31747 2.98843 0 ]xshBDEBCD+MTSY*1 [5.9776 0 0 -5.9776 0 0 ]msf498.591 297.59 mo(\241)shBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf503.748 300.848 mo(\)vibrational)[6.31766 4.48233 2.49176 4.4823 2.9848 3.98022 2.49176 2.49176 4.4823 4.4823 3.98016 0 ]xsh303.839 311.802 mo(states.Eventhesecollectivestatesindividuallycontributelittleto)[3.48801 2.49265 3.98108 2.49268 3.98108 3.48801 5.8685 5.48108 4.34692 3.97839 8.11816 2.49268 4.48318 3.98108 3.48801 7.61426 3.98108 4.48322 2.49268 2.49265 3.98108 3.98108 2.49268 2.26849 4.34689 7.62326 3.49246 2.49268 3.98108 2.49268 3.98108 7.12836 2.49265 4.48318 4.48322 2.26849 4.48322 2.49265 4.48318 4.48322 3.98108 2.49268 2.49265 8.11819 3.98108 4.48318 4.48318 2.49268 2.98575 2.49265 4.30206 4.48233 2.49265 7.62323 2.49268 2.49268 2.49268 2.49261 2.49268 7.60529 2.49268 0 ]xsh303.839 322.764 mo(the)[2.49176 4.4823 0 ]xshBDEBCA+MTMI*1 [8.9664 0 0 -8.9664 0 0 ]msf319.635 322.764 mo(Q)shBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf327.24 322.764 mo(-valuespectra\(seeFig.)[2.98575 4.25723 3.98108 2.49268 4.48318 8.82922 3.48801 4.48318 3.98111 3.98108 2.49265 2.98575 8.82025 2.98575 3.48801 3.98108 8.82025 4.98529 2.49268 4.48322 0 ]xsh.883635 .769161 0 0 cmyk
BDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf422.82 322.764 mo(5)sh1 /0 /CSD get_res sepcs
1 sep
BDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf427.302 322.764 mo(\).Itisclear,however,thatthe)[2.98486 7.08344 2.98486 7.33539 2.49176 8.32538 3.98019 2.49176 3.98019 3.98016 2.62799 7.09244 4.4823 4.25723 6.47107 3.75333 4.34692 3.98019 2.62799 7.10138 2.49268 4.4823 3.98016 7.33539 2.49268 4.4823 0 ]xsh303.84 333.726 mo(largenumberofnoncollective\(n-particle-n-hole\)statesgeneratesa)[2.49176 3.98019 2.82614 4.4823 6.9122 4.4823 4.4823 6.97498 4.4823 3.98019 5.93118 4.4823 5.9133 4.4823 4.4823 4.4823 3.98019 4.4823 2.49176 2.49176 3.98016 3.98019 2.49176 2.26849 4.34692 6.93015 2.98843 4.4823 2.98483 4.4823 3.98019 2.98483 2.49176 2.49176 3.98022 2.49176 3.98016 2.98486 4.48233 2.98483 4.48233 4.4823 2.49179 3.98016 5.92224 3.48712 2.49176 3.98019 2.49179 3.98016 6.41736 4.4823 3.98016 4.48236 3.98016 2.98486 3.98016 2.49182 3.98016 6.43524 0 ]xsh303.84 344.68 mo(broadbackgroundtothe)[4.4823 2.98486 4.4823 3.98019 6.55173 4.4823 3.98019 3.98019 4.4823 4.4823 2.98486 4.4823 4.4823 4.4823 6.56161 2.49176 6.55173 2.49176 4.48233 0 ]xshBDEBCA+MTMI*1 [8.9664 0 0 -8.9664 0 0 ]msf392.791 344.68 mo(Q)shBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf400.396 344.68 mo(-valuespectrumfor)[2.98575 4.25723 3.98108 2.49268 4.48318 6.04785 3.48801 4.48318 3.98111 3.98108 2.49265 2.98575 4.48318 9.04532 2.98843 4.48318 0 ]xshBDEBBZ+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf472.095 341.429 mo(20)[2.98819 0 ]xshBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf478.566 344.678 mo(Ne)[6.47104 0 ]xshBDEBCD+MTSY*1 [8.9664 0 0 -8.9664 0 0 ]msf492.507 344.678 mo(C)shBDEBBZ+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf502.992 341.429 mo(92)[2.98819 0 ]xshBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf509.463 344.678 mo(Zr.Arrows)[5.48199 2.98932 4.30206 6.47107 2.98932 2.98938 4.2572 6.47736 0 ]xsh303.839 355.64 mo(indicatetheenergiesofthe2)[2.49176 4.4823 4.4823 2.49176 3.98019 3.98019 2.49176 6.28186 2.49268 4.4823 6.27289 3.98016 4.48233 3.98016 2.82614 4.4823 2.49176 3.98019 5.78699 4.4823 5.27399 2.49176 4.4823 6.27289 0 ]xshBDEBCD+MTSY*1 [5.9776 0 0 -5.9776 0 0 ]msf407.259 352.382 mo(C)shBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf414.711 355.64 mo(and4)[3.97928 4.48141 6.78577 0 ]xshBDEBCD+MTSY*1 [5.9776 0 0 -5.9776 0 0 ]msf434.439 352.382 mo(C)shBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf441.891 355.64 mo(rotationalstatesin)[2.98486 4.4823 2.49176 3.98016 2.49176 2.49179 4.4823 4.4823 3.98019 4.78806 3.49246 2.49176 3.98019 2.49176 3.98019 5.77802 2.49265 0 ]xshBDEBBZ+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf510.03 352.382 mo(20)[2.98819 0 ]xshBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf516.501 355.64 mo(Ne.Note)[6.47461 3.98199 4.53613 6.47101 4.48413 2.49353 0 ]xsh303.839 366.602 mo(that75%ofthenoncollectivebackgroundcomesfromstatesbelow)[2.49176 4.4823 3.98019 5.22025 4.4823 4.4823 10.1974 4.4823 5.71512 2.49176 4.4823 6.71405 4.4823 4.4823 4.4823 3.98019 4.4823 2.49176 2.49176 3.98019 3.98016 2.49176 2.26852 4.34689 6.71405 4.4823 3.98019 3.98019 4.4823 4.4823 2.98486 4.4823 4.4823 4.4823 7.22693 3.98016 4.48233 6.97495 3.98022 6.21915 2.98486 2.98483 4.48233 9.70255 3.49246 2.49179 3.98016 2.49176 3.98022 6.21021 4.4823 3.98022 2.49176 4.25726 0 ]xsh303.839 377.556 mo(5MeVexcitationenergy.)[6.72299 7.97479 3.97931 8.72162 3.84299 4.4823 3.97931 2.49084 2.49088 3.97928 2.49088 2.49088 4.48141 6.73196 3.97839 4.48141 3.97928 2.82614 4.4823 3.89679 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf303.84 400.73 mo(becalculatedusingastandardoptical-modelpotential.The)[4.97931 8.33371 4.42142 4.42139 2.76761 4.42142 4.97931 2.76761 4.42139 2.76764 4.42139 8.9006 4.97931 3.87354 2.76761 4.97931 8.8916 8.32477 3.87354 2.76761 4.42139 4.97931 4.97931 4.42139 3.31549 8.89163 4.97931 4.97928 2.76761 2.76761 4.42142 4.42139 2.76761 3.31546 7.7489 4.97931 4.97931 4.42142 6.69586 4.97928 4.97931 2.76764 4.42139 4.97931 2.76764 2.76758 4.42139 2.76758 6.40796 6.08508 4.97931 0 ]xsh303.84 412.187 mo(imaginarypartwillclearlybesmallfor)[2.76862 7.74991 4.42239 4.98029 2.76862 4.98032 4.42239 3.31647 9.67468 4.98032 4.42239 3.31647 7.45203 7.19101 2.76859 2.76862 7.45203 4.42239 2.76862 4.42239 4.42239 3.31647 2.76862 9.66571 4.98029 9.10782 3.87454 7.74988 4.42242 2.76859 7.45203 3.32047 4.98029 0 ]xshBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf477.711 408.569 mo(20)[3.4834 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf485.181 412.187 mo(Ne)[7.19101 0 ]xshBDEBCD+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf500.679 412.187 mo(C)shBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf512.325 408.569 mo(90)[3.4834 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf519.795 412.187 mo(Zr,but)[6.09009 3.32043 7.1731 4.77905 4.98425 0 ]xsh303.841 423.644 mo(signi\256cantlylargerfor)[3.87454 2.76859 4.98032 4.98029 2.76862 5.53821 4.42239 4.42242 4.98029 2.76862 2.76862 9.42261 2.76862 4.42239 3.14114 4.98029 4.42239 7.75781 3.31647 4.98032 0 ]xshBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf401.076 420.026 mo(20)[3.4834 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf408.546 423.644 mo(Ne)[7.19101 0 ]xshBDEBCD+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf424.035 423.644 mo(C)shBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf435.681 420.026 mo(92)[3.4834 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf443.151 423.644 mo(Zr.Weshallseethatthe)[6.08609 3.31647 6.92999 8.6037 8.85574 3.87952 4.98032 4.42239 2.76862 7.20892 3.87952 4.42239 8.85574 2.76862 4.98029 4.42242 7.20892 2.76862 4.98029 0 ]xsh303.841 435.101 mo(effectofthisontheelastictestfunctionofEq.\()[4.42239 3.0694 3.3165 4.42239 4.42239 6.59723 4.98032 7.14609 2.76862 4.98029 2.76862 7.69519 4.98029 8.80197 2.76862 4.98029 8.24405 4.41943 2.76859 4.42242 3.87451 2.76862 2.76859 8.24405 2.76862 4.42239 3.87454 6.58826 3.31647 4.98032 4.98032 4.42236 2.76862 2.76862 4.98029 8.81094 4.97733 7.13712 6.08408 4.98032 6.31827 0 ]xsh.883635 .769161 0 0 cmyk
BDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf506.97 435.101 mo(3)sh1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: SBTAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBDEBBZ+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Q <1C60D8A8C9B6079F6E1E76D0A13BD11B6B3F4804F5A19B1868DD68EA07A533D55BA1DB5426F41366BF265130E897B52042AE15E9F22EB4DDC77B8AFF8E106E64BC8C0CBA2BCE6FA366881067DAA81F67C7CCDC9FC11A0D53E651A078B7AB8936F1603D96C8EB8D33A8044FEF54C3B8F3C8467977798B85A4774515CCA3FC6D9C7CE322CBB9480B27BF912F> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBBZ+Times-Roman /Encoding getdup 81 /Q putpop%ADOEndSubsetFont
/BDEBBZ+Times-Roman*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /.notdef /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C /D /E /F /G /H /I /.notdef /K /L /M /N /O /P /Q /R /S /T /U /V /W /.notdef /Y /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y 48{/.notdef}rp /quotedblleft 3{/.notdef}rp /fi 11{/.notdef}rp /quotedblright 69{/.notdef}rp]BDEBBZ+Times-Roman nfBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf511.948 435.101 mo(\)forthis)[7.14609 3.3205 4.98029 7.13715 2.76855 4.98035 2.76862 0 ]xsh303.842 446.558 mo(systemisresponsibleforthesmearingofthequasielastic)[3.87454 4.98029 3.87454 2.76862 4.42239 12.51 2.76859 8.63965 3.31647 4.42239 3.87454 4.98032 4.98029 4.98032 3.87451 2.76862 4.98032 2.76859 9.19849 3.31647 4.98032 8.08157 2.77158 4.98032 9.18054 3.87454 7.74988 4.42242 4.42236 3.3165 2.76859 4.98032 9.75638 4.97729 8.0816 2.77158 4.98032 9.18851 4.98032 4.98029 4.42242 3.87451 2.76868 4.42236 2.76862 4.42242 3.87451 2.76862 2.76862 0 ]xsh303.842 458.015 mo(barrierdistribution.)[4.98129 4.4234 3.31747 3.31747 2.76959 4.4234 5.81409 4.98132 2.76959 3.87552 2.76959 3.31747 2.76962 4.77905 4.97733 2.76959 2.76959 4.98129 4.98132 0 ]xsh315.794 469.472 mo(Infact,wewillshowthatbecausetheunderlyingbarrier)[3.31647 8.45129 3.22183 4.42239 4.42239 2.76862 5.96658 7.19101 7.89337 7.19101 2.76859 2.76862 6.23657 3.87454 4.98032 4.72525 10.6739 2.76862 4.98032 4.42239 6.24554 4.98032 4.42239 4.42239 4.42239 4.98029 3.87457 7.91129 2.77158 4.98035 7.89334 4.98032 4.98032 4.98032 4.42242 3.31647 2.76862 4.98029 2.76862 4.98035 8.46918 4.98035 4.42236 3.31653 3.31647 2.76862 4.42236 0 ]xsh303.842 480.929 mo(distributionsforthesetwosystemsarethesame,wecan,in)[4.98032 2.76859 3.87454 2.76862 3.31647 2.76859 4.77908 4.97729 2.76862 2.76862 4.98029 4.98032 7.27176 3.3165 4.98029 6.72269 2.77161 4.98029 4.42242 3.87451 7.82065 2.77161 7.09235 8.37854 3.87454 4.98032 3.87451 2.76862 4.42239 7.74991 7.27179 4.4194 3.31647 7.82962 2.76862 4.98032 7.82065 3.87952 4.42239 7.74991 4.42242 5.89487 7.19199 7.82068 4.42236 4.42242 4.98029 5.90387 2.76862 0 ]xsh303.842 492.386 mo(thisspecialcase,bypassthetheoreticalcalculationof)[2.76761 4.97931 2.76761 7.91138 3.87354 4.97931 4.42139 4.42142 2.76761 4.42139 6.81345 4.42139 4.42142 3.87354 4.42142 6.53445 4.97931 4.97931 4.97931 4.42139 3.87354 7.92035 2.77161 4.97931 8.45126 2.76761 4.97931 4.42139 4.97931 3.31549 4.42139 2.76761 2.76761 4.42139 4.42142 6.82236 4.42142 4.42142 2.76758 4.42142 4.97931 2.76761 4.42139 2.76761 2.76761 4.97931 9.0271 4.97729 0 ]xsh%ADOBeginSubsetFont: TZMBAA+MTMI AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginBDEBCA+MTMI dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B6D5A02F568D2AAE95CCE534B6DDEA8B462AFE4EFBE8D19C6B165CD1CD462A8C42351BBD4CD93A5B52F73DB3424773CFFEC450C54D3E25E5D40554EE936BAEEDCB2084A65F1C28BDCA6F2678C8B501B6A7AA62396A043085BB6A2B7D4F8A921531801B7131138443C7A9211F67A8DFF40B588E4ECDE4DF1CAFC4B98D> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBCA+MTMI /Encoding getdup 68 /D putpop%ADOEndSubsetFont
/BDEBCA+MTMI*1 [58{/.notdef}rp /period /.notdef /less /slash 6{/.notdef}rp /D 9{/.notdef}rp /N 2{/.notdef}rp /Q 174{/.notdef}rp]BDEBCA+MTMI nfBDEBCA+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf531.157 492.386 mo(D)shBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf539.127 493.88 mo(QE)[5.03162 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf303.84 503.843 mo(for)[3.31647 4.98032 0 ]xshBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf317.763 500.225 mo(20)[3.4834 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf325.233 503.843 mo(Ne)[7.19101 0 ]xshBDEBCD+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf340.722 503.843 mo(C)shBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf352.368 500.225 mo(92)[3.4834 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf359.838 503.843 mo(Zrandreproducetheexperimentaldatathrough)[6.08508 5.64273 4.42142 4.97931 7.28964 3.31546 4.42142 4.97931 3.31546 4.97931 4.97931 4.97931 4.42142 6.74966 2.76761 4.97931 6.72278 4.26596 4.97931 4.97931 4.42142 3.31546 2.76761 7.7489 4.42142 4.97931 2.76758 4.42142 5.10284 4.97928 4.42142 2.76761 6.73175 2.77258 4.97931 3.31549 4.97925 4.97937 4.97925 0 ]xsh303.84 515.3 mo(asimpletransformationofthedatafor)[8.80197 3.87949 2.76862 7.74991 4.98032 2.76859 8.80197 2.77161 3.31647 4.42239 4.98029 3.87454 3.31647 4.98032 3.31647 7.74991 4.42239 2.76862 2.76862 4.98029 9.35986 4.97733 7.70401 2.77158 4.98032 8.80194 4.98032 4.42239 2.76862 8.81091 3.32147 4.98029 0 ]xshBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf472.833 511.682 mo(20)[3.4834 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf480.303 515.3 mo(Ne)[7.19101 0 ]xshBDEBCD+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf495.792 515.3 mo(C)shBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf507.438 511.682 mo(90)[3.4834 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf514.908 515.3 mo(Zr.This)[6.09406 3.32446 6.86719 6.08411 4.98828 2.77655 0 ]xsh303.841 526.757 mo(transformationwill,ofcourse,dependonthenatureofthe)[2.76862 3.31647 4.42239 4.98032 3.87451 3.3165 4.98029 3.3165 7.74988 4.42242 2.76859 2.76862 4.98029 8.90958 7.19098 2.76862 2.76862 2.76859 6.4169 4.98032 7.25369 4.42239 4.98032 4.98029 3.31647 3.87454 4.42239 6.4259 4.98029 4.42242 4.98029 4.42239 4.98032 8.92847 4.98029 8.91855 2.76862 4.98032 8.35162 4.98035 4.42239 2.76862 4.98032 3.31647 8.36066 4.97729 7.25366 2.77161 4.98035 0 ]xsh303.841 538.214 mo(absorptivepotentialfor)[4.42142 4.97928 3.87354 4.97931 3.31549 4.97931 2.76761 2.51953 4.82388 8.9823 4.97931 4.97931 2.76761 4.42142 4.97931 2.76761 2.76761 4.42139 7.32651 3.32047 4.97931 0 ]xshBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf405.063 534.596 mo(20)[3.4834 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf412.533 538.214 mo(Ne)[7.19101 0 ]xshBDEBCD+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf428.022 538.214 mo(C)shBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf439.668 534.596 mo(92)[3.4834 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf447.138 538.214 mo(Zr,whichweshallnow)[6.08807 3.31845 7.02863 7.19101 4.9823 2.7706 4.42438 9.53122 7.194 8.97333 3.8765 4.9823 4.42444 2.77057 7.31653 4.97736 4.72522 0 ]xsh303.841 549.671 mo(investigate.)[2.76959 4.58081 4.82388 4.41943 3.87552 2.76959 2.76959 4.92352 4.4234 2.76959 4.4234 0 ]xsh%ADOBeginSubsetFont: NZPPMX+Times-Bold AddGlyphs
%ADOt1write: (1.0.24)systemdict beginBDEBCB+Times-Bold dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B8707C5500383F1D3BFE600CE516A971D6EA7F6AE9C8756BC17E51C2C85C84EA248EB15468C5> |-/A <1C60D8A8C9B6079F1E726295E14B9D3F70CD5E0B99FB5C54189240A279B58B7B919A72788E79254835EEB6479A6759338847EC952AA1E22C8ADF4C1F9F19082442820F5919D1A62E8EA10491F24180442849C5A953C3F1A51FFC70622AE77990B1AF30131DC78F155E8B9BB9DB5DFF67> |-/B <1C60D8A8C9B64EDF8814F057C37C59CCD006BC935F2BA3295A5254F083979C002DA8C3A3E52C9F03FF7E11514181D07DFD7B9E37DBC2E5FEAC914E0221B12DBB05B0DFF86F9AA7230614E808E767488BEDD76D78B68EF97296958A4EEAAC4EE6AC5D5B9DE49CA22D662D050AA4BE45289459B00D226948E6707EA267F5F5365958E8CF7346C9DBFFD4AE77F731EAB97058D9240371AABAADB5F83389465963E65549CC2515257EA6433E115FE8FFF842EB6889C5C8F1FD4DF00EAC58B278420DC9E14816A93AB8A89C5A2DCA47BE671E92BA7FC2B0FA08A1FB138360B15FEB85D14DEA239FC7E9> |-/C <1C60D8A8C9B6079FED7B811C9CB98FDD2CBB73B75B81400446779C1C292B57E4F38E889FF7DAA4021ADF960236F2D2B95CAC0CC87161AEA0313D48BD879418C174C71B8E91186A8512D49BC05F2B41E15EBF686BAC4F3CC821D2E1F5D5E66103A08A00F7850F41D613A30A79C535BD9C41E4F9> |-/D <1C60D8A8C9B6079F1E7838DA6532DF14AC89BC0747D3B6E14282B280249A1D0E01031FD533753E58B6C552CF5EF70786142BA5CA0CAD38B4C0D6A8308758EA9457BA25D92BE6F9E1A28D4BCBF273E722B1AFB5558A9013E0E620A575EE0127B4331CCC4FFC59D9F300A83BFB0AA53F985F39C19A2B05D0137DD074A84B452BA41ED2FFE2B994EBE1350C> |-/E <1C60D8A8C9B64EDF881B97E2E5D84D264D6FA01EE653ED7374EAF044D90D37BE338DF407FB75C867794D4250D63DD220700516034551C05226939AD33EAB118BE54C951D70812429005575ECFF05541440BECE916398DB5BA7CCC10B886EBE237CFF27E89773D8F53D685F0DD9A9D4FDE9844BDB0B654A2D862A3C5D70E02B926992800D51D9642E12EFA31D87D569B5E07B0A18F53783795CFB> |-/G <1C60D8A8C9B6FF867A6C34F82DD70A415905DF14BDE3E9C3BF95C9BC45A448253C6137EFF46A7B15CC7A14CDEA72B130119E646024945BCE49EFC42C69FE39622AD55B14121C05D60EB9CE470B3D17E5411E12B002FBFC0FF0DAAEB263F356AD70B1B6C515C5C191AE9D14F200E36C4EF44490E3A51617963B1AFB60AFBDC1CBF8F83B93941D9155CE42174728C93EEF447A6D109C664706BE213E14F225D9D390C866220E03D2C7D3E79D8E4A678E3314A2> |-/H <1C60D8A8C9B6FF86897C29919E38C6A18551382CF78CE4A010663E2999C743ADB761C8CADE7A18136FDBC415C678F6F975920C613F8B525E14AFDCF9F298763D811536A386FB66AA7F90ADE26E76B9968335C44ADCFC247D6192B412CC18280DA85F96DD68AAFC728584EADC71B7C50DEF0C89E3F104D6CF61B3A9E58684CA55BB4BEFDAE20E0D736BEB5047> |-/I <1C60D8A8C9B7361F7E0A3182AF0840CF1C57BBC49E9A8C6B0AA7B6E467587CBB397231CD7BC1746C8C5839DD306946786BBAF8E2E1FB3B41CA7009BD13B807FD9CB9BFA9E93CCC74> |-/K <1C60D8A8C9B6FF86897C299F92E3BF06F952D971C48F01178382F74D76D633D4E4C40845ED1E21A3C93B95408896749BFA3D827B383DB1239D49CEEA6E6F0D070004C9759371A0C2E3B006CB7BAE14E8F9BBD0B41002C6475639FA3C2774ABCC607D8F724503CEB1D3358054308150C3D4F82FBC2DE78FFEB204FEF049185ACFF11FF5F60535D8820311D959DEEADA040B6AB88416D5C5> |-/L <1C60D8A8C9B64EDF8815C1AD7B5B26AB26BCBC091C6DF6670E573A3698A487FA937A76353FC8A27E3EC6331795AB1229A5461F60BB5E5612255C1FB1246C71D14F65C2F7FA78B27A3178021FAADA0B0D5CF511ECD1587461B88F5173C1FF2AE3AD6C2F10522891F194F1CB> |-/N <1C60D8A8C9B6079F1E72629B90E3BF572C953D8759DE3E6006A10F5E57068F9A03033AC5EA12BE216216DBB5AE366546D563309C4FED29C4D77CE6955423F62A19E925AAA030C45D43610BC0195EA52D665B51476DF5A0C2DB4E0E9B8B74FA1C6ECCFEB437204FDDB974B090A6D93625A7E1649C5CEFD4F179D24392834F3E70F952D3DC65983D8B7549> |-/O <1C60D8A8C9B6FF867A6C34F63CFBA483F20348D2DAD0C454E283655C995D5D5CF5D377DE69CD8137822B1BF27586C2738DBEFFB5BB1B1A732FF2D146393501E2A62338C9B42B1491A6EFD4FCFADFB4D3F538B177BA9C6FD9E278A31D958BA09D74E78DDC> |-/P <1C60D8A8C9B7D8BE6A7B5A602BBF42770F9BDE491933D5FA4FE426A02D4E5718C7278054B3664DB7B467D4E48E5F9A61ADDBE2A88D12A0D275033B84828459EA73F7D60A0030F5C64D35EF7D6A541DCC0C3AE0147A28E28AFC6BF8405DDD9AB30FDB511D97C9319635251B4D563F605D139B4EBB5BDEEA3D7D7579DDD9A8E37233BD14AE123F762D22D217B02315FA89FBDB00B1A1133B5C37ADD0E19F1E4E8150D4437701A3B3B47733> |-/Q <1C60D8A8C9B6FF86F96C3835ECDBFA567AD260DB3E97BCE4733FE6F24EF0ED2ABDEBE054EA3291CC45CCC885B142B815D2FA1FEC1A802BD3554E693C7C29B6CEEB1818EFBB16E819EFE4DA472147AC6775257FA19FD6EEB3D7A8295C3472177D585DF1DB7CB8451EBD1DD1FEB75E8745E00660E3169D324121EADC9D175EF8F9020F86AAC2B09A317A0505E2FD912F0F33130BE2A06D15682976646B3915DA8625C74D1C003E494043492AE404405CCF35D47B8AD24C527DBF205226230779FD90FD81315A3DECF2C9BA0CABB261DB85AD5F458CCE> |-/R <1C60D8A8C9B6079F1E72629575480DC45EFF6E4AB64B66A7652CD7E16EAC91449245DD3CBA37D2A604CF72E29588675CFDFE01E4A88B3F48C83BCCA7256E85D1ED04A24E78F3B0E49702EE55B1A71A005E9BFB7D60AD519F80EDCD2ADF5C0C427374C26DC43CA4BD3A71528CB3166942BEAEF2FD3B0D1F3387D886927B8EA602B7357C09308F1DBC79BF3317FED3F200041EAB4FF32714D1A7764237CCB5F518A1E2> |-/S <1C60D8A8C9B7EF32A40B3F7CFC1EB7E9ED1A9879448E6DF4EAA6E621EE517E47285391CFFAB191F3C3BA03401452E59BC25F9E3497798374417C4A14EF122C2CAA1114DA8FC0A0D1D558EC4482CC1438E830AB88C11785887BF6F10CA423D0D695D2834E800725F16D76030FA546B077643DB9B71AF606A8C0D63F39360E8C11419A3BB5960B3110224661DA080E88EA9BA00998137D89CD24E8CA496A72DD45E1DBE8DB88BC7D540073C6F33375EFC2786BF4863C1BB8F76B0A79DB18F5C17A743C7DD53BBCA6A3AA> |-/T <1C60D8A8C9B64EDF881B97EC50FCD51603E94B2D4284D633085583BD9B5B8F170F886F5B54A019DE2D2CC01BD239EA07DA4F881B25C0676E08731B6897C8DF35258E9A63DAF9A6382ECFD1B7FC7DF34C4643C960F54D0199CD6DD7ADFF2B6C2279> |-/U <1C60D8A8C9B6079FED7C4FD78730BA93E8975B39F1BF63F57A039CEE608AF8D6684F7A32A4357D5CB964BFB76E664D7BA816A7888BB43EA946A89471CCC97B8A5F0855A62F64F19EB84AFBBA962B38664D8F2F5225E34483447295AA7D5E94E21245B6F01BC557F7107DAE084669E910926FDBB9EB513E2FBEA1AA15F1> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBCB+Times-Bold /Encoding getdup 46 /period putdup 65 /A putdup 66 /B putdup 67 /C putdup 68 /D putdup 69 /E putdup 71 /G putdup 72 /H putdup 73 /I putdup 75 /K putdup 76 /L putdup 78 /N putdup 79 /O putdup 80 /P putdup 81 /Q putdup 82 /R putdup 83 /S putdup 84 /T putdup 85 /U putpop%ADOEndSubsetFont
/BDEBCB+Times-Bold*1 [46{/.notdef}rp /period /.notdef /zero 7{/.notdef}rp /eight 8{/.notdef}rp /A /B /C /D /E /.notdef /G /H /I /.notdef /K /L /.notdef /N /O /P /Q /R /S /T /U 170{/.notdef}rp]BDEBCB+Times-Bold nfBDEBCB+Times-Bold*1 [8.9664 0 0 -8.9664 0 0 ]msf325.872 586.139 mo(III.BROADENINGTHEQUASIELASTICPEAKS)[3.48978 3.48981 3.48978 6.71405 5.98245 6.20117 6.61539 6.47556 6.47552 5.98245 6.47552 3.48981 6.47552 9.21655 5.98245 6.97766 8.22672 6.88531 5.93127 6.47104 4.98712 3.48978 5.98245 5.98245 6.47552 4.98712 5.98248 3.48978 8.70279 5.48019 5.98245 6.47552 6.97766 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf315.792 603.32 mo(Wenowwishtodemonstratethatthebroadeningofthe)[8.6037 8.37854 4.97931 4.72528 11.1511 7.19101 2.76761 3.87354 8.91852 2.77161 8.92847 4.97931 4.42142 7.7489 4.97931 4.97931 3.87354 2.76761 3.31546 4.42142 2.76758 8.37857 2.77158 4.97931 4.42142 6.71378 2.76764 4.97931 8.37854 4.97729 3.31549 4.97931 4.42139 4.97931 4.42139 4.97931 2.76761 4.97928 8.94647 4.97931 7.27161 2.76758 4.97931 0 ]xsh303.84 614.777 mo(quasielastictestfunctionofEq.\()[4.98129 4.98129 4.4234 3.87555 2.76959 4.4234 2.76959 4.4234 3.87552 2.76959 2.76962 8.71228 2.76962 4.4234 3.87552 7.04654 3.31747 4.98129 4.98132 4.42337 2.76962 2.76959 4.98129 9.2702 4.97733 7.60538 6.08408 4.98129 6.77658 0 ]xsh.883635 .769161 0 0 cmyk
BDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf443.951 614.777 mo(3)sh1 /0 /CSD get_res sepcs
1 sep
BDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf448.928 614.777 mo(\)\(i.e.,thesingle-barrier)[7.60538 3.32144 2.76862 2.48965 4.42239 2.48965 6.76761 2.76859 4.98032 8.70334 3.87952 2.76859 4.98032 4.98029 2.76862 4.42242 3.31647 4.98029 4.42242 3.31647 3.31647 2.76862 4.42236 0 ]xsh303.84 626.234 mo(peak\)issuf\256cienttoexplaintheshapeofthe)[4.97931 4.42139 4.42142 4.97931 7.48782 2.76761 8.01895 3.87354 4.97931 3.06943 5.5372 4.42142 2.76761 4.42139 4.97931 6.93896 2.76761 9.12573 4.26599 4.97931 4.97931 2.76761 4.42139 2.76761 9.15265 2.77161 4.97928 8.57684 3.8735 4.97931 4.42142 4.97931 8.57678 4.97931 7.47885 2.76761 4.97931 0 ]xsh%ADOBeginSubsetFont: TZMBAA+MTMI AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginBDEBCA+MTMI dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/f <1C60D8A8C9B7832495E3D18DB7B6E307E5FCC7B834BA9D23B0C10392F3101E120F93C35AC57434EBC4EF1367DBC0C26C4CB03F0EFF090C1B6C8B02FB04934D0BD0D995B08D2842DA5A851EB6C5D4F3CE75A59928AC05D8220F043F5A8BA47633B6963279D35FCE40C18A39EAC5C66731E4A6D072E51EEB6E5635831730FA01EE70F4B6FA66B93E045E55D07163783AB4242528F914FE> |-systemdict /gcheck known {setglobal} if end {end} ifendBDEBCA+MTMI /Encoding getdup 102 /f putpop%ADOEndSubsetFont
/BDEBCA+MTMI*1 [58{/.notdef}rp /period /.notdef /less /slash 6{/.notdef}rp /D 9{/.notdef}rp /N 2{/.notdef}rp /Q 20{/.notdef}rp /f 153{/.notdef}rp]BDEBCA+MTMI nfBDEBCA+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf499.069 626.234 mo(D)shBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf507.042 627.728 mo(QE)[5.03162 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf520.983 626.234 mo(forthe)[3.31549 4.97931 7.46985 2.77258 4.97931 0 ]xshBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf303.84 634.073 mo(92)[3.4834 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf311.31 637.691 mo(Zrtarget.Clearly,theseindividualquasielasticpeaks\()[6.08508 6.2644 2.76761 4.42142 3.14111 4.97931 4.42142 2.76761 5.41766 6.64212 2.76761 4.42142 4.42142 3.31546 2.76761 4.32877 5.41766 2.77158 4.97931 4.42139 3.87354 7.34445 2.77161 4.97928 4.97931 2.51956 4.97928 2.76764 4.97928 4.97931 4.42142 5.71454 4.97931 4.97931 4.42139 3.87354 2.76761 4.42142 2.76758 4.42142 3.8735 2.76764 2.76758 7.34442 4.97931 4.42142 4.42142 4.97931 6.81348 0 ]xshBDEBCA+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf530.47 637.691 mo(f)shBDEBBZ+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf535.806 639.185 mo(QE)[5.03162 0 ]xshBDEBBZ+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf545.607 637.691 mo(\))sh303.841 649.148 mo(willdependonthedegreeofabsorptionintotheweak,)[7.19101 2.76761 2.76761 8.40643 4.97931 4.42142 4.97931 4.42139 4.97931 10.6381 4.97931 10.6201 2.76761 4.97931 10.0622 4.97733 4.26599 4.97729 3.31549 4.42139 10.0712 4.97729 8.96429 4.42139 4.97931 3.87354 4.97931 3.31549 4.97931 2.76758 2.76764 4.97928 10.6201 2.77161 4.97928 2.76761 10.6201 2.77161 4.97931 10.0622 7.19104 4.42139 4.42139 4.97937 0 ]xsh303.841 660.605 mo(direct-reactionchannels,whichisgenerallyrepresentedbythe)[4.98032 2.76859 3.3165 4.42239 4.42239 2.76862 3.31647 3.31647 4.42239 4.42242 4.42239 2.76859 2.76862 4.98032 6.92102 4.42239 4.98029 4.42242 4.98029 4.98032 4.42239 2.76862 3.87451 4.44629 7.19202 4.98029 2.76862 4.42239 6.92102 2.77161 5.80527 4.98032 4.42239 4.98029 4.42242 3.31647 4.42242 2.76859 2.76862 6.92102 3.3165 4.42239 4.98032 3.31647 4.42242 3.87454 4.42239 4.98032 2.76865 4.42236 6.92999 4.98035 6.92102 2.76862 4.98029 0 ]xsh303.841 672.062 mo(introductionofasurfaceimaginarypotentialinoptical-model)[2.76862 4.98029 2.76862 3.31647 4.98032 4.98029 4.98032 4.42239 2.76862 2.76862 4.98029 7.37134 4.97733 5.69653 6.79547 3.87454 4.98032 3.31647 3.22183 4.42239 4.42239 6.80447 2.76862 7.74988 4.42242 4.98029 2.76862 4.98029 4.42242 3.31647 7.37131 4.98032 4.98029 2.76862 4.42239 4.98032 2.76862 2.76862 4.42242 5.15662 2.77161 7.35339 4.98029 4.98035 2.76862 2.76862 4.42236 4.42242 2.76862 3.31647 7.74994 4.98029 4.98035 4.42242 0 ]xshBDEBBZ+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf277.686 695.975 mo(054613-5)[4.48318 4.48322 4.48322 4.48318 4.48318 4.48322 2.98575 0 ]xshgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/BDEBCD+MTSY*1 uf/BDEBCD+MTSY uf/YGTBAA+MTSY uf/BDEBCB+Times-Bold*1 uf/BDEBCB+Times-Bold uf/NZPPMX+Times-Bold uf/BDEBCC+TimesNewRomanPS*1 uf/BDEBCC+TimesNewRomanPS uf/ITAQMX+TimesNewRomanPS uf/BDEBCA+MTMI*1 uf/BDEBCA+MTMI uf/TZMBAA+MTMI uf/BDEBBZ+Times-Roman*1 uf/BDEBBZ+Times-Roman uf/SBTAAA+Times-Roman ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
