%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Qdist_16O_208Pb.pdf
%%Creator: Adobe Acrobat 9.5.2
%%For: yusa
%%CreationDate: 12/11/26, 15:30
%%BoundingBox: 0 0 209 311
%%HiResBoundingBox: 0 0 208.4880 310.1100
%%CropBox: 0 0 208.4880 310.1100
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 827 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:56:37        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2012-11-26T15:26:23+09:00"
   xmp:CreateDate="2012-11-26T15:24:30+09:00"
   xmp:MetadataDate="2012-11-26T15:26:23+09:00"
   xmp:CreatorTool="LaTeX with hyperref package"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:648e4609-5a64-b841-ab11-a2d04e813dc2"
   xmpMM:InstanceID="uuid:251253e6-31af-cb42-aa95-43cf33abc2cf"
   pdf:Producer="dvips + Distiller"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -310.11 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
3.05175e-05 0 mo
3.05175e-05 310.11 li
208.488 310.11 li
208.488 0 li
cp
clp
[1 0 0 1 -323.15 0 ]ct
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: NCMBAA+Times-Roman Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /NCMBAA+Times-Roman def/FontInfo 8 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Times is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Roman) def/ItalicAngle 0 def/BaseFontName (Times-Roman) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdup 44 /comma putdup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 54 /six putdup 56 /eight putdup 65 /A putdup 66 /B putdup 67 /C putdup 68 /D putdup 69 /E putdup 72 /H putdup 73 /I putdup 76 /L putdup 77 /M putdup 80 /P putdup 82 /R putdup 83 /S putdup 84 /T putdup 86 /V putdup 87 /W putdup 89 /Y putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 118 /v putdup 119 /w putdup 120 /x putdef/FontBBox {-170 -223 1024 896} defendsystemdict begindup /Private10 dict dup begin/|- {def} def/| {put} def/BlueValues [-14 -0 662 682 448 458] def/FamilyBlues [-14 -0 448 458 662 682] def/StdHW [32] def/StdVW [85] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings48 dict dup begin/parenleft <1C60D8A8C9B81F2C36C72F989DC30933E1C1154A2B1BA97EC7A1305228C3B500F28047D1FD7AF2CAC515E57E5004FE49B286690D9B6523FDA8FD396C31714F14C68CEB8017221F> |-/parenright <1C60D8A8C9B81F2C36C72F989DC30933AA9CF36031C5A5BE30333E034DE8397FB1712DCCAF4FC6739C683F2B0BDCF0EEA2C21EB742A4D644C384EBE52FFA1F83BEF7C339FD> |-/comma <1C60D8A8C9B8707CD006FBCC721A6B0DF2E7EB544ADE069AAECEEB3422EE00CCF3B0FF5DEE3FDE3B3344B26938A551C9C1D396D64AAF64593E16F4229C759B59D0F7> |-/period <1C60D8A8C9B8707C5632F7A7DB57DB2124085D23F183D504E6BD44848CED466E11EC888D430B6A111B0B> |-/zero <1C60D8A8C9B7A73D33BE4A4A40D6C9178B3C553881DD6EFC6D07512D4194AA4A908EC6B05DD71A66627449D7AC8315C02920F760E98DEA62960E21D55400F1673F2E246ABE22794CD1C7F1FF0A6FEAA43CC85B567E3AEBA0C6BC11787D8D69BB> |-/one <1C60D8A8C9B7A73DC54AD32A387C3D933B30A78066E871B1686CA8AD58B426F3D711EBF052B629260061521DDE93BF6DD8D06632A0338E7A1F28956A2EFA> |-/two <1C60D8A8C9B7A73DC5046156B72903BCACCEA51DD6CF950E57DB3833C8772E66A48201437744365D6CD2A530C4F5D9460B1683C55C0B730BE6933DD2E6FAB55974B336F9D1CE72937B105923ACBC309D479B812D72BE38C361C81B2F8693B9CA> |-/three <1C60D8A8C9B7A73D33B6D9D8E67D887649816AA0F7C8D41F30E105CEB9E96C14B8E534EF6BC4B81A1A346E5460E87A78D22B5E6CBB85063AE5305FAB05FF5F6F2C985845B71EC0EBE7133146A7C459DA27FDC7CE2AE40EFCEDC4BDB718BC717964652B4AEACADCC8F720BE93383FEBD306FD550F6B4079BE2D7E7178757AE3601B69DA27D3B4591E26B1F07A245431E05DE4113D87E352> |-/four <1C60D8A8C9B7A73DC5608E828CE6325C7BCDCF371545E49C2E1C094BCCA2E78B96009D6435E7410F47E7109D89D27C3576D6EBEB93C6A421A630E1804BCCDA5162D02E04AD53> |-/six <1C60D8A8C9B7A73D33BF1B90A184398C12C7893CC276C29F22AB7C0405003A830C2EB878D0DFDF933207A0BB26FDFC3BCFCC7AB8C90AD783FA28E9AB499FD1BEDDABD75E352B243CEB47AA8ABC9329863A76BEBEBB96BE6D395B94B04C4FFA875A237FBC4D189F7038A34B19293D31125FE64CB5102FC6EEAE47E10A4FB31346A1D07F65FBAF41CF39AC4D8C28AE16> |-/eight <1C60D8A8C9B7A73D33BCAF0978F9EE3A965AE94B81B64A96D81FAA0F1CD4E391AC0ED322E5C1289135D974D3188DA4CB429E0B2772A6A3FFFE5F6450588341A047AF9D1700BC5B987C59BD80E66B9B1C1429E0DDD8451982488953BB751B44255C11551EFF073968EDECEA0A871D5F7B81E50A51406D7AD95BD1ED5687F370FF5463EE3EC4AD41AD477A6E4A359B90206E0613D8AE90309FFA57CAEEAD68F58BA3645D2ECC7D07181BC3461BF510D0B129D63D33687BDBBE53A22FD222E7651E27DF0C2BA4AE03C882675482AF3A83DF9CAE1B2D4BA3DBA334A02B383134A90198B3B84665C89402FEEDAF0E19F16CEE23E037586B9FBA6795D95C9A751943> |-/A <1C60D8A8C9B6079F1E48848039BAD53ED130C9C7FB47B900492DB1C59E9E563ACC8072A8A82319BD2D49C31C201BB3ACF5F7989ECC1036771605C3FE7A527046F2626F6DB06FBE627C3D4346762E3A8DCD5A91077A159FBE38DA188332B21FE4662F5320C01B915BEB90E7BE42> |-/B <1C60D8A8C9B64EDF88216CF024BDC8993EE873969DDC22379E84D88F9B98DA9E82737A3FF4F48F860F0533F1F5F8F6F75103383632B7F3AC2344858367D569A612DCEDA9AB08C99E8B456169DC748B524297E84C4EC16479DAEBAF0005567D3C149BBCEC756C080AF3D0F64D2EE0F96FB823344988CB93E63F4C0D64678BE8349452ACD67B5B2EC3885216D6FCD86E4EBA486B911DA6E6A4371BF776C7B3FD36F5244E4B4D121C0043D4C232F5B783AEB1113497E6BA435CA98BF8AB30BA264EF7758A43ABA9EFE5> |-/C <1C60D8A8C9B64EDF7E1755ED51FFC270B5E63137B94BD45461501D182B064E7A0252E8E5E78DB532C8187A8A2AC8F20970EF8D9F53A4672C532A75BADB76112D7D1D36E4DD03C023581B4AD66502878AFF411D9E3A2192F7A11D9ABCDA556BD8BFDE> |-/D <1C60D8A8C9B6079F1E65E602BCE28A64B24BB67575FB180655CD3F0B14FC5393BDA5F1F9B979DAEAA303A2E67ACDDFAF4A8997DB7D2137D61FD4EF4256E410ACBF02583EBF9D20CA44F540F709097BAD9C481815B074009121A02306F836B9CE28C7456C2D6136DA> |-/E <1C60D8A8C9B7D8BE6A6B7541BD3A9FD7619598D5BD721BCF333735036A9D62E0C93DD17BAE1335167E8480CB5B6886E5752236D0009ADE1711E643C35E3ED11A0154B520A528B59C8A56935F6C445598F841EBE6BFEEF0CD3810C099A3DAD7D7501F89BEDB4D4CDC599415DB11F2FDBCB8503E70E0F5FD67647E> |-/H <1C60D8A8C9B6079F1E488480874724C9912A4F73A1A5EFCCF30597CB4164258BD4CF3A44D26C80D70A2041B54773534951E2770A1FE53342F841A153B78595C5469A5AA68324A7C5BE65758B691B2B59C1AA3A80FE7A7947F1B43A90E9CD87293C417338FD6A48C825625C67D1E6235BF88012F17374FE11D132E8> |-/I <1C60D8A8C9B81F2C46F6291E6BC656A33E1DDAC08C437A41E31968D72A55F55BDF835530549B643E36540A326887C41FBBD0A12104DDB37D645E767F8C0373> |-/L <1C60D8A8C9B7D8BE6A6B754FA6EAFAD9D73D3A8154614047ECB97A3D798B9EF43E771AB1BF0BBB866D3FAB712A177A7371706A876B2DB3169146E19D206191B59464CD5FEB46F5144B> |-/M <1C60D8A8C9B59F859BE0FB9A2A0F7654CF2BCBFB0ECDA17F585A01ABAB05BD8817DDDAD4F4ECAF6717728DAACC9A08FB6FFC2ADED914DCED8240304106386F42A045F453827813F08ED2392A8739D124CB34BB60E53BA157F5A5EE9248E5765D78E0BADFF93905A780A72898CA6C4D17475310> |-/P <1C60D8A8C9B7EF32570E39CC838814508CBC998D51CD40B1FB807889384BDF8901DA218FABEEDB78DEF60D28F0AE01116D809E9F010FF1C1CF2D45AC21BD68B5E628224602504DE5F678ACC83A640228593A39D52592E62A7BF25D4A4D4498C4DECED09E7A5C1F6FDE9403D5EDA6CA566AA4> |-/R <1C60D8A8C9B64EDF88216CF039522D2CC318AED0C70D6506468EC3334D35CA04361C39A0E47A6F2FE2B072EDB7EDA858827EDCCA1325723E28B11CADC94F1FB3EDF4E40DA6EBB98C63C1EEF6236CDBD0640D48D69EAD0908A343990E89ABBBE0F494149712419DC24C6613C28D5D8B1050488248360568A1A7D92C35> |-/S <1C60D8A8C9B7EF32A18D425A80AD4EF3B9B69326938F922E2FF65591F38F4AE5E6222D6F403E2440E071AFAB3A40A2603EDCB41C09C99D824871195AEE5B2B3F41D07587F3ABFCAE9DCD65E48EC6A02871645E749E5993C1464B83F5FD0323E09790FF1EDA7D2B3F071D88CA37AF8179FAC85F7B> |-/T <1C60D8A8C9B7D8BE7F6E7D61DB24D67B944B852784461BF4DA6EEE3EE532F477DF79491F064D8A2D818FA8D1365E2A36B4D30E7559CDD3874EECCF7C27BCD244FF48B7ACDA18CE40784B72F0B8B58F939F5440D7AFFA4E> |-/V <1C60D8A8C9B6079FE80B2D95808EAD21AB9ECEB5B0909E3F1F5F03F786771B4B250B9F89B4A421669079632F25303854DE471827971168E324A14ECE0DB4A5850DFCE37DEB13CC1DC90F76AFD0342CB12652244B554F1C0E7C7734D96E23153C73EF3C19879CEBC6> |-/W <1C60D8A8C9B5D6EFC8710CFF4E2A3BB2910C160BBFCEC32BF48AEC4631F1764F9B15FA68D97354628EB1286B89D9E8840EE8EF05BC9719F29E81F55EE5D44C9A47343560607CEDA9659382C6988FBAC5495EEAB104A9F0F29589FA603C24F2752F21CF0F3B5DC39EBF2A906B823D9A7331BE36B14A417C1ED9411043CDD1ABA6E22A6B1035F0D8DB9E0438688C89854124C0BC532D55EFBC2B65C14CB02EC80891535B78920DE2AC1686E93DFD73> |-/Y <1C60D8A8C9B6079F1E48848E88AD51D8AA3C768FF30C49AD10581BFFBB57D21D75B040F42BD1FAD8399358F5E43367DC8104CA0FC6754523B80C1767058C79CFD089036C53FAA61AB61868A9114C9D06E403B931CA875443F36DC291E61A5B06FC40B3D32D21A705FFCAF82A8A32F549364AAC0C8CF4> |-/a <1C60D8A8C9B77FE2B8A6712BCF8AD42B3BA39EB091CC2FB09809534485C7C0C7E4FCCBFE29033270F7C70663C979D4A7B53C1EDE2BCAD92E08F9B50A17C6AF74F752164176C2014151B13AA3D55D118E300CE22A91CF12D4D2E37F713A5AD3744C30FB8FDDF43D9C108DECCDF1BBF3F6E9E177E7431839EB48AB939CEF8F0A980872254C6C526545335EA3ECEAB883B66BAA399CA46D9534F61257C9F9C43D3545F5A9B4231008FD53D81F76CF4AA99134A1> |-/b <1C60D8A8C9B7A73DCF483CC3D1B5AE767075B2B11B09DC8E6E01DAAC2308D80AE9076E259486CAF8ABC318C75BB0A0C0962B8F01258B10275FBF23D41888DB0FC60A98938529943F281DF87B3E0F8EF9AE4039CE8EE124A3C70B873D943DCB7897D5392F48B90A60D6D733A52EE9F3E5D5D94B5C39630645E1CCB2> |-/c <1C60D8A8C9B77FE2B8B14FF3A688A4CAC09D9C960B094093D280B1F0BAE3A1B4926C138F7C65D14C01F368625CA87F3FDF4E2DC77261F920157235562559E1E618E73DD63517C3BEA8FAAB8388B2F4BAD1763CE77252> |-/d <1C60D8A8C9B7A73DCF5825AEADEE0C25F7F07C6819553F5274966F8270F116984FAA99366B91C273C5095877EE402A389896FB72F239BFF3CA39405C421CB00CD3948CB5D6CB262184FB2A689A5361C3C1C9DE8EA7272CE7AFB08FB5203D7F87F9EE72807BEAEE4A8B3BC5198C45DB106CC6A46AE2693B99F5B1B6DBD2F4> |-/e <1C60D8A8C9B77FE2B8AEE233A10378C9A3779FE654435C5DA140539D3F81969C2135F0A35721BB6F1464D5042DE8D599C85AEF727A87A53C746B7E046BC605BBE87DB6D2751520D4BB8CE0AF03CEEC3DFA75F35820E2591B3C857130D179B0> |-/f <1C60D8A8C9B81F2C46F12188C6EC214262C48589FA59CEF05A53A8752F5A362160A41F2381D2E662532E6977D5D834AA9330917782922C4208C474C358E01A55E4A4A9EC9AF1D5F7A0194D655AF40A08169FB739A3C779BD19A95910373048249D8646B7884298A7A797B5A23CF25A67B1B6FF86> |-/g <1C60D8A8C9B7A73DB5814682A5ED81A230DD21336D32D4BDEB975D191AA0DC1725DE18522EBF728DC1C8D7BCCF4EAA59EBAE1D37D0CB2B0FCDDFF4C1BA47EB4EF2F3A853FBE33B2ACF55552D97C84A416E28C7F7570E1A56F6B9472517587598DDAB6DE6E989F86AFCBAAC0A9B49C0B440C036779573840589247667CC60552B0B2032E4DA7FBD3ED9690EB16AA3471629CB356E58D482F436173218AE434771C62F1906EA256E314CA06AC9B73041183663901CE2C20559737029FEBE19A5C9B154B9A7B7364FE3661E5E3CC9BB04D9B57B1F5D46B9EB3FB1D1DEF69C321DE3297F4A0684604EEEEA0AE7C3FEC87678A40E974610CA1BE4CD352B4B3BE16CCD92ECBFBD517F251092CC9E492D26898DB69A2E0103E5D6013647FD4F7C6208C37A0A7272F7D20284701D4A08EBCF37BB99D6C1139AFA2C4ED5C02CDD59F9BF2A972FC4F7406F02A19B8D7DEB62BDC559AA13BE5528FCF1F97FFA93455253817263789602BBBDBF5F6905C4185E6BBCEBE459A39CA7CA56410E21A0582F5B6C8526860AD133578A6FA8960B144BE954F13E86F857> |-/h <1C60D8A8C9B7A73DC54AD32BDFD28D279B07114A1BC818DDAF5D663D71FB4843F3C39B6811320D06F90864B818D29E421033551163CD6D78CE9FD65F96C222FC311AECE08515823C1D287D187C109F1B7E3E08BAE015E79E35453A3FF728429CDAE2B21D7A1BFB94EB226D79824AE5E73094084E54BA9DC8D9BB6F96CEF1CA88D8> |-/i <1C60D8A8C9B854D088843C01F1CD402FE92695744FAE40E887A7C525197EBEA7D5F57DFCBDCB58DC6FEA16610DB7091506C9E2F4B5275E8B2280ABB3D5B661EB9ED098BB29696A4A1F779CCD0347497C1A58CDD01B114AA810B4AC1E7F> |-/l <1C60D8A8C9B854D088843C00EECB99DD8FA7B8E75B8F84FDFA7081D82D0104D5494C5197C2DFE789C9CD9C88BA0C83E066B3C07F61E292F22651752E5A> |-/m <1C60D8A8C9B6FF86D5C1556BDFD94414782DC438E95D0891BF87E40FE6842D79175E55B58E5A2E6C3CAD0EAB9C32EE7E22BA66413C75F4D1AFB8514DADF6BACC5D215AC44220DFDBFDF22F8C4056C72DB9FF21D56EC8B56812F0F5206D5297656E2B5211572EB8A77AC31FA0496FEC01F312934E9FFF04CDCE8EC2FA4E707CA31087728B173C2AF2FEA553FB883C862DB30476794DDDBE856F77651BB521E16F78260F951F4A404EDD9E936DCFA9227FCAA9FA557A82E474ED> |-/n <1C60D8A8C9B7A73DC54AD32BDE85DA94C22BEB8E724A97FED51F369A339008B273B4EC0DAC533244C2BC520684E0617226381C856D6ABAFDC80B117E425C3F5B157860F3B67ED82E95A510C234B59F7BAEF05B68C26C996C48C5BE218D54B0C2D5D864B21F60FABFD9569C16497069B69BE5A02F4BD802> |-/o <1C60D8A8C9B7A73DCF4ADB5EA069632287E9D9FA5D55AD3B41065468CCFF664E2C21729E27B47B946B3861396F7C2C1FC114C7C829B309EC73124AFAF680EA55FA04CDE78DF88FE1DABAF2AF91C4625EEF6659FDF4CB547C79> |-/p <1C60D8A8C9B7A73DB5811CA4C0D9E1E31DA2343ADC9C6E5B27C6FE362DEDE1B7E8981142EAC054F0723BE1C748DF8789CD3E0DE57A633F128FB933514C28548AB77E90C3CA82DB74F901FD41F9C6A56E7860A4080C3DD43734D7ECC82F4D5ECB401BD71F5B791FD15B371ECD27BE70307DAB883E92BE3EEAF2864030D0D22183154303906AA284B5B18204CBEA9F197A375E553CF880> |-/r <1C60D8A8C9B81F2C46F12188D23D4109EC65185A19F0F0B4F86DDCDEC69037D556FA6D3586B5C3E772FF74297AA91AB36F0894E6A04245A9D271A582DA8C277D932715E52CEB78213B2DFEBC4211809F5482D8CB0F1B040962583D3D75CE15> |-/s <1C60D8A8C9B7361F6B2A89C462EAE089AE8032A70A6FAC9CFA15B27C5896BFECA627D3E4EFCF253D05548659640A20B6165488D881CFF4C343AD4737C5AC822D9C91C3B1311075C564A7BAE8249AC944BA970E571C4C1836BF2FA476B544636F4DA9B4BBF03E8049C23D0DD18CCB7D74501C6CD7D93AC69A0A0B31B3E0A62AD9F0972CA42A39997102175BCF320A047B8017B70C7BAE0D6A570189CC51D369D96ED66127D92F16ABC404596DCFBBE7A27C380753A6A9BA22C3E663B3528ECCA33EE6D2967CD1BA8F88E62A0808FF3EAACC1FEDFE715CCBE6DA423F83E4559C1E3B52EED466532853CCC72AA8A1B1409016B8FD63192526FD2E418E01CA007A04FEF543837393A9DEC7AF> |-/t <1C60D8A8C9B854D082863D68DA37DB590472E4B7154E1FE733038A178F5F9AEAD78360466A84A4E8B5B57B90FA2CD7C2C3239D873748B5BF910A48A53133599C273712BF5FB7806128CF1D0A3EE674BE2A9A62F2> |-/v <1C60D8A8C9B7A73DCF50B19ED4D77964A34FD192DCBB595B445487D3E50ECC94D8307872D3387712AF3FB8089CD28D4C851805A78778F22EFD50A10624252EE2011A0DD1C180836276DD60B57953A8187D194E50672AD3DFCB858977FB328E6E2C0AE3> |-/w <1C60D8A8C9B6079F147695749DE79047ABF95077A7E70E3EC992E1AB886C6AAEFE8C6E27752453793153003FFBDD1539614A9D98CBD9953B5618B38E95B8D6C9071AF0AA1A53EDA7F6E72D71ACC5860B755FBC80D3B2740D759858A444483FEE8C93F63D080D8619851C7A06E2C53A8C6F7FF5D130F3C810F9122DDF16C9A59DBA684A3509026D17747496F755291A0F95DB426C2708371A8D4963CF5462DA788615A9> |-/x <1C60D8A8C9B7A73DC54AD32BB0B5D18C3991EE09D43F79C687104FFF0FB4F9B51CE44D0F5E9B2B547C1983C070F6AFE923C95C238EE874D7B30FB90B3E972EC0EA850144B300F78B91A2C243F2C2CC081D3B590BF9578B8D1557DBD09ABC570D0DFB96AF8C4D2C09E3DAB3C6DAAC924C0D6BD2D7B31D452598FDAD481931BFB98342F3E0973DCB8DFA77AC6A644DE4B4E38A63AB5D121DE6> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/NMSBEK+Times-Roman /NCMBAA+Times-Roman findfont ct_VMDictPut/NMSBEK+Times-Roman*1 [40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /.notdef /zero /one /two /three /four /.notdef /six /.notdef /eight 8{/.notdef}rp /A /B /C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M 2{/.notdef}rp /P /.notdef /R /S /T /.notdef /V /W /.notdef /Y 7{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /.notdef /v /w /x 135{/.notdef}rp]NMSBEK+Times-Roman nfNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf42.84 -331.597 mo(M.EVERS)[7.97389 4.47334 5.48109 6.47643 5.48109 5.98334 0 ]xsh%ADOBeginSubsetFont: EJJQMX+Times-Italic Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /EJJQMX+Times-Italic def/FontInfo 8 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Times is a trademark of Linotype AG and/or its subsidiaries.) def/Weight (Medium) def/ItalicAngle -15.5 def/BaseFontName (Times-Italic) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 97 /a putdup 101 /e putdup 108 /l putdup 116 /t putdef/FontBBox {-176 -252 990 930} defendsystemdict begindup /Private9 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 -0 660 684 434 446] def/FamilyBlues [-14 -0 448 458 662 682] def/StdHW [35] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings6 dict dup begin/period <1C60D8A8C9B8707CAA6EFD4F464CD14977D8CBCA23F7235F6A7348947BF3D81193D11DA4784A76> |-/a <1C60D8A8C9B7A73DCEAB768244100E78E8D3AEF1D81E80BC2BA46A27983608298C7EC4E77A4E1127AB5BE042779CC9486F7B5388B163A08977E6B1D905682B6DC149103704AAF8C22CCCC06298755740754796F5E4067A6705A310160F1448C8E48164C04E72E2E4027FE93C6F12969C259486ED1725DC43D51F5747BA31ACE13FC949C8B8A5819770E7AB1A7475318526189511841896760B41BBA199C84BFBA36DB396DBD18A19F2> |-/e <1C60D8A8C9B77FE247FA02C838B70DBAA8861BCAA84A6F997DCFEBA623894F9D2E778E954049C567EE202702C9F8ACD6E35A0CCEE4895CD34E61375CB0D8B7BDE8F86B8393EA8BFDEF73165C40E768FD6D1BC7B11E49B8D624BFC0F8CA809F82CE932AE197C4315A3DCC68E6BDB9396C723DA9834B0D87E04E62689A10FC29C91DD9E9BEEDF890347E5682B795> |-/l <1C60D8A8C9B854D082E772374E410974B685A6EB2E09EF16696DBDFAF79B1F49C3B30CFDCC6EE4CEAD84E7F3B6B2C898B6CE5213933FFDD47D197D7D56FD2D7E12413707862EF42BB010B4D06745C7C894677AF5EF08> |-/t <1C60D8A8C9B854D082FD31517D59D9CBA804FAB8CDC08374931F69731D40AD62EC539A43AF2AD130414058668AEB5810EBB541891E11D65B184FF1E68D9FF14F282FE64134B25F2F881C507087118180857431685297C5BB76F71C43340E91CA9778> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/NMSBEL+Times-Italic /EJJQMX+Times-Italic findfont ct_VMDictPut/NMSBEL+Times-Italic*1 [46{/.notdef}rp /period 50{/.notdef}rp /a 3{/.notdef}rp /e 6{/.notdef}rp /l 7{/.notdef}rp /t 139{/.notdef}rp]NMSBEL+Times-Italic nfNMSBEL+Times-Italic*1 [8.9664 0 0 -8.9664 0 0 ]msf85.9334 -331.597 mo(etal.)[3.97929 4.73425 4.48141 2.49087 0 ]xshNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf393.033 -331.597 mo(PHYSICALREVIEWC)[4.98621 6.47464 6.47464 4.98621 2.98666 5.98154 6.47464 7.7218 5.98157 5.47928 6.47464 2.98663 5.47931 10.7014 0 ]xsh%ADOBeginSubsetFont: MUFAAA+Times-Bold Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /MUFAAA+Times-Bold def/FontInfo 8 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.) def/Weight (Bold) def/ItalicAngle 0 def/BaseFontName (Times-Bold) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 55 /seven putdup 56 /eight putdef/FontBBox {-168 -218 1000 935} defendsystemdict begindup /Private14 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 -0 676 691 461 473] def/OtherBlues [268 275 -206 -203] def/FamilyBlues [-14 -0 662 676 450 460 683 683] def/FamilyOtherBlues [262 270 -218 -217] def/BlueScale 0.0437916 def/StdHW [44] def/StdVW [139] def/ForceBold true def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/seven <1C60D8A8C9B7A73DEE9439F9BA32852965A7570EE55072106153B515A70915D6AFEEDDA329DAB28AD6209B8E8AA6D3498C2DF2DBF2> |-/eight <1C60D8A8C9B7A73D30061FAFE781A121F40E2C045ED20653EE77041581D97B3EB5A239D9DAF1FE5C1856FDBA60DAB647248B7519B8699E7B27CEA41A98F5375229EAAC330FA99E3D311DD7C841AB9E4CE13F980801AE8CF52935ED235B808125CA8E8D34B47F0183DA7878E7727504C3CF9767A3C870D7BE81E23692DA13EFF6C0923F456039982AAD716FE10C70E213B750D053170FE264D824965C6A4C5141D9F103852EAA0D8ADD9E454D7831D7B4A66F7246CF2901679178202C075F2E846D6625821B912343620363674C964059D4A024AFB75096766296> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/NMSBEM+Times-Bold /MUFAAA+Times-Bold findfont ct_VMDictPut/NMSBEM+Times-Bold*1 [55{/.notdef}rp /seven /eight 199{/.notdef}rp]NMSBEM+Times-Bold nfNMSBEM+Times-Bold*1 [8.9664 0 0 -8.9664 0 0 ]msf484.44 -331.597 mo(78)[4.4823 0 ]xshNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf493.404 -331.597 mo(,034614\(2008\))[4.49127 4.4823 4.4823 4.4823 4.4823 4.4823 6.73199 2.98486 4.4823 4.4823 4.4823 4.4823 0 ]xsh115.56 -308.332 mo(TABLEI.Detailsforthetwoexperiments.)[4.64453 6.47105 5.98066 5.47841 7.72179 2.98843 6.02991 6.47374 3.98108 2.49266 3.98109 2.49265 2.49266 5.73318 2.98575 4.4832 5.22914 2.49266 4.48318 6.22807 2.49266 6.38138 6.73199 3.84299 4.48322 4.48318 3.98108 2.98575 2.49266 6.97586 3.98109 4.48318 2.49265 3.48801 0 ]xsh%ADOBeginSubsetFont: NTEBAA+MTMI Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /NTEBAA+MTMI def/FontInfo 8 dict dup begin/Notice (Copyright (C) 1992, 1993 The TeXplorators Corporation) def/Weight (Medium) def/ItalicAngle -14.0361 def/BaseFontName (MTMI) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 181 /theta putdef/FontBBox {0 -213 987 680} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-18 -0 653 672 428 441] def/OtherBlues [268 271 -211 -192] def/BlueScale 0.0479599 def/StdHW [34] def/StdVW [73] def/StemSnapH [20 34] def/StemSnapV [55 73] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/theta <1C60D8A8C9B763560DCE75CBBBD5E580768EAAADD59C6BB9BEB5194A56C413F7B28C4DC77BB621CF67F2BFE1D72BB2166CF10A9C663B56C1BA0A4D68106BE7EFEDBE8E60392A6B050F13CEF63CDCF36DB4DD6BCFF64E728D382E5F91B58DB38E667320F33AF38E9623B3E0BC0186171655D61943A2F75705077E01205E4F2D0B2DFF54> |-/.notdef <1C60D8A8C9B81F2CC3> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/NMSBEN+MTMI /NTEBAA+MTMI findfont ct_VMDictPut/NMSBEN+MTMI*1 [181{/.notdef}rp /theta 74{/.notdef}rp]NMSBEN+MTMI nfNMSBEN+MTMI*1 [8.9664 0 0 -8.9664 0 0 ]msf272.21 -308.332 mo(\265)shNMSBEK+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf276.147 -306.991 mo(lab)[1.66415 2.65646 0 ]xshNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf286.2 -308.332 mo(isthemeanscatteringangleofthedetector.Thethinrare)[2.49176 5.72421 2.49176 4.4823 6.22809 6.97495 3.98019 3.98019 6.73196 3.48709 3.98019 3.98019 2.49176 2.49176 3.98016 2.98486 2.49176 4.4823 6.73199 3.98016 4.4823 4.4823 2.49176 6.22809 4.4823 5.2381 2.49265 4.4823 6.21912 4.48227 3.98022 2.49176 3.98016 3.98019 2.49179 4.4823 2.49258 4.50021 5.48111 4.48233 6.21906 2.49179 4.4823 2.49179 6.73193 2.98486 3.98022 2.98483 0 ]xsh103.607 -297.37 mo(earthtargetsbecomeoxidisedafterevaporation.)[3.98019 3.98019 2.98485 2.49176 6.73198 2.49176 3.98019 2.82614 4.4823 3.98019 2.49176 5.73318 4.4823 3.98018 3.98019 4.4823 6.97496 6.22806 4.4823 4.48232 2.49176 4.4823 2.49176 3.48711 3.98018 6.73198 3.97839 2.98483 2.49176 3.98019 5.22914 3.75333 4.25725 3.98019 4.48232 4.4823 2.98486 3.98021 2.49176 2.49176 4.4823 4.4823 0 ]xsh.504 lw
0 lc
0 lj
10 ml
[] 0 dsh
false sadj
103.608 -290.683 mo
490.167 -290.683 li
103.608 -288.199 mo
490.167 -288.199 li
@
%ADOBeginSubsetFont: NCMBAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNMSBEK+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B81F2C3AED6367885F3D8AEE09C2B6A6BBD877D58778DB5C17> |-/k <1C60D8A8C9B7A73DC54AD32BB0B5D1E9DD5B86DF7DED9D2A69ECE9FDA908159C5F6DF8081EC4B06378BB69D1FDD36986E86236C5E601439C59C09915FE795D9ED8CD1478C2E3F80E1025B683E9F7103E8F3CA73D7B4B66E40CF96294EEA1787E049D44FED62CEC5614D6EF8EF96AF69FBE9DE1D52274E16D16E93FD527DD7D7EEE114C2F5472A19A4F> |-systemdict /gcheck known {setglobal} if end {end} ifendNMSBEK+Times-Roman /Encoding getdup 45 /hyphen putdup 107 /k putpop%ADOEndSubsetFont
/NMSBEK+Times-Roman*1 [40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /.notdef /six /.notdef /eight 8{/.notdef}rp /A /B /C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M 2{/.notdef}rp /P /.notdef /R /S /T /.notdef /V /W /.notdef /Y 7{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /.notdef /v /w /x 135{/.notdef}rp]NMSBEK+Times-Roman nfNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf178.218 -275.293 mo(Back-angledetector)[5.97975 3.98019 3.98019 4.4823 2.98485 3.98018 4.48232 4.4823 2.49176 6.22806 4.48232 3.98018 2.49176 3.98018 3.98019 2.49176 4.4823 0 ]xshNMSBEN+MTMI*1 [8.9664 0 0 -8.9664 0 0 ]msf298.983 -275.293 mo(\265)shNMSBEK+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf302.922 -273.952 mo(lab)[1.66415 2.65646 0 ]xshNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf397.449 -275.293 mo(Targets)[4.76108 3.97839 2.82617 4.4823 3.97839 2.49265 0 ]xsh.405 lw
103.608 -269.016 mo
490.167 -269.016 li
@
%ADOBeginSubsetFont: NCMBAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNMSBEK+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7A73D33B6D9D7B01AE7D2D960D2F51E9FE1FC8486BC5F9384FDB582FE3186B10CCA6EE9CF04BECB23273E0B9B60DF025AE4C6BB0ACFAF940E0300A41E47DBB9E6BFAEBE6DA60964E5779C4CE9FAD2DE6FD51CA6532C6A7DBF9EEC5B8B8ACC160ABE9BD55BB864EA0447> |-/seven <1C60D8A8C9B7A73D33ABF8744E3273D4FFE60FB60111B37303798FF6140B0FDD64572057AEB7DC20BBDDE4F138F19779CFAD8EBDCD2DCF> |-/nine <1C60D8A8C9B7A73D3B133D0E106D7B00AAEB4C503119962C10A8D75A4BD647D972EB44C6D90361954EC7291FFD1054C548057545A4CF1924280AF7036DA5A8F47F3F10AE29F722A1057076985529F524C508B431E7E211AF8E6446FF2D1E8D2EABFB1CA50C96ABCBE2AA324145F2F6F57F9A9CF8C744019E8A0FF49E57A6A08152E18F70EEF3> |-/O <1C60D8A8C9B6079FE817D875D2CBFFB4D2371B2E61D54D948A218A62FA0D22E2EF1AD1023110B33B8569E4258807CA3DD17AE0F9AC177CE24976839E549061CC1FCDA2457D67E7AF7C243514329E86F73350C4F2C9B2781F5382D946922A44A00D08187FD42DAB24BAD3D754C372749034> |-/u <1C60D8A8C9B7A73DCF26D255E125FEDE2A44B266BF1601569161F7FF6EBEB9B2CE7DFC4E351EC1DEAD50705FF1948C85B77126CA1525CFF08B3CEF7D42D718BDAD67005B37093F915D26F5D783C25732B69069D135AA4CF6AA70F64A90679F44DE2B8053A881E52A2DD59B0EDCF33E79> |-systemdict /gcheck known {setglobal} if end {end} ifendNMSBEK+Times-Roman /Encoding getdup 53 /five putdup 55 /seven putdup 57 /nine putdup 79 /O putdup 117 /u putpop%ADOEndSubsetFont
/NMSBEK+Times-Roman*1 [40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine 7{/.notdef}rp /A /B /C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M /.notdef /O /P /.notdef /R /S /T /.notdef /V /W /.notdef /Y 7{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /x 135{/.notdef}rp]NMSBEK+Times-Roman nfNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf103.608 -256.663 mo(Run1Annularsurfacebarrierdetector174)[5.97976 4.4823 6.72301 36.0539 6.47284 4.4823 4.48232 4.4823 2.49176 3.98018 5.23811 3.48709 4.4823 2.98485 2.89787 3.98019 3.98018 6.2191 4.4823 3.98019 2.98483 2.98486 2.49176 3.98018 5.2381 4.4823 3.98019 2.49178 3.98019 3.98019 2.49176 4.4823 27.846 4.4823 4.4823 0 ]xsh%ADOBeginSubsetFont: KGFRMX+MTSY Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /KGFRMX+MTSY def/FontInfo 8 dict dup begin/Notice (Copyright (C) 1992, 1993 The TeXplorators Corporation and Y&Y, Inc. (508) 371-3286. All Rights Reserved.) def/Weight (Medium) def/ItalicAngle 0 def/BaseFontName (MTSY) def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 177 /openbullet putdef/FontBBox {0 -954 1043 796} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 -0 465 484 501 506 657 676] def/OtherBlues [-209 -186] def/BlueScale 0.0479599 def/StdHW [50] def/StdVW [50] def/StemSnapH [20 50] def/StemSnapV [30 50] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/openbullet <1C60D8A8C9B7A73DE6C27D577B58CF0E80FC15DDE445150B7A33A2DE3E753853E9F310F6921530C3CE006D5E590F1E3A05E9355AE43E8CBB017F13F405FF7171AC45A9A143F7C8C0C5749270645BEC342D> |-/.notdef <1C60D8A8C9B81F2CC3> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/NMSBEO+MTSY /KGFRMX+MTSY findfont ct_VMDictPut/NMSBEO+MTSY*1 [177{/.notdef}rp /openbullet 78{/.notdef}rp]NMSBEO+MTSY nfNMSBEO+MTSY*1 [5.9776 0 0 -5.9776 0 0 ]msf309.834 -259.921 mo(\261)shNMSBEK+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf335.323 -259.921 mo(144)[2.98819 2.98822 0 ]xsh%ADOBeginSubsetFont: NTEBAA+MTMI AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginNMSBEN+MTMI dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/comma <1C60D8A8C9B821B3259708BCD717D7034C35291735F761867B0D7790444C597891B3AD34A0C55BF7F0630DAF50BF8F32C25C98049945665AAA61E7C5365BA0E652780DEDD63BA8A518E6584369A625690069> |-/x <1C60D8A8C9B7A73DCED622569EE4CDD310FE69AC93E72E5CD8CA443213FA9ED43E448E31FC5343A0D5ABD28295C2A3A69023868CBCB556F3E9DE1DB51E82E46958FF89E5959E14971300C26849E59E8D3A5F24329B35F87B42991721410C4175EC1EFEF606D72F3951DCBBA0A3B1345AFB0A65A7C52FF67FA894A1EB96BC8C5B0002979DEF5C532440E228A57AFE6F18ABE62359300A0021697510C1743D28EBAD17F06C8B00D5A7B89BA701AC4E6E3071CBA035A719023077ADACD377B51566B156401A3BC391050F500164CF3CC3F2F2163F9BD155F2419430452D12429C453B985E633E9187CA5DA5F0577C726A79787463> |-systemdict /gcheck known {setglobal} if end {end} ifendNMSBEN+MTMI /Encoding getdup 59 /comma putdup 120 /x putpop%ADOEndSubsetFont
/NMSBEN+MTMI*1 [59{/.notdef}rp /comma 60{/.notdef}rp /x 60{/.notdef}rp /theta 74{/.notdef}rp]NMSBEN+MTMI nfNMSBEN+MTMI*1 [5.9776 0 0 -5.9776 0 0 ]msf344.288 -259.921 mo(;)shNMSBEK+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf346.268 -259.921 mo(154)[2.98819 2.98822 0 ]xshNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf355.734 -256.663 mo(SmO)[4.98532 6.97586 0 ]xshNMSBEN+MTMI*1 [5.9776 0 0 -5.9776 0 0 ]msf374.166 -255.322 mo(x)shNMSBEN+MTMI*1 [8.9664 0 0 -8.9664 0 0 ]msf378.009 -256.663 mo(;)shNMSBEK+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf382.473 -259.921 mo(166)[2.98819 2.98822 0 ]xshNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf391.941 -256.663 mo(ErO)[5.48108 2.98843 0 ]xshNMSBEN+MTMI*1 [5.9776 0 0 -5.9776 0 0 ]msf406.881 -255.322 mo(x)shNMSBEN+MTMI*1 [8.9664 0 0 -8.9664 0 0 ]msf410.724 -256.663 mo(;)shNMSBEK+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf415.188 -259.921 mo(186)[2.98819 2.98822 0 ]xshNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf424.647 -256.663 mo(W,)[7.6322 0 ]xshNMSBEK+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf436.77 -259.921 mo(197)[2.98819 2.98822 0 ]xshNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf446.238 -256.663 mo(Au,)[6.47195 4.48141 0 ]xshNMSBEK+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf461.673 -259.921 mo(208)[2.98819 2.98822 0 ]xshNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf471.141 -256.663 mo(PbS)[4.98532 4.48318 0 ]xsh103.607 -245.701 mo(Run2ImplantedSidetector163)[5.97976 4.4823 6.72301 54.7919 2.98485 6.97495 4.48232 2.49176 3.98018 4.4823 2.49176 3.98019 6.73196 4.98622 4.73427 4.4823 3.98018 2.49176 3.98019 3.98018 2.49176 4.48232 46.5929 4.4823 4.4823 0 ]xshNMSBEO+MTSY*1 [5.9776 0 0 -5.9776 0 0 ]msf309.834 -248.959 mo(\261)shNMSBEK+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf380.395 -248.959 mo(144)[2.98819 2.98822 0 ]xshNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf389.862 -245.701 mo(SmO)[4.98532 6.97586 0 ]xshNMSBEN+MTMI*1 [5.9776 0 0 -5.9776 0 0 ]msf408.294 -244.36 mo(x)shNMSBEN+MTMI*1 [8.9664 0 0 -8.9664 0 0 ]msf412.137 -245.701 mo(;)shNMSBEK+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf416.601 -248.959 mo(208)[2.98819 2.98822 0 ]xshNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf426.069 -245.701 mo(PbS)[4.98532 4.48318 0 ]xsh.504 lw
103.608 -239.482 mo
490.167 -239.482 li
103.608 -236.989 mo
490.167 -236.989 li
@
%ADOBeginSubsetFont: NCMBAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNMSBEK+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/percent <1C60D8A8C9B6B41C31835D9FEE84EF9004FFD7955F1C03BC35D936E2EE3620CDA6BB194A7DD3FEC9062C211EBE7621B62114E683297D5FF2593044EA26D517431C8D49B876C5F3AB0FD5608AB4C75473D43482FAAD8A7515A08E109FDC9FFA44C469654299954B6D1C6D6B59EBA4DA229039C61EB5C23332D09BBEA7E9C59365A2063554868D00BF83C9F527CC3DFFF876A4A3F228C9349960D1A94A3F457DB21D9E3F66F74FB559F48802768C92D0E84876922A2F6739686291686F9FDCC3DBDB2390B675D4B40335DB3F4B3F6F21185515B887FE2D325A8348B5DFD7889EF68681B784567E115022F9463C058D5D26E1D57DB134A8D12B10AD0F7165E6A72DE365C3F4E165CBD637DE> |-/colon <1C60D8A8C9B854D07EFA5C95877492F7856E7DE9BB2E69B2765C1F14F94621533FEA2E7BD71693E4672A00D58C14044480B0791CB849DD0902AB27645907F5988967F2BCE2C1CD33676BEA> |-/bracketleft <1C60D8A8C9B81F2C36B2094B9ED0E07AA432BA5CE2E14AF649DC2F2CB195A1FDBFE5A57B66690A553F1C81E8EF4C69F5F6196DACA3> |-/y <1C60D8A8C9B7A73DB581756876F7F809C2D335F2588CDFE22A738EF6AEBB290C30A697C9AD22528ABE25F731839A905345CD954158822049F2A16DB01B89FDEDFE681BA53A2B092211E816705B1C6BF29A428185D37F48C3ED83F5C76FA3AEACB735951F23450F5D72D8FFA37BA72FE9888132C8A80F1BC71B758F38A05CD5DC6100D9322B23FB5ECE0205> |-/z <1C60D8A8C9B77FE2B220C5B7606510DD63CBE70461755E976608A93BBCE08FD6A7956CF4BD1845A5A110A885D2DA70235131684F658640CA98BC180BB2287071A5755E9AD7E2FEBED28F0310F0BAEF94> |-systemdict /gcheck known {setglobal} if end {end} ifendNMSBEK+Times-Roman /Encoding getdup 37 /percent putdup 58 /colon putdup 91 /bracketleft putdup 121 /y putdup 122 /z putpop%ADOEndSubsetFont
/NMSBEK+Times-Roman*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine /colon 6{/.notdef}rp /A /B /C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M /.notdef /O /P /.notdef /R /S /T /.notdef /V /W /.notdef /Y /.notdef /bracketleft 5{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /x /y /z 133{/.notdef}rp]NMSBEK+Times-Roman nfNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf42.84 -209.638 mo(precision\(uncertainties)[4.9803 3.31647 4.4224 4.4224 2.7686 3.87453 2.76861 4.9803 7.03758 3.31647 4.98031 4.9803 4.4224 4.42239 3.31648 2.7686 4.42239 2.7686 4.98032 2.7686 2.7686 4.42241 0 ]xsh%ADOBeginSubsetFont: NTEBAA+MTMI AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginNMSBEN+MTMI dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/less <1C60D8A8C9B6C1804D9D600B426A54AB20C8AE7ED6C17680FCB3ED164344E3426AD17C08660526317EDE27F596A4FE> |-systemdict /gcheck known {setglobal} if end {end} ifendNMSBEN+MTMI /Encoding getdup 60 /less putpop%ADOEndSubsetFont
/NMSBEN+MTMI*1 [59{/.notdef}rp /comma /less 59{/.notdef}rp /x 60{/.notdef}rp /theta 74{/.notdef}rp]NMSBEN+MTMI nfNMSBEN+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf137.701 -209.638 mo(<)shNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf144.919 -209.638 mo(1%\).Tominimizesystematicerrors,)[4.98129 8.29878 3.31747 4.54494 5.28308 7.03758 7.7509 2.76961 4.98131 2.76959 7.7509 2.76961 4.4234 6.48865 3.87552 4.98129 3.87552 2.76961 4.4234 7.7509 4.4234 2.76959 2.76961 6.47966 4.4234 3.31747 3.31747 4.98132 3.31744 3.87555 0 ]xsh42.84 -198.181 mo(thefollowingmeasurementprocedureswereadopted:)[2.76761 4.97931 6.91205 3.32046 4.9793 2.76761 2.76761 4.72527 7.19101 2.76761 4.97931 7.47893 7.7489 4.42141 4.42141 3.87354 4.9793 3.31548 4.42139 7.74892 4.4214 4.97931 5.28317 4.97929 3.31548 4.97931 4.42139 4.42142 4.97931 4.97931 3.31546 4.42142 6.39008 7.19101 4.42139 3.31549 6.92102 4.42139 4.97931 4.97931 4.97931 2.76761 4.42139 4.97931 0 ]xsh50.8051 -180.748 mo(\(i\)Degradationofboththedetectorresponseandthetarget)[3.31548 2.76761 8.69428 7.19101 4.26599 4.97731 3.31548 4.4214 4.97931 4.42141 2.76762 2.76761 4.97931 7.38029 4.97731 5.70551 4.97931 4.97929 2.76761 7.36237 2.77159 4.97931 6.80446 4.97931 4.4214 2.76761 4.4214 4.4214 2.76759 4.97931 5.71547 3.31548 4.4214 3.87354 4.97929 4.97931 4.97931 3.87354 6.81343 4.4214 4.97929 7.36237 2.76761 4.97931 6.80447 2.77158 4.42142 3.14111 4.97931 4.42142 0 ]xsh65.5916 -169.291 mo(materialduringtheexperimentcouldleadtosystematic)[7.74991 4.42239 2.76861 4.4224 3.31647 2.76861 4.4224 5.38179 4.98031 4.9803 3.31647 2.7686 4.9803 7.60545 2.77159 4.9803 7.03758 4.26598 4.98032 4.9803 4.42239 3.31648 2.7686 7.74989 4.42241 4.9803 5.39972 4.42239 4.98032 4.98032 2.76859 7.60547 2.77158 4.42239 4.42242 7.5965 2.76862 7.58749 3.87454 4.98032 3.87454 2.76862 4.42239 7.74994 4.42239 2.76862 2.76862 0 ]xsh65.5916 -157.835 mo(errors.Thusthemeasurementswerenotconductedin)[4.4214 3.31548 3.31548 4.97931 3.31548 3.87354 6.30035 6.08408 4.9793 4.97931 7.70415 2.76762 4.97931 8.24405 7.74892 4.4214 4.4214 3.87354 4.97931 3.31546 4.42142 7.7489 4.4214 4.97929 2.76761 7.71313 7.19101 4.42139 3.31549 8.24405 4.97931 4.97931 6.59723 4.42139 4.97931 4.97931 4.97931 4.97931 4.42139 2.76761 4.42139 8.82886 2.76761 0 ]xsh65.5916 -146.378 mo(ascendingordescendingorderofbeamenergy.Instead,)[4.42041 3.87254 4.42041 4.42041 4.97831 4.97831 2.76662 4.97831 7.63235 4.97832 5.95755 4.97832 4.42041 3.87254 4.42041 4.42041 4.9783 4.9783 2.76662 4.9783 7.64131 4.9783 3.31448 4.9783 4.42041 5.95757 4.97832 5.95755 4.9783 4.42041 4.42041 10.395 4.42041 4.9783 4.42041 3.14114 4.9783 4.32877 5.1387 3.32047 4.9783 3.87256 2.7666 4.42041 4.42041 4.97833 0 ]xsh65.5916 -134.921 mo(theywereperformedbytuningenergiessemirandomly,)[2.76761 4.97931 4.26598 7.85751 7.191 4.42141 3.31548 7.28068 4.97931 4.4214 3.31548 3.31549 4.97931 3.31548 7.74892 4.4214 7.8575 4.97931 7.84753 2.76761 4.97931 4.97929 2.76761 4.97929 7.85751 4.42142 4.97928 4.42142 3.14111 4.97931 2.76761 4.42142 6.74973 3.87354 4.42139 7.74893 2.76758 3.31549 4.42139 4.97931 4.97931 4.97931 7.7489 2.76761 4.32877 0 ]xsh65.5916 -123.464 mo(choosingthebeamchargestatetoensurethatthecurrent)[4.4214 4.97931 4.97931 4.9793 3.87354 2.76761 4.97931 7.09238 2.77159 4.97931 6.52551 4.97931 4.4214 4.4214 9.86398 4.42139 4.97931 4.42142 3.14111 4.97931 6.53447 3.87354 2.76761 4.4214 2.76761 6.51553 2.77161 7.07443 4.42142 4.97931 3.8735 4.97931 3.31549 6.53448 2.77158 4.97931 4.42142 4.86871 2.76761 4.97928 6.52551 4.42142 4.97931 3.31546 3.31549 4.42139 4.97931 0 ]xsh65.5916 -112.007 mo(intheanalyzingmagnet\(whichselectsthebeamenergy\))[2.76761 6.99275 2.76761 4.9793 6.43484 4.42141 4.9793 4.4214 2.76762 4.97931 4.42141 2.76761 4.97931 7.01964 7.74892 4.4214 4.97931 4.97931 4.4214 4.80595 3.31549 7.19099 4.97929 2.76761 4.42142 6.99274 3.87354 4.42142 2.76761 4.42139 4.42142 2.76758 5.89496 2.77161 4.97928 6.44385 4.97928 4.42142 4.42139 9.77432 4.42139 4.97931 4.42142 3.14111 4.97931 4.97931 0 ]xsh65.5916 -100.55 mo(increasedmonotonicallywitheverysuccessivemea-)[2.76861 4.9803 4.4224 3.31647 4.4224 4.4224 3.87453 4.42241 10.2236 7.7499 4.9803 4.9803 4.98029 2.76862 4.9803 4.9803 2.76862 4.42239 4.42239 2.76862 2.76859 10.2236 7.192 2.7686 2.7686 10.2057 4.16739 4.82388 4.42239 3.31647 10.2236 3.87952 4.98032 4.42239 4.42242 4.42239 3.87454 3.87454 2.51953 4.82388 9.66571 7.74991 4.42242 4.42239 0 ]xsh65.5916 -89.0927 mo(surement.Thelatterprocedureminimizeddifferential)[3.87453 4.98031 3.31647 4.4224 7.7499 4.4224 4.98031 2.76861 6.67793 6.08408 4.9803 8.60371 2.7686 4.42239 2.7686 2.76862 4.42239 7.4968 4.97731 3.31648 4.98029 4.42241 4.42239 4.9803 4.98032 3.31647 8.62164 7.7489 2.76859 4.98032 2.76862 7.74988 2.76862 4.42242 4.42239 9.16162 4.98032 2.76862 3.0694 3.32144 4.42242 3.31647 4.42242 4.98032 2.76862 2.76859 4.42242 0 ]xsh65.5916 -77.6357 mo(hysteresiseffectsintheanalyzingmagnet[)[4.92352 4.97732 3.87354 2.76761 4.4214 3.31548 4.4214 3.87354 2.76761 6.37215 4.42142 3.0694 3.31548 4.42141 4.4214 2.76761 6.37216 2.77158 7.46997 2.77159 4.97931 6.92102 4.4214 4.97931 4.42139 2.76761 4.97931 4.4214 2.76761 4.97929 7.48792 7.7489 4.42139 4.97931 4.97931 4.42139 5.28317 0 ]xsh.895567 .76733 0 0 cmyk
NMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf237.392 -77.6357 mo(10)[4.97731 0 ]xsh1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: NCMBAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNMSBEK+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/F <1C60D8A8C9B7EF32570E39CCEC5110D068AE075379C513EEE45AEBCC8FEEAD063F4F7951D2B5D5C9F89EC4099926CBC2781352A492FD1D3B0B60F0C077F05082E7C8C2C38A5F951B093E735AC9F80CBDD21303902D7B5FFE4FF79DDA911FD1C910B15F457488FFCF3A14B467> |-/bracketright <1C60D8A8C9B81F2C36B2094B9ED0E07AB0AE2459225F3262D604438B4486515876021016C3AA677F6BF46D7036A8EF12CA3C3D53EC664796> |-/j <1C60D8A8C9B854D0F800B3DF22FF18E225C1C85C67D845B8CBEE8132CF84387896A3EC73D90CBF21F1B544949DF284025E68E6B1F599B2E569763C16124DC975CFD81C79D58B6A09A65378EC90CBEC525DBF551A39E37302C93364569DF3353EAF64BD48FCD5FF73F53B829E5EEBA40544A63693> |-/fi <1C60D8A8C9B7EF325709313B73D60ED8F88D5452FC49B0CB46D974BF2878C0F9B8B80828B5C96208E3B03E2600AE7D63E50049F56B4566505BC8D51A6F0CE8411676671DC49923648BA3DAF8829A32C0B2F37F24376A031CAB50204A90B87F24900554BF93F4728DE63FA2F86F1919C7B7F59614858FDAD27729D3D7EEB200AA3451B95911D532B02D75F36D5600D75FCAA2> |-systemdict /gcheck known {setglobal} if end {end} ifendNMSBEK+Times-Roman /Encoding getdup 70 /F putdup 93 /bracketright putdup 106 /j putdup 174 /fi putpop%ADOEndSubsetFont
/NMSBEK+Times-Roman*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine /colon 6{/.notdef}rp /A /B /C /D /E /F /.notdef /H /I 2{/.notdef}rp /L /M /.notdef /O /P /.notdef /R /S /T /.notdef /V /W /.notdef /Y /.notdef /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /x /y /z 51{/.notdef}rp /fi 81{/.notdef}rp]NMSBEK+Times-Roman nfNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf247.345 -77.6357 mo(].)[3.32146 0 ]xsh48.0325 -66.1786 mo(\(ii\)Forfragiletargets,orthosewithalowmeltingpoint)[3.31747 2.7696 2.7696 8.69429 5.38179 4.97732 7.40711 3.31747 3.31747 4.4234 4.98129 2.76961 2.76959 8.49612 2.7696 4.42339 3.14114 4.98131 4.42339 2.76961 3.87552 6.56137 4.98129 7.39816 2.76959 4.98131 4.98131 3.87552 8.50508 7.19099 2.76961 2.76959 9.05402 8.49611 2.77159 4.72527 11.2677 7.7509 4.4234 2.76961 2.76959 2.76961 4.98131 9.06299 4.98126 4.98132 2.76959 4.98132 0 ]xsh65.5916 -54.7216 mo(\()shNMSBEK+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf68.913 -58.339 mo(144)[3.48341 3.48341 0 ]xshNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf79.866 -54.7211 mo(Sm)[5.53522 0 ]xsh%ADOBeginSubsetFont: NTEBAA+MTMI AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginNMSBEN+MTMI dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Q <1C60D8A8C9B68526F8CE277F69C50E315DA1AFB3CF74BC68725E3B28111EC7AE2F9552D742AB23417643D7C5209367BF315A5A3AF9616C0FE4A96399BF366140F216A75510B2434D6E2653267FFCA6351459F03E510730AF26850AAEDCB22BE84C5C771171AD29C92D6F1B7FA784E00D0DFC4E842C442761B11AD223588912A8B87CBDFE73B2117A5D22439AA3FFA67918C0261FA708CB53C8011D11B3360C7A4A205B4D7EF25032EE33E0AC756F3EAF0F3963A0A62981D35DAE7B27559A83305B7457E269F46B899A68F4F9FDD1F55D639601DB687C769322424F7C262DCF8A> |-systemdict /gcheck known {setglobal} if end {end} ifendNMSBEN+MTMI /Encoding getdup 81 /Q putpop%ADOEndSubsetFont
/NMSBEN+MTMI*1 [59{/.notdef}rp /comma /less 20{/.notdef}rp /Q 38{/.notdef}rp /x 60{/.notdef}rp /theta 74{/.notdef}rp]NMSBEN+MTMI nfNMSBEN+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf93.1591 -54.7211 mo(;)shNMSBEK+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf98.109 -58.339 mo(166)[3.48341 3.48341 0 ]xshNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf109.071 -54.7211 mo(Er)[6.08408 0 ]xshNMSBEN+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf118.503 -54.7211 mo(;)shNMSBEK+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf123.453 -58.339 mo(208)[3.48341 3.48341 0 ]xshNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf134.415 -54.7211 mo(Pb\),thetargetladderwasmovedin)[5.53621 4.97832 3.31448 7.10133 2.77161 4.9783 9.03609 2.76662 4.42039 3.14113 4.97832 4.42041 7.38029 2.7666 4.42041 4.97833 4.9783 4.42041 7.93813 7.09236 4.41943 8.48721 7.7489 4.82388 4.82388 4.41943 9.61191 2.77158 0 ]xsh65.5924 -43.2641 mo(smallstepsby)[3.87354 7.74891 4.4214 2.76761 6.67793 3.87951 2.76761 4.42141 4.97931 7.78484 4.97931 0 ]xsh%ADOBeginSubsetFont: KGFRMX+MTSY AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginNMSBEO+MTSY dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/plusminus <1C60D8A8C9B6C1804D9926323A9582FFCF699E3357EC2FCE96DAD7EF07286370C3262B172BF97322647BEA26F4B2B115EEFB8C2D70AE916BBBA80DE2C46EF805128F3A9BA5C1> |-/similar <1C60D8A8C9B6C18031F5CE1795D305BE2DD7187615B48F18E91A9FF2B0D5E6C1FE2D68221B678BE1CA86833E946256D5281D97B7EB11ED6A1EC9192A36EEB369960500AAB624D198966183DB620D4F4A> |-systemdict /gcheck known {setglobal} if end {end} ifendNMSBEO+MTSY /Encoding getdup 167 /plusminus putdup 187 /similar putpop%ADOEndSubsetFont
/NMSBEO+MTSY*1 [167{/.notdef}rp /plusminus 9{/.notdef}rp /openbullet 9{/.notdef}rp /similar 68{/.notdef}rp]NMSBEO+MTSY nfNMSBEO+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf128.791 -43.2641 mo(\247)shNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf136.558 -43.2641 mo(2mmwitha20speriodduringthe)[8.89162 7.74892 11.6612 7.19099 2.77159 2.77161 8.88266 8.33371 4.97731 8.89162 7.78586 4.97733 4.4194 3.32146 2.77159 4.97733 8.89162 4.97733 4.97731 3.32144 2.77161 4.97733 8.89163 2.77161 4.97729 0 ]xsh65.5924 -31.8071 mo(individualmeasurements,todistributetheeffectsof)[2.76861 4.9803 4.9803 2.51955 4.9803 2.76861 4.9803 4.98031 4.4224 7.9113 7.7499 4.4224 4.42239 3.87454 4.98029 3.31648 4.42239 7.74991 4.42241 4.98029 2.76862 3.87453 7.62337 2.76862 10.0981 4.98032 2.7686 3.87453 2.7686 3.31648 2.7686 4.77905 4.97733 2.7686 9.54019 2.76862 4.98032 9.54915 4.4194 3.0694 3.32045 4.42242 4.42242 2.76859 9.00031 4.97733 0 ]xsh65.5924 -20.3501 mo(targetheatingandradiationdamageoveralargerarea)[2.76761 4.4214 3.14114 4.97931 4.4214 6.30931 4.97931 4.4214 4.42141 2.76761 2.76761 4.97931 8.523 4.42141 4.97931 8.51402 3.31549 4.42139 4.97931 2.76761 4.42142 2.76759 2.76761 4.97929 8.52301 4.97931 4.4214 7.7489 4.4214 4.97931 7.97406 4.82388 4.8239 4.4194 6.86714 7.94717 2.76761 4.4214 3.14113 4.97931 4.42142 6.85815 4.42142 3.31546 4.42142 0 ]xsh65.5924 -8.8931 mo(ofthetarget.)[4.97831 5.8141 2.76661 4.97832 6.91205 2.7716 4.4204 3.14114 4.97831 4.42041 2.76662 0 ]xsh45.2707 2.5639 mo(\(iii\)Tomaintainthesamefocalpointoftheincidentbeam)[3.31548 2.76761 2.76761 2.76761 8.68532 5.2831 8.31578 7.74891 4.42141 2.76761 4.97931 2.76761 4.42141 2.76761 8.32475 2.76762 4.97931 7.75787 3.87952 4.4214 7.7489 7.75789 3.32047 4.97929 4.4214 4.42139 6.11105 4.97931 4.97931 2.76761 4.97931 6.11105 4.97931 6.65097 2.76761 4.97931 7.75787 2.77158 4.97931 4.42142 2.76761 4.97928 4.42142 4.97931 6.12003 4.97931 4.42139 4.42142 0 ]xsh65.5924 14.0209 mo(particlesonthetarget,the)[4.97931 4.4214 3.31548 2.76761 2.76761 4.42141 2.76761 4.4214 5.62496 4.97732 6.72276 2.77159 4.97931 6.16486 2.76762 4.4214 3.14113 4.97931 4.4214 2.76761 4.23012 2.77159 4.97931 0 ]xshNMSBEK+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf167.346 10.4029 mo(16)[3.48341 0 ]xshNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf174.816 14.021 mo(Obeamwasfocusedthrough)[8.93745 4.9783 4.42041 4.42041 9.50432 7.09238 4.41942 5.616 3.32144 4.97832 4.42041 4.97832 3.87253 4.42041 6.73175 2.7666 4.9783 3.31448 4.9783 4.9783 4.9783 0 ]xsh65.592 25.478 mo(acircularaperturewithadiameterof2mm,locatedon)[7.20894 4.41941 2.76861 3.31647 4.4224 4.9803 2.76861 4.4224 6.11099 4.42239 4.9803 4.4224 3.31647 2.7686 4.9803 3.31647 7.20895 7.192 2.7686 2.76862 7.76685 7.20892 4.97733 2.76862 4.42239 7.74991 4.42239 2.7686 4.42239 6.11099 4.97733 6.11098 7.75789 7.74991 7.74992 5.28316 2.76862 4.98032 4.42241 4.42239 2.76862 4.42242 7.77582 4.98029 0 ]xsh65.592 36.935 mo(thetargetladder,priortoeverymeasuredenergy.)[2.76761 4.97931 6.91205 2.7716 4.4214 3.14114 4.97931 4.4214 5.2742 2.76761 4.4214 4.97931 4.97931 4.42141 2.92495 4.98627 4.97733 3.31548 2.76761 4.97929 5.81412 2.76759 7.46996 4.16736 4.82388 4.42142 3.31546 7.4879 7.7489 4.4214 4.4214 3.87354 4.97931 3.31548 4.4214 7.48788 4.4214 4.97931 4.4214 3.14113 4.97931 4.32874 0 ]xsh46.0713 48.392 mo(\(iv\)Thescatteringeventsinthebackwardangledetector)[3.31548 2.51954 4.97931 8.70325 6.08508 4.97931 8.83783 3.87951 4.42141 4.4214 2.76761 2.76761 4.42141 3.31548 2.76761 4.97931 9.38676 4.16736 4.82388 4.4214 4.97931 2.76761 8.29793 2.77159 9.37781 2.77159 4.97929 8.82886 4.97931 4.4214 4.4214 4.97931 7.09238 4.4214 3.31548 9.40469 4.4214 4.97931 4.97931 2.76759 8.83783 4.97931 4.42142 2.76761 4.42139 4.42142 2.76758 4.97931 0 ]xsh65.592 59.849 mo(werecorrectedforelectronicdeadtimeusingapulser)[7.192 4.4224 3.31647 7.9382 4.4224 4.98031 3.31647 3.31648 4.42239 4.4224 2.76861 4.42239 8.51404 3.31647 4.98032 6.83127 4.41943 2.76859 4.42241 4.42241 2.76859 3.31648 4.9803 4.9803 2.7686 7.95615 4.98029 4.42241 4.42239 8.50508 2.7686 2.7686 7.74991 7.93819 4.97731 3.87454 2.76862 4.98032 8.49611 7.93822 4.98029 4.98032 2.76862 3.87454 4.42242 0 ]xsh65.592 71.306 mo(signalinjectedintothepreampli\256er.Deadtimeswere)[3.87453 2.76861 4.98031 4.9803 4.4224 6.58826 2.76861 4.98031 2.7686 4.4224 4.4224 2.7686 4.4224 8.81092 2.76862 4.98029 2.76862 8.79298 2.7686 4.98032 8.23508 4.97733 3.31647 4.42239 4.42241 7.74989 4.98032 2.7686 2.7686 5.53821 4.42239 2.77153 6.32724 7.19101 4.42241 4.42241 8.80194 2.76862 2.76862 7.74989 4.42242 7.69519 7.19202 4.42242 3.31647 0 ]xsh65.592 82.763 mo(muchsmallerthan1%forthecountratesof)[7.74891 4.97931 4.4214 8.29785 3.87354 7.74891 4.4214 2.76761 2.76762 4.42141 6.62405 2.77159 4.97931 4.4214 8.29785 4.97931 11.6014 3.31548 4.97931 6.62405 2.77159 4.97931 7.73099 4.42139 4.97931 4.97931 4.97929 6.09312 3.31548 4.4214 2.76761 4.4214 7.19109 4.97731 0 ]xshNMSBEO+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf250.283 82.763 mo(\273)shNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf258.05 82.763 mo(300Hz)[4.9783 4.97833 8.29785 7.19 0 ]xsh65.592 94.22 mo(thatweremaintainedthroughoutthemeasurements.)[2.76761 4.97931 4.4214 5.26524 7.191 4.4214 3.31548 6.92102 7.74891 4.42141 2.76761 4.97931 2.76762 4.4214 2.76761 4.97931 4.42142 7.48788 2.76761 4.97929 3.31548 4.97931 4.97931 4.97931 4.97929 4.97931 4.97929 5.28317 2.76761 4.97931 6.91205 7.7489 4.4214 4.4214 3.87354 4.97931 3.31548 4.4214 7.7489 4.42139 4.97931 2.76764 3.8735 0 ]xsh%ADOBeginSubsetFont: MUFAAA+Times-Bold AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNMSBEM+Times-Bold dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B8707C5500383F1D3BFE600CE516F95CBA440B108AD496EA72FF632BFDC871D512A7D4DA> |-/A <1C60D8A8C9B6079F1E726295E14B9D3F70CD5E0B99FB5C541892407EEE313575E0BC3586F119054623CFFC1539933CC204B2F5B50CDB16C1A47827495E2DEE496A0F16B7095E9F1E3DBB899EFB12534C6D9378D278FEEE7861E2DFF81C84E57E28074784DF150564816D806C9503838197FA5E0E96901B050C38513FC7940F74497685> |-/D <1C60D8A8C9B6079F1E72629B99242972E4DE41F7DDD2D0587A2FCA508CB436FCF333346397FDD627328F0C390394A41FC18F77B511D158DAD4091E8D851CFB4D16BD17605282D4464CF3A5389804AD7BCA41B01A00D7EE4B1E79132F66A67D2D98F11B48DAE7B181C09C587F97A2A1150A4D695AC7E85732067E7EC797EDD36B6F58313342EA8C95C295> |-/E <1C60D8A8C9B64EDF881B97E2E5D84D264D6FA01EE653ED7374EAF044D90D37BE338DF407FB75C867794D4250D63DD220700516034551C05226939AD33EAB118BE54C951D70812429005575ECFF05541440BECE916398DB5BA7CCC10B886EBE237CFF27E89773D8F53D685F0DD9A9D4FDE9844BDB0B654A2D86342E9A566ED6991520C5297D183A128AFA9482488E8222CA6D919C3B353C8BCE7A7641> |-/I <1C60D8A8C9B7361F7E0A3182AF0840CF1C57BBC49E9A8C6B0AA7B6E467587CBB397231CD7BC1746C8C5839DD306946786BBAF8E2E1FB3B41CA7009BD13B807FD9CB9BFA9E93CCC74> |-/L <1C60D8A8C9B64EDF8815C1AD7B5B26AB26BCBC091C6DF6670E573A3698A487FA937A76353FC8A27E3EC6331795AB1229A5461F60BB5E5612255C1FB1246C71D14F65C2F7FA78B27A3178021FAADA0B0D5CF511ECD1587461B88F5173C1FF2AE3AD6C2F10522891F194F1CB> |-/N <1C60D8A8C9B6079F1E72629B90E3BF572C953D8759DE3E6006A10F5E57068F9A03033AC5EA12BE216216DBB5AE366546D563309C4FED29C4D77CE6955423F62A19E925AAA030C45D43610BC0195EA52D665B51476DF5A0C2DB4E0E9B8B74FA1C6ECCFEB437204FDDB974B090A6D93625A7E1649C5CEFD4F179D24392834F3E70F952D3DC65983D8B7549> |-/R <1C60D8A8C9B6079F1E72629575480DC45EFF6E4AB64B66A7652CD7E16EAC91449245DD3CBA37D2A604CF72E29588675CFDFE01E4A88B3F48C83BCCA7256E85D1ED04A24E78F3B0E49702EE55B1A71A005EE3C3C7D4DE77AC3ABF777E970484F642725E1BF89080F0371BDFA7FF69C36EBA900FB7DA9A1E59A9E701FC9ADF1739895858CDE42B73B3FD55E3496550F362CFF31E5A95A6D3675A86BCC23DB940B34804> |-/S <1C60D8A8C9B7EF32A40B3F7CFC1EB7E9ED1A9879448E6DF4EAA6E621EE517E47285391CFFAB191F3C3BA03401452E59BC25F9E3497798374417C4A14EF122C2CAA1114DA8FC0A0D1D558EC4482CC1438E830AB88C11785887BF6F10CA423D0D695D2834E800725F16D76030FA546B077643DB9B71AF606A8C0D63F39360E8C11419A3BB5960B3110224661DA080E88EA9BA00998137D89CD24E8CA496A72DD45E1DBE8DB88BC7D540073C6F33375EFC2786BF4863C1BB8F76B0A79DB18F5C17A743C7DD53BBCA6A3AA> |-/T <1C60D8A8C9B64EDF881B97EC50FCD51603E94B2D4284D633085583BD9B5B8F170F886F5B54A019DE2D2CC01BD239EA07DA4F881B25C0676E08731B6897C8DF35258E9A63DAF9A6382ECFD1B7FC7DF34C4643C960F54D0199CD6DD7ADFF2B6C2279> |-/U <1C60D8A8C9B6079FED7C4FD78730BA93E8975B39F1BF63F57A039CEE608AF8D6684F7A32A4357D5CB964BFB76E664D7BA816A7888BB43EA946A89471CCC97B8A5F0855A62F64F19EB84AFBBA962B38664D8F2F5225E34483447295AA7D5E94E21245B6F01BC557F7107DAE084669E910926FDBB9EB513E2FBEA1AA15F1> |-/Y <1C60D8A8C9B6079F1E72629B90E3BF53CB958F24A2B497D4844D9CE9445D095FB64BC51A6E6D50CCFCFC4422A8C716AC679D5A7FB4800A60EA31D04BA7544E4D0DC1281EC0124CE0A857A03C04F4E4618E6149D47132F2E63C10B0D2726483958032965B0317A4A04A65F1783A9795AB312C513297C812F3EAB5919300AF3586855028> |-systemdict /gcheck known {setglobal} if end {end} ifendNMSBEM+Times-Bold /Encoding getdup 46 /period putdup 65 /A putdup 68 /D putdup 69 /E putdup 73 /I putdup 76 /L putdup 78 /N putdup 82 /R putdup 83 /S putdup 84 /T putdup 85 /U putdup 89 /Y putpop%ADOEndSubsetFont
/NMSBEM+Times-Bold*1 [46{/.notdef}rp /period 8{/.notdef}rp /seven /eight 8{/.notdef}rp /A 2{/.notdef}rp /D /E 3{/.notdef}rp /I 2{/.notdef}rp /L /.notdef /N 3{/.notdef}rp /R /S /T /U 3{/.notdef}rp /Y 166{/.notdef}rp]NMSBEM+Times-Bold nfNMSBEM+Times-Bold*1 [8.9664 0 0 -8.9664 0 0 ]msf102.645 122.543 mo(III.RESULTSANDANALYSIS)[3.488 3.488 3.48799 6.71404 6.47374 5.98067 4.98531 6.47374 5.15755 5.98514 7.22691 6.47375 6.47374 8.72162 6.47374 6.29083 6.47374 5.15755 6.47374 4.98531 3.48801 0 ]xshNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf54.792 139.733 mo(Typicalfragmentyieldsasafunctionofthe)[5.28309 4.97931 4.97931 2.76761 4.4214 4.4214 6.35415 3.31548 3.31548 4.4214 4.97931 7.74892 4.4214 4.97931 6.34518 4.97931 2.76761 4.4214 2.76761 4.97929 7.44315 4.42139 7.44315 7.98303 3.32047 4.97931 4.97931 4.42139 2.76761 2.76761 4.97931 8.55887 4.97729 6.8851 2.77161 4.97928 0 ]xshNMSBEN+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf239.095 139.733 mo(Q)shNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf247.546 139.733 mo(-valueare)[3.31648 4.72525 4.42239 2.76862 4.98032 7.992 4.42239 3.31647 0 ]xsh42.8399 151.19 mo(showninFig.)[3.87453 4.9803 4.72526 7.19101 7.97406 2.7716 7.9651 5.53522 2.76861 4.9803 0 ]xsh.895567 .76733 0 0 cmyk
NMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf101.087 151.19 mo(1)sh1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: NCMBAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNMSBEK+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/q <1C60D8A8C9B7A73DB5811CA4C0B5D8DA44C60141D4CA95628090E06CC0BD9517D2DEB228FFBCD60AA8DBF1F132ACF12A6C98AF7EA8157613E0F6A76C6B66844D612D3B89D09712C41A79B009E5B45847F8090DBB1B7B8A4EBC29A007B36118A89D83B96E31686956D1FC2F1BD00FC26A8ADA802DF82AEC6BC65FFF1FD30FAADCA75892BB01645418BB2B> |-systemdict /gcheck known {setglobal} if end {end} ifendNMSBEK+Times-Roman /Encoding getdup 113 /q putpop%ADOEndSubsetFont
/NMSBEK+Times-Roman*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine /colon 6{/.notdef}rp /A /B /C /D /E /F /.notdef /H /I 2{/.notdef}rp /L /M /.notdef /O /P /.notdef /R /S /T /.notdef /V /W /.notdef /Y /.notdef /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z 51{/.notdef}rp /fi 81{/.notdef}rp]NMSBEK+Times-Roman nfNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf109.052 151.19 mo(forthereaction)[3.31548 4.97931 6.30028 2.77159 4.97931 7.41615 3.31549 4.4214 4.4214 4.42142 2.76761 2.76761 4.97931 0 ]xshNMSBEK+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf173.889 147.572 mo(16)[3.48341 0 ]xshNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf181.359 151.19 mo(O)sh%ADOBeginSubsetFont: KGFRMX+MTSY AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginNMSBEO+MTSY dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/plus <1C60D8A8C9B6C180FE7E255088499B6A505EB6DB68D164488832FE8CE1A33AC5E060A59D03BCEB9639BC4D489466A32ABD040C578748437F6AB5A2> |-systemdict /gcheck known {setglobal} if end {end} ifendNMSBEO+MTSY /Encoding getdup 67 /plus putpop%ADOEndSubsetFont
/NMSBEO+MTSY*1 [67{/.notdef}rp /plus 99{/.notdef}rp /plusminus 9{/.notdef}rp /openbullet 9{/.notdef}rp /similar 68{/.notdef}rp]NMSBEO+MTSY nfNMSBEO+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf188.55 151.19 mo(C)shNMSBEK+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf196.326 147.572 mo(208)[3.48341 3.48341 0 ]xshNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf207.279 151.19 mo(Pbatthreedifferent)[5.53821 7.97406 4.42241 5.76038 2.7686 4.9803 3.31648 4.42239 7.4072 4.97731 2.76862 3.0694 3.31647 4.42239 3.3165 4.42239 4.98029 0 ]xsh42.8403 162.647 mo(energies.Theseshowboththeelasticpeakandanumberof)[4.42141 4.97931 4.42141 3.14113 4.97931 2.76761 4.4214 3.87353 5.83211 6.08409 4.97931 4.4214 3.87354 7.75788 3.87952 4.97931 4.72526 10.5394 4.97929 4.97931 2.76759 8.3158 2.77159 4.97929 7.75787 4.42142 2.76761 4.4214 3.87352 2.76761 2.76761 7.74892 4.97931 4.4214 4.4214 8.32475 4.4214 4.97931 8.31577 7.75787 4.97931 4.97931 7.74889 4.97931 4.42142 6.66891 4.97931 0 ]xsh42.8403 174.104 mo(discretereactionchannels,whichbecomemoreprominentat)[4.97931 2.76761 3.87354 4.4214 3.31548 4.42141 2.76761 7.38029 3.31548 4.4214 4.4214 4.42141 2.76762 2.76761 4.97931 7.94716 4.42141 4.97931 4.42141 4.97929 4.97931 4.4214 2.76761 3.87354 5.47246 7.19101 4.97929 2.76761 4.4214 7.94716 4.97931 4.4214 4.4214 4.97931 7.74892 7.39821 7.74892 4.97929 3.31549 7.38029 4.97731 3.31548 4.97931 7.7489 2.76761 4.97931 4.42142 4.97928 5.7514 4.42142 0 ]xsh42.8403 185.561 mo(thehigherbombardingenergies.Theback-anglequasi-elastic)[2.76761 4.97931 6.88515 4.97731 2.76761 4.9793 4.97931 4.4214 5.80514 4.97931 4.97931 7.7489 4.97932 4.4214 3.31548 4.97931 2.76761 4.97929 7.461 4.42142 4.97929 4.4214 3.14113 4.97931 2.76759 4.42142 3.87354 4.97731 6.08408 4.97931 6.89412 4.97931 4.4214 4.4214 4.97931 3.31548 4.4214 4.97929 4.97931 2.76761 6.91205 4.97931 4.97931 4.4214 3.87354 2.76758 3.31549 4.42139 2.76764 4.42139 3.87354 2.76761 2.76761 0 ]xsh42.8403 197.018 mo(eventswereselectedbyde\256ninganenergywindowforeach)[4.16736 4.82389 4.42041 4.97831 2.76661 6.99282 7.191 4.42041 3.31448 7.52376 3.87952 4.42041 2.76661 4.42041 4.4204 2.76662 4.42041 8.09959 4.97832 8.08165 4.97832 4.42039 5.53621 4.9783 2.76662 4.97832 8.09958 4.42041 8.09062 4.42041 4.9783 4.42041 3.14113 4.97832 8.09062 7.19002 2.76662 4.97832 4.97832 4.72527 10.3143 3.32045 4.97833 6.41681 4.42041 4.42041 4.42044 0 ]xsh42.8403 208.475 mo(spectrumtoincludeboththeelasticpeakandallquasi-elastic)[3.87453 4.9803 4.4224 4.4224 2.7686 3.31647 4.98031 10.3322 2.7716 7.55065 2.77159 4.98031 4.4224 2.7686 4.9803 4.9803 7.01069 4.98031 4.98029 2.76862 7.55962 2.77159 4.98032 7.00171 4.42239 2.7686 4.42241 3.87453 2.7686 2.7686 7.00172 4.9803 4.42239 4.42241 7.56859 4.42241 4.9803 7.55963 4.42241 2.76862 5.34593 4.98032 4.9803 4.42241 3.87456 2.76862 3.31647 4.42242 2.76862 4.42239 3.87454 2.76862 2.76862 0 ]xsh42.8403 219.932 mo(eventsatlowerenergies.Thetotalnumberofcounts,after)[4.16736 4.82389 4.4214 4.97931 2.76761 7.91138 4.41941 6.80446 2.77159 4.72526 7.191 4.42142 7.34435 4.4214 4.97931 4.42141 3.14113 4.97931 2.76761 4.42139 3.87354 6.52451 6.08408 4.97931 8.45128 2.76761 4.97929 2.76761 4.4214 6.80446 4.97929 4.97931 7.7489 4.97931 4.4214 7.35332 4.97931 7.34435 4.4214 4.97931 4.97931 4.97929 2.76761 3.87354 6.52451 4.42139 3.31549 2.76761 4.42142 0 ]xsh42.8403 231.389 mo(subtractionofthebackground\(thelattercorrespondsto)[3.87354 4.97931 4.97931 2.76761 3.31548 4.4214 4.4214 2.76761 2.76761 4.97931 10.9081 4.97731 9.24323 2.77159 4.97931 10.3412 4.97931 4.42139 4.42142 4.97931 4.97929 3.31548 4.97931 4.97931 4.97929 10.935 3.31548 2.76761 4.97931 10.3412 2.76762 4.4214 2.76761 2.76759 4.4214 9.24324 4.4214 4.97931 3.31548 3.31548 4.4214 3.87354 4.97929 4.97931 4.97931 4.97931 9.81921 2.76758 0 ]xsh42.8403 242.846 mo(typically1%ofthetotalnumberofcountsinthechosen)[2.76661 4.97831 4.97831 2.76661 4.42041 4.42041 2.76661 2.76662 9.62985 4.9783 12.9423 4.97831 7.96503 2.76661 4.97832 9.06298 2.77159 4.97832 2.7666 4.42041 7.41615 4.97832 4.9783 7.74789 4.97832 4.42041 7.97398 4.9783 7.96503 4.42041 4.97832 4.97832 4.97832 2.76662 8.53203 2.77161 9.62088 2.77159 4.97832 9.06297 4.42041 4.97833 4.97833 3.87253 4.42041 0 ]xsh42.8403 254.303 mo(energywindow\),wasdividedbythesumoftheelastic)[4.42141 4.97931 4.42141 3.14113 4.97931 10.6381 7.191 2.76762 4.97931 4.97931 4.72526 7.19101 3.31548 8.14542 7.09237 4.42141 9.52232 4.97929 2.51956 4.97929 2.76761 4.97929 4.42142 10.647 4.97931 10.6291 2.76761 4.97929 10.0622 3.87952 4.97931 13.4007 4.97931 8.96426 2.76761 4.97929 10.0712 4.41937 2.76764 4.42139 3.87354 2.76761 2.76761 0 ]xsh42.8403 265.76 mo(countsinthetwomonitorsatforwardanglestoobtainthe)[4.4224 4.9803 4.9803 4.9803 2.7686 7.88448 2.77159 8.97332 2.77159 4.9803 8.42438 2.7686 7.09238 8.97331 7.74892 4.9803 4.9803 2.7686 2.76862 4.98029 3.31648 7.88448 4.42239 6.76761 3.31647 4.9803 3.31648 7.09236 4.42241 3.31647 8.97333 4.42239 4.98032 4.98032 2.76862 4.42241 7.89343 2.76862 8.97331 4.9803 4.9803 2.76862 4.42242 2.76862 8.98227 2.77161 4.98032 0 ]xsh42.8403 277.217 mo(ratioofquasi-elastictoRutherfordscatteringcrosssections)[3.31647 4.4224 2.7686 2.7686 8.67643 4.9803 7.02855 4.9803 4.9803 4.42241 3.87453 2.7686 3.31647 4.4224 2.7686 4.4224 3.87453 2.7686 2.76861 8.13644 2.76862 8.68539 6.64413 4.9803 2.7686 4.98032 4.42239 3.31647 3.31648 4.9803 3.31647 8.69437 3.87453 4.42239 4.42239 2.76862 2.76862 4.42241 3.31648 2.76862 4.98032 8.69435 4.42241 3.31648 4.98032 3.87454 7.57762 3.8795 4.42242 4.42242 2.76859 2.76862 4.98032 4.98032 0 ]xsh%ADOBeginSubsetFont: NTEBAA+MTMI AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginNMSBEN+MTMI dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/slash <1C60D8A8C9B745265DB920B47933B671A6716EFB8EB6DAEE719CDC462CFE1483DCAB3C27> |-/d <1C60D8A8C9B7A73DCEAFB0502D19804C41A1289E6C8348F17A3DAEE5A8D6A33CE090E2408EEFB4AE0E80E265688CFFDA730692A7ADA58A23F90EBEB204D789B17959DED3EB1F8AC3E505DC1E3D30114581F7676F064540EE4B5B75980AFB1E475369F936F314F094E6D88C46DD1D98F702C50A07397DC6255ED49C3896BF343CC1AA882210CD8F28C7E4FE8FAE8B544ADE0B5451E7E4748CF8D0FDBC153B804F4A662B7476DDF780BCD1AF5CBAB5469C7ACB9563A0CF4B4C2049F4BEBE79D180AB11F59BFB9F950E04A453B9686CB56475C42CFAB31CEE90FD71168DC39BFCF6BECB72DB0FEBE944BDDB3CC6C9D957068BADFBC6BF7654> |-/sigma <1C60D8A8C9B785CBCB9D2B44DD94483A0428E6F4E4D7E03DEFB509A2DFCA0C7A2928DB2B92C4FBAA4D1E38557D9897CFAB66385FD3A065545133B3A70BD5E32F1A7D681AF2D2868C4346C00E5BEDF2FC6BD89D63390F9C802CE957A379965590808D690E6AE96296EC5B5E0D9247E7721DC554A94B4CA45C7C68A49FB02F35372BE6235B03F25F4D33FCC707B110E1AB4CDE3E1AD694D43A51677B6EDC51CC> |-systemdict /gcheck known {setglobal} if end {end} ifendNMSBEN+MTMI /Encoding getdup 61 /slash putdup 100 /d putdup 190 /sigma putpop%ADOEndSubsetFont
/NMSBEN+MTMI*1 [59{/.notdef}rp /comma /less /slash 19{/.notdef}rp /Q 18{/.notdef}rp /d 19{/.notdef}rp /x 60{/.notdef}rp /theta 8{/.notdef}rp /sigma 65{/.notdef}rp]NMSBEN+MTMI nfNMSBEN+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf42.8403 288.674 mo(d\276)[5.72451 0 ]xshNMSBEK+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf53.883 290.168 mo(qel)[3.48481 3.09428 0 ]xshNMSBEN+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf62.91 288.674 mo(=d\276)[4.68044 5.72451 0 ]xshNMSBEK+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf78.633 290.168 mo(Ruth)[4.64948 3.48481 1.93662 0 ]xshNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf92.7 288.674 mo(.Variationsintheaxialpositionofthedifferent)[5.78728 6.08416 4.4224 3.31647 2.76861 4.4224 2.76861 2.76861 4.9803 4.98032 7.19107 2.7686 8.27992 2.7686 4.9803 7.72202 4.42239 4.98032 2.76859 4.42241 6.08415 4.98032 4.98029 3.87454 2.7686 2.7686 2.76862 4.98029 8.27992 4.97731 6.62405 2.77161 4.9803 7.72202 4.98033 2.76859 3.06943 3.32043 4.42242 3.31647 4.42242 4.98029 0 ]xsh42.8402 300.131 mo(targets,originatingfromvariationsofthetargetmountingand)[2.76761 4.42141 3.14113 4.97931 4.4214 2.76761 3.87354 4.80595 4.97931 3.31548 2.76761 4.97931 2.76761 4.97932 4.42141 2.76761 2.76761 4.97931 7.2986 3.32146 3.31548 4.97931 10.0622 4.72527 4.4214 3.31548 2.76759 4.42142 2.76761 2.76761 4.97931 4.97928 6.20978 4.97931 5.63376 2.76761 4.97931 6.74069 2.77161 4.42139 3.14114 4.97931 4.42139 5.08493 7.7489 4.97931 4.97931 4.97928 2.76761 2.76761 4.97931 7.30756 4.42142 4.97931 0 ]xsh42.8402 311.588 mo(planarity,cangiverisetodifferencesinthenormalization)[4.9803 2.7686 4.4224 4.9803 4.4224 3.31647 2.76861 2.76861 4.32874 6.97482 4.42239 4.42241 9.46844 4.98031 2.51954 4.82389 8.91952 3.31647 2.76859 3.87454 8.89162 2.7686 9.45949 4.9803 2.76862 3.0694 3.32144 4.42239 3.3165 4.42239 4.98029 4.42239 4.42242 8.36966 2.76862 9.45053 2.76859 4.98032 8.90958 4.98032 4.98029 3.3165 7.74991 4.42242 2.76859 2.76862 4.42242 4.42239 2.76862 2.76862 4.98032 0 ]xsh42.8402 323.045 mo(factorof)[3.22183 4.42041 4.42041 2.76662 4.97831 5.11173 4.97832 0 ]xshNMSBEN+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf77.8507 323.045 mo(d\276)[5.72451 0 ]xshNMSBEK+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf88.893 324.539 mo(qel)[3.48481 3.09428 0 ]xshNMSBEN+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf97.92 323.045 mo(=d\276)[4.68044 5.72451 0 ]xshNMSBEK+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf113.643 324.539 mo(Ruth)[4.64948 3.48481 1.93662 0 ]xshNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf129.501 323.045 mo(betweenthevarioustargets.Everytarget)[4.97931 4.4214 2.76761 7.19101 4.4214 4.4214 6.78653 2.76761 4.97931 6.21866 4.72525 4.42142 3.31548 2.76761 4.97931 4.97931 5.67876 2.76761 4.4214 3.14113 4.97931 4.4214 2.76761 3.87354 4.28391 6.08508 4.82388 4.42142 3.31546 6.77658 2.77158 4.42142 3.14111 4.97931 4.42139 0 ]xsh42.8403 334.502 mo(wasthereforeanalyzedindependently,resultinginslightly)[7.09238 4.41941 8.46032 2.7716 4.98031 4.42239 3.31648 4.42239 3.31648 4.9803 3.31647 9.01816 4.42239 4.9803 4.4224 2.76861 4.9803 4.42239 4.42239 9.59399 2.76862 4.98029 4.98032 4.42239 4.9803 4.42241 4.98029 4.98032 4.42239 4.98029 2.76862 2.76862 4.32874 7.11029 3.32147 4.42242 3.87451 4.98032 2.76862 2.76862 2.76862 4.98032 9.56708 2.77161 9.56708 3.87952 2.76862 2.76862 4.98032 4.98032 2.76862 2.76862 0 ]xsh42.8403 345.959 mo(differentnormalizationfactorsforeachreaction[seeEq.\()[4.97931 2.76761 3.0694 3.32046 4.4214 3.31548 4.4214 4.97931 5.23833 4.97931 4.97931 3.31548 7.74891 4.42141 2.76761 2.76761 4.42141 4.42141 2.76761 2.76761 4.97932 7.46098 3.22183 4.4214 4.4214 2.76761 4.97929 3.31549 6.33627 3.32147 4.97931 5.77823 4.42139 4.42142 4.42139 7.461 3.31546 4.42142 4.42139 4.42142 2.76761 2.76761 4.97931 7.452 3.31549 3.87354 4.42139 6.88516 6.08411 4.97931 4.95938 0 ]xsh.895567 .76733 0 0 cmyk
NMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf273.815 345.959 mo(3)sh1 /0 /CSD get_res sepcs
1 sep
NMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf278.793 345.959 mo(\)].)[3.32047 3.32047 0 ]xsh42.8403 357.416 mo(Atthelowestbeamenergiesforalltargets,the)[7.19101 4.6346 2.76761 4.97931 6.29139 2.77159 4.72527 7.19101 4.4214 3.87354 4.64357 4.97931 4.4214 4.42141 9.62088 4.42139 4.97931 4.4214 3.14113 4.97931 2.76759 4.42142 5.76045 3.31548 4.97931 5.18346 4.41942 2.76761 4.6346 2.76759 4.4214 3.14114 4.97929 4.4214 2.76761 3.87354 4.35565 2.76761 4.97931 0 ]xshNMSBEN+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf224.74 357.416 mo(Q)shNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf233.192 357.416 mo(-valuespectra)[3.31747 4.72527 4.42339 2.76961 4.98129 6.30037 3.87552 4.98129 4.4234 4.4234 2.76959 3.31747 0 ]xsh305.846 -209.636 mo(showednopeaksfor)[3.87253 4.97833 4.72525 7.19101 4.42041 9.23434 4.9783 9.2164 4.9783 4.42041 4.42041 4.9783 8.11761 3.31448 4.9783 0 ]xshNMSBEN+MTMI*1 [9.9626 0 0 -9.9626 0 0 ]msf397.224 -209.636 mo(Q<)[11.214 0 ]xshNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf418.977 -209.636 mo(0,indicatinganabsenceofany)[4.9783 6.73175 2.7666 4.9783 4.97833 2.7666 4.42041 4.42041 2.7666 2.76663 4.9783 9.22537 4.4194 9.2164 4.42041 4.9783 3.87256 4.42038 4.9783 4.42041 8.67645 4.97827 7.5506 4.42041 4.82391 0 ]xsh305.847 -198.179 mo(signi\256canttargetimpuritiesatalevelof)[3.87454 2.76859 4.98032 4.98029 2.76862 5.53821 4.42239 4.42242 4.98029 5.28317 2.76862 4.42239 3.14111 4.98032 4.42239 5.26523 2.76862 7.74991 4.98029 4.98032 3.31647 2.76862 2.76859 2.76862 4.42239 6.37216 4.4194 5.26523 6.91205 2.76862 4.16736 4.82391 4.4194 5.2742 4.97729 0 ]xshNMSBEO+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf466.598 -198.179 mo(\273)shNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf474.373 -198.179 mo(100ppm.)[4.97733 4.97729 7.47894 4.97729 4.97733 7.74692 0 ]xsh317.808 -186.722 mo(Theexcitationfunctionsforquasi-elasticscatteringforeach)[6.08609 4.98029 6.04831 4.26599 4.98029 4.42242 2.76859 2.76862 4.42239 2.76862 2.76859 4.98032 6.6062 3.32043 4.98032 4.98032 4.42239 2.76859 2.76862 4.98032 4.98029 5.50839 3.3165 4.98029 4.95035 4.98032 4.98029 4.42239 3.87454 2.76859 3.3165 4.42239 2.76862 4.42239 3.87454 2.76859 2.76859 6.04834 3.87451 4.42242 4.42239 2.76862 2.76862 4.42239 3.3165 2.76862 4.98032 6.6062 3.31647 4.98035 4.95032 4.42242 4.42242 4.42236 0 ]xsh305.847 -175.265 mo(reactionmeasuredinthisworkareshowninFig.)[3.31647 4.42239 4.42242 4.42239 2.76862 2.76859 4.98032 7.33545 7.74893 4.42239 4.42239 3.87451 4.98032 3.31647 4.42239 7.33548 2.76859 7.31656 2.76859 4.98032 2.76859 6.21875 7.09238 4.97733 3.31647 7.31653 4.42239 3.31647 6.76761 3.87952 4.98029 4.72528 7.19202 7.33545 2.76862 7.3175 5.53824 2.76859 4.98035 0 ]xsh.895567 .76733 0 0 cmyk
NMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf501.155 -175.265 mo(2)sh1 /0 /CSD get_res sepcs
1 sep
NMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf506.132 -175.265 mo(.Errorbars)[4.84183 6.08408 3.3175 3.31744 4.98132 5.65167 4.98132 4.4234 3.31744 0 ]xsh305.847 -163.808 mo(ofthedatapoints\(resultingonlyfromstatisticaluncertainties\))[4.98032 5.39069 2.76859 4.98032 6.48865 4.98029 4.42242 2.76859 6.49762 4.98032 4.98029 2.76862 4.98029 2.76862 5.94873 3.32047 3.3165 4.42239 3.87451 4.98032 2.76862 2.76859 2.76862 4.98029 7.0376 4.98029 4.98032 2.76859 7.05652 3.31647 3.3165 4.98029 9.81018 3.87952 2.76859 4.42239 2.76862 2.76862 3.87454 2.76862 2.76862 4.42239 4.42242 4.82388 4.98032 4.98029 4.42242 4.42242 3.31647 2.76862 4.42242 2.76862 4.98029 2.76862 2.76862 4.42242 3.87451 0 ]xsh305.847 -152.351 mo(aregenerallyverysmall,andbyusingtheaforementioned)[4.42239 3.31647 8.62164 4.98032 4.42239 4.98032 4.42239 3.31647 4.42242 2.76859 2.76862 9.19846 4.82391 4.4194 3.31647 9.17953 3.87454 7.74991 4.42239 2.76859 2.76862 6.68689 4.42239 4.98032 9.18951 4.98029 9.17957 4.98029 3.87451 2.76862 4.98029 9.17957 2.77158 4.98032 8.62164 4.42239 3.3165 4.98029 3.3165 4.42239 7.74994 4.42242 4.98029 2.76862 2.76862 4.98035 4.98029 4.42242 0 ]xsh305.847 -140.894 mo(measurementprocedure,thescatterinthequasi-elasticscat-)[7.74991 4.42239 4.42239 3.87454 4.98032 3.31647 4.42239 7.74991 4.42239 4.98032 6.0752 4.98029 3.31647 4.98032 4.42239 4.42239 4.98032 4.98029 3.31647 4.42242 5.78726 2.76862 4.98032 7.6951 3.87949 4.42242 4.42239 2.76859 2.76862 4.42239 6.59717 2.77158 8.26199 2.77158 4.98035 7.6951 4.98032 4.98029 4.42242 3.87454 2.76862 3.3165 4.42239 2.76862 4.42239 3.87457 2.76855 2.76868 7.70404 3.87457 4.42236 4.42242 2.76862 0 ]xsh305.847 -129.437 mo(teringdataforeachtargetwasminimized.Thelargerscatter)[2.76761 4.42142 3.31546 2.76761 4.97931 8.07269 4.97931 4.42142 2.76761 7.52374 3.32147 4.97931 6.40787 4.42139 4.42142 4.42142 8.08163 2.76761 4.42142 3.14111 4.97931 4.42142 5.86795 7.09238 4.41943 6.97488 7.7489 2.76761 4.97931 2.76758 7.74893 2.76761 4.42139 4.42142 4.97931 5.59799 6.08505 4.97931 7.52377 2.77158 4.42142 3.14111 4.97931 4.42139 6.4079 3.87354 4.42139 4.42139 2.76758 2.76764 4.42139 0 ]xsh305.847 -117.98 mo(inthedataforthe)[2.76862 7.77579 2.76862 4.98032 7.2179 4.98032 4.42239 2.76859 7.2269 3.32047 4.98029 6.11099 2.76859 4.98032 0 ]xshNMSBEK+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf380.133 -121.6 mo(144)[3.4834 3.48343 0 ]xshNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf391.086 -117.982 mo(Smtargetwillbediscussedbelow,after)[5.53821 10.5484 2.76862 4.42239 3.14111 4.98032 4.42239 5.57111 7.19199 2.76862 2.76859 5.56213 4.98032 7.2179 4.98029 2.76862 3.87454 4.42239 4.98029 3.87454 3.87454 4.42239 7.78476 4.98032 4.42239 2.76862 4.72528 6.5434 5.30109 4.41943 3.31647 2.76862 4.42236 0 ]xsh305.847 -106.525 mo(thestepstakentoobtainthediffusenessparameterthrough)[2.76761 4.97931 8.33371 3.87952 2.76761 4.42142 4.97931 7.79379 2.76761 4.42142 4.87769 4.4194 8.9006 2.77158 8.88269 4.97931 4.97928 2.76761 4.42142 2.76761 8.90057 2.77161 4.97931 8.33371 4.97931 2.76761 3.0694 3.32144 4.97931 3.87354 4.42139 4.97931 4.42142 3.87354 7.79379 4.97931 4.42142 3.31546 4.42142 7.7489 4.42139 2.76761 4.42142 7.24469 2.76764 4.97925 3.31549 4.97931 4.97931 4.97931 0 ]xsh305.847 -95.068 mo(comparisonwithcoupledchannelscalculationsaredescribed.)[4.42142 4.97928 7.74893 4.97931 4.42139 3.31549 2.76761 3.87354 4.97931 7.34442 7.19101 2.76761 2.76761 7.31754 4.42142 4.97931 4.97931 4.97928 2.76764 4.42139 7.34442 4.42139 4.97931 4.42142 4.97931 4.97928 4.42142 2.76761 6.24561 4.42142 4.42142 2.76758 4.42142 4.97934 2.76758 4.42139 2.76764 2.76758 4.97931 4.97931 6.23666 4.42142 3.31546 6.76761 4.97931 4.42139 3.87354 4.42139 3.31549 2.76758 4.97931 4.42145 4.97925 0 ]xsh%ADOBeginSubsetFont: MUFAAA+Times-Bold AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNMSBEM+Times-Bold dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/P <1C60D8A8C9B7D8BE6A7B5A602BBF42770F9BDE491933D5FA4FE426A02D4E5718C7278054B3664DB7B467D4E48E5F9A61ADDBE2A88D12A0D275033B84828459EA73F7D60A0030F5C64D35EF7D6A541DCC0C3AE0147A28E28AFC6BF8405DDD9AB30FDB511D97C9319635251B4D563F605D139B4EBB5BDEEA3D7D7579DDD9A8E37233BD14AE123F762D22D217B02315FA89FBDB00B1A1133B5C37ADD0E19F1E4EF1F79ACE982E362800E15F> |-/a <1C60D8A8C9B7A73D33D33BBE9B0166BDE0A830288DCA9DD5D2F84B50BE4A77E8EF93047C2F1EA3876C059DBAF433C4C00EF1CEA5609DAB4FA0A543A1D180430D7781F7AD17E286ADDF30C623336A1A9E3C9377B2AEB4B64817E19DAD816F332F4903EB170DE772D9A468D3BC110E6CF63D7C296A79837181E402E85AB03C5A94FE1FAEFDDF92723C2437289A4858A4FDA105FD46D04F3AD4BE862F2E112B563EA7E4F5589E35> |-/e <1C60D8A8C9B77FE24404D6FC75C46E8B158C79295EE152CB85114B6776941B6C41FE0BDF379B261CABD6DE32A67555E447EFF8EAD7CA0095F2F22A6BCFA8DEF10B4E32C2977CA0F7C907347449072B91CF1BD86DDFBB079C5CAC1F8F3F387833C7E0FB3A00> |-/i <1C60D8A8C9B854D088BE03066611142D35B96CDBC6AC69CE7D67EDB1CAB50A1BDB54D546537954FB6FE6BFE1A7C6E1B168CA0C5B35D41BCA3CE6C73BD1DB23AC090B997C896D226BCF70833B6C3FAB41C01E4EB05360912DD6B00F8F9075C86B55E1B4871965F61317243267FDC085> |-/l <1C60D8A8C9B854D088BE0307DDE29E2DC8A57E143D568F804B2AC3C597463240A90745CC598F7FD26C5F3BC8D8E33525D3F37BE8702098EB> |-/m <1C60D8A8C9B6B41C9EF86D4D6709D4B4B598121ABB5312D265CF235A8DF871F947DD83CAEC145FFBDAC2ACD58A94C733AE766077D3CED781B2D343AD55DFDDB8D67A9086862F8EFE2574B6FFA6EC83AC9C357A9D9807A1FF78CD8BA5275700FCF3D844938953EC2A50B770F36645E5AA8DCB80EFD2F2006585B2B8C533C28E0BEBAD08309F295A06E90F2028AA4FD3445A8F950F8DBF4741CC99024C4E6571BC4D2D7EABC29C569C3F3026BD485268134B6B652756116C0C33210E033B3CFE7A43ABCA048A4EB46257DA833BC574EA942EFC1A2B38284B3EF3E16B1D174419935953EC4A9FB849488346E0B030999551E986> |-/n <1C60D8A8C9B7EF3257330F56C94494157A7EF7FFCBD73F84D262F8E7D01959AC25EC004852A9D2EE4AC35B0916692F432F5CC4BA24475C1585C14E0905ACF072D8A88A9283F858EDF4B1C6BED04E509F9B3592B943768FA40BBE472F197C351FA9B31E247A2F6126072E89ED92526AAFBE6B29CBD01535D22319B495F8DE9EC03DE5FC3D1D349F08180CDD8EC5F746CB90B201AAB7B408BF78D5D20442C87E190839C6924F5E937788F15A694C0C87> |-/o <1C60D8A8C9B7A73D33B29FF9A975322B3362DC44B144D77C19E1494695DA7F3C9EE16429993BFE81D3F80062EB85C1F3EBBAC1E20BAD4CD6ED18D4A00CBE2E6A68F1C32B265462F7B12A0C041CD785918FFA259E1C60EBA89CDB> |-/p <1C60D8A8C9B7EF3227BDC1102CFD43DAE6FF3727F14974B147AEAF961A46548CF67DCAB1E7E0C858DB8E083DDAE1E7876A7E63198EB9F03C4C808041214AC7DAB3F5B782E8F84D2DB6557B754120B8475DECD2C35887A358A8FE7F75F3511071F0E7B59316C20863AF76AF28EB1142C83B21BA956BA2768EDF3F1296DCCEA6DE9A26F3A5D7B5E9C8B66B003A04645267835E6601E794C6> |-/r <1C60D8A8C9B77FE2B2290770D44CC430BF6AF796D77E767E49BAE099A5CB5CDA55620A37F79E62037F4D57C9543EDF0B898CB31FD6F92D81D55915B5909F3C395570A34E68F5876F9DF76D8F93A854E34A3944108FBD510D0C1B0672F3F6B0450013B110579A4125BD5DC761B4F03953B548BD8D95CF049B49F1C5AA50C0810BC4DE95AC7F525C> |-/s <1C60D8A8C9B7361F88137B04082E6E4F66FAC966F3D70C7F8A7BAA3FB50ABCFE1895C766D14BA2A7C0062F3CA804FBF9ED343E5E6B872363DD7FC3B56945804944B66762AEE06AB1789C738ACCF75A672002EC5F1B0AB8D8D1DEE2C1A38410197DD818692C68FF72064D07D83C500C31447012EE660FBEE2554E562FFF1D8FF028C865302E6BAA2336649B7721E910922BE3185F1D5BC192C216BAE3CB83868765AAA94722B91B6663685F330714D22E4EE5C955D69007AF3553C16301F6F1B75A3B75C2DD57C84F421ED21D1A27D5DDA15DE8BB35D015CD61D04289> |-/t <1C60D8A8C9B81F2CB2ACA02E0CECC7A7088ABA14D8BB1C717E776D9EDDA41B759D267E40E8E459C7F73ADF1E69682DC406BFDF457393EAAE2ED0FA699485621F5B6FC1B505550703C8328A533D11F51C3D76> |-systemdict /gcheck known {setglobal} if end {end} ifendNMSBEM+Times-Bold /Encoding getdup 80 /P putdup 97 /a putdup 101 /e putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putpop%ADOEndSubsetFont
/NMSBEM+Times-Bold*1 [46{/.notdef}rp /period 8{/.notdef}rp /seven /eight 8{/.notdef}rp /A 2{/.notdef}rp /D /E 3{/.notdef}rp /I 2{/.notdef}rp /L /.notdef /N /.notdef /P /.notdef /R /S /T /U 3{/.notdef}rp /Y 7{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t 139{/.notdef}rp]NMSBEM+Times-Bold nfNMSBEM+Times-Bold*1 [8.9664 0 0 -8.9664 0 0 ]msf381.663 -58.159 mo(A.Potentialparameters)[6.47284 6.73196 5.30087 4.48233 2.98483 3.98019 4.98441 2.98486 2.49176 4.4823 4.73425 4.98621 4.4823 3.98019 4.4823 7.46805 3.98019 2.98483 3.98019 3.98019 0 ]xshNMSBEK+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf317.808 -42.715 mo(Thesinglechannelandcoupledchannelscalculationswere)[6.08408 4.97833 6.58826 3.87952 2.7666 4.97833 4.9783 2.7666 6.57932 4.42041 4.9783 4.42041 4.9783 4.97833 4.42041 4.95938 4.42038 4.97833 7.14618 4.42041 4.97827 4.97833 4.9783 2.7666 4.42041 7.16409 4.42041 4.97833 4.42038 4.9783 4.97833 4.42041 2.7666 6.05731 4.42041 4.42041 2.76663 4.42041 4.9783 2.76663 4.42041 2.76663 2.7666 4.97833 4.97833 6.05731 7.19 4.42041 3.31451 0 ]xsh305.847 -31.258 mo(carriedoutusingaWoods-Saxonparametrizationofthe)[4.42142 4.42139 3.31549 3.31546 2.76761 4.42142 10.7098 4.97931 4.97931 8.49612 4.97931 3.87354 2.76761 4.97931 10.7008 10.1429 8.6037 4.97931 4.97931 4.97931 3.87354 3.31546 5.5372 4.42139 4.97931 4.97931 10.7277 4.97931 4.42145 3.31546 4.42142 7.7489 4.42139 2.76761 3.31546 2.76764 4.42139 4.42139 2.76764 2.76758 4.97931 10.7098 4.97736 9.04498 2.77155 4.97931 0 ]xsh305.847 -19.801 mo(nuclearpotentialwithaninternal\(volume\)imaginarypotential)[4.97931 4.97931 4.42139 2.76761 4.42142 4.42142 5.02206 4.97931 4.97931 2.76761 4.42142 4.97931 2.76758 2.76764 4.42139 4.45529 7.19101 2.76761 2.76761 6.65997 4.42142 6.66 2.76761 4.97928 2.76764 4.42139 3.31549 4.97931 4.42139 4.46423 3.31549 4.77905 4.97931 2.76758 4.97931 7.7489 4.42142 5.00415 2.76761 7.7489 4.42139 4.97931 2.76761 4.97931 4.42142 3.31546 6.66898 4.97931 4.97925 2.76764 4.42139 4.97931 2.76764 2.76758 4.42139 0 ]xshgsave
326.394 306.647 mo
529.608 306.647 li
529.608 .153992 li
326.394 .153992 li
cp
clp
.581 lw
true sadj
353.034 82.615 mo
354.146 82.615 li
355.233 86.103 li
356.345 86.103 li
357.457 87.341 li
358.569 88.883 li
359.656 84.156 li
360.769 80.365 li
361.881 79.48 li
362.993 84.182 li
364.08 85.092 li
365.192 83.398 li
366.304 85.118 li
367.417 84.207 li
368.503 88.909 li
369.616 84.207 li
370.727 79.936 li
371.84 83.424 li
372.927 88.934 li
374.039 85.142 li
375.151 85.142 li
376.264 86.179 li
377.35 84.232 li
378.463 86.204 li
379.575 82.741 li
380.687 81.502 li
381.774 85.168 li
382.886 81.502 li
383.998 88.985 li
385.11 82.109 li
386.197 80.466 li
387.31 82.109 li
388.422 88.985 li
389.534 81.528 li
390.621 85.193 li
391.733 85.193 li
392.846 84.309 li
393.957 85.218 li
395.045 86.255 li
396.157 85.218 li
397.269 81.023 li
398.381 84.309 li
399.468 90.981 li
400.58 84.334 li
401.692 83.525 li
402.805 85.244 li
403.891 87.518 li
405.003 86.305 li
406.116 86.305 li
407.228 87.544 li
408.315 87.544 li
409.428 80.542 li
410.539 83.55 li
411.651 86.305 li
412.739 81.604 li
413.85 85.269 li
414.963 83.576 li
416.075 86.33 li
417.162 84.384 li
418.274 85.294 li
419.387 84.384 li
420.498 82.21 li
421.585 82.867 li
422.698 84.384 li
423.81 83.601 li
424.922 86.356 li
426.009 84.409 li
427.121 85.32 li
428.233 84.409 li
429.345 89.111 li
430.433 82.261 li
431.544 82.261 li
432.656 89.136 li
433.769 89.136 li
434.856 83.626 li
435.969 91.083 li
437.081 85.344 li
438.193 84.435 li
439.28 85.344 li
440.392 84.435 li
441.504 82.286 li
442.616 87.646 li
443.703 86.406 li
444.815 91.108 li
445.928 84.46 li
447.04 87.646 li
448.126 80.644 li
449.239 82.943 li
450.351 87.646 li
451.463 86.406 li
452.551 83.676 li
453.662 80.668 li
454.774 85.37 li
455.887 82.312 li
456.974 86.432 li
458.085 98.615 li
459.199 86.432 li
460.31 89.187 li
461.398 86.432 li
462.509 86.432 li
463.622 87.67 li
464.734 87.695 li
465.82 89.212 li
466.932 84.511 li
468.044 82.337 li
469.158 86.457 li
470.245 85.42 li
471.356 84.511 li
472.469 81.199 li
473.581 81.755 li
474.668 82.994 li
475.781 84.511 li
476.892 85.42 li
478.004 83.727 li
479.091 89.237 li
480.203 86.482 li
481.315 91.184 li
482.429 87.721 li
483.515 85.446 li
484.626 85.446 li
485.74 83.019 li
486.851 84.536 li
487.938 84.536 li
489.051 79.835 li
490.163 83.019 li
491.275 82.387 li
492.362 77.079 li
493.473 77.989 li
494.585 78.317 li
495.7 77.079 li
496.786 80.289 li
497.897 77.686 li
499.01 81.25 li
500.122 80.77 li
501.208 78.697 li
502.322 74.349 li
503.433 70.76 li
504.545 71.341 li
505.632 74.349 li
506.745 80.77 li
507.856 81.831 li
508.97 79.456 li
510.056 79.456 li
511.167 75.84 li
512.281 66.665 li
513.392 55.265 li
514.479 43.183 li
515.591 32.212 li
516.704 22.885 li
517.816 18.689 li
518.903 18.057 li
520.015 21.469 li
521.126 28.8 li
522.24 41.388 li
523.327 54.077 li
524.438 66.21 li
525.551 71.266 li
526.663 74.021 li
527.749 73.843 li
528.862 76.877 li
.750149 .676997 .670191 .895598 cmyk
@
.379 lw
529.418 5.89801 mo
525.627 5.89801 li
352.477 5.89801 mo
356.27 5.89801 li
529.418 21.545 mo
525.627 21.545 li
352.477 21.545 mo
356.27 21.545 li
529.418 37.192 mo
525.627 37.192 li
352.477 37.192 mo
356.27 37.192 li
529.418 52.838 mo
525.627 52.838 li
352.477 52.838 mo
356.27 52.838 li
529.418 68.46 mo
525.627 68.46 li
352.477 68.46 mo
356.27 68.46 li
529.418 84.106 mo
525.627 84.106 li
352.477 84.106 mo
356.27 84.106 li
529.418 5.89801 mo
528.154 5.89801 li
352.477 5.89801 mo
353.742 5.89801 li
529.418 6.60602 mo
528.154 6.60602 li
352.477 6.60602 mo
353.742 6.60602 li
529.418 7.41501 mo
528.154 7.41501 li
352.477 7.41501 mo
353.742 7.41501 li
529.418 8.32501 mo
528.154 8.32501 li
352.477 8.32501 mo
353.742 8.32501 li
529.418 9.36102 mo
528.154 9.36102 li
352.477 9.36102 mo
353.742 9.36102 li
529.418 10.6 mo
528.154 10.6 li
352.477 10.6 mo
353.742 10.6 li
529.418 12.116 mo
528.154 12.116 li
352.477 12.116 mo
353.742 12.116 li
529.418 14.063 mo
528.154 14.063 li
352.477 14.063 mo
353.742 14.063 li
529.418 16.818 mo
528.154 16.818 li
352.477 16.818 mo
353.742 16.818 li
529.418 21.545 mo
528.154 21.545 li
352.477 21.545 mo
353.742 21.545 li
529.418 22.252 mo
528.154 22.252 li
352.477 22.252 mo
353.742 22.252 li
529.418 23.062 mo
528.154 23.062 li
352.477 23.062 mo
353.742 23.062 li
529.418 23.972 mo
528.154 23.972 li
352.477 23.972 mo
353.742 23.972 li
529.418 25.008 mo
528.154 25.008 li
352.477 25.008 mo
353.742 25.008 li
529.418 26.247 mo
528.154 26.247 li
352.477 26.247 mo
353.742 26.247 li
529.418 27.763 mo
528.154 27.763 li
352.477 27.763 mo
353.742 27.763 li
529.418 29.71 mo
528.154 29.71 li
352.477 29.71 mo
353.742 29.71 li
529.418 32.465 mo
528.154 32.465 li
352.477 32.465 mo
353.742 32.465 li
529.418 37.192 mo
528.154 37.192 li
352.477 37.192 mo
353.742 37.192 li
529.418 37.899 mo
528.154 37.899 li
352.477 37.899 mo
353.742 37.899 li
529.418 38.709 mo
528.154 38.709 li
352.477 38.709 mo
353.742 38.709 li
529.418 39.618 mo
528.154 39.618 li
352.477 39.618 mo
353.742 39.618 li
529.418 40.655 mo
528.154 40.655 li
352.477 40.655 mo
353.742 40.655 li
529.418 41.893 mo
528.154 41.893 li
352.477 41.893 mo
353.742 41.893 li
529.418 43.41 mo
528.154 43.41 li
352.477 43.41 mo
353.742 43.41 li
529.418 45.356 mo
528.154 45.356 li
352.477 45.356 mo
353.742 45.356 li
529.418 48.111 mo
528.154 48.111 li
352.477 48.111 mo
353.742 48.111 li
529.418 52.838 mo
528.154 52.838 li
352.477 52.838 mo
353.742 52.838 li
529.418 53.546 mo
528.154 53.546 li
352.477 53.546 mo
353.742 53.546 li
529.418 54.355 mo
528.154 54.355 li
352.477 54.355 mo
353.742 54.355 li
529.418 55.239 mo
528.154 55.239 li
352.477 55.239 mo
353.742 55.239 li
529.418 56.301 mo
528.154 56.301 li
352.477 56.301 mo
353.742 56.301 li
529.418 57.54 mo
528.154 57.54 li
352.477 57.54 mo
353.742 57.54 li
529.418 59.056 mo
528.154 59.056 li
352.477 59.056 mo
353.742 59.056 li
529.418 61.002 mo
528.154 61.002 li
352.477 61.002 mo
353.742 61.002 li
529.418 63.758 mo
528.154 63.758 li
352.477 63.758 mo
353.742 63.758 li
529.418 68.46 mo
528.154 68.46 li
352.477 68.46 mo
353.742 68.46 li
529.418 69.192 mo
528.154 69.192 li
352.477 69.192 mo
353.742 69.192 li
529.418 69.976 mo
528.154 69.976 li
352.477 69.976 mo
353.742 69.976 li
529.418 70.886 mo
528.154 70.886 li
352.477 70.886 mo
353.742 70.886 li
529.418 71.948 mo
528.154 71.948 li
352.477 71.948 mo
353.742 71.948 li
529.418 73.187 mo
528.154 73.187 li
352.477 73.187 mo
353.742 73.187 li
529.418 74.703 mo
528.154 74.703 li
352.477 74.703 mo
353.742 74.703 li
529.418 76.649 mo
528.154 76.649 li
352.477 76.649 mo
353.742 76.649 li
529.418 79.404 mo
528.154 79.404 li
352.477 79.404 mo
353.742 79.404 li
529.418 84.106 mo
528.154 84.106 li
352.477 84.106 mo
353.742 84.106 li
529.418 84.839 mo
528.154 84.839 li
352.477 84.839 mo
353.742 84.839 li
529.418 85.623 mo
528.154 85.623 li
352.477 85.623 mo
353.742 85.623 li
529.418 86.533 mo
528.154 86.533 li
352.477 86.533 mo
353.742 86.533 li
529.418 87.594 mo
528.154 87.594 li
352.477 87.594 mo
353.742 87.594 li
529.418 88.834 mo
528.154 88.834 li
352.477 88.834 mo
353.742 88.834 li
529.418 90.35 mo
528.154 90.35 li
352.477 90.35 mo
353.742 90.35 li
529.418 92.296 mo
528.154 92.296 li
352.477 92.296 mo
353.742 92.296 li
529.418 95.051 mo
528.154 95.051 li
352.477 95.051 mo
353.742 95.051 li
529.418 99.752 mo
528.154 99.752 li
352.477 99.752 mo
353.742 99.752 li
529.418 99.752 mo
529.418 5.89801 li
352.477 99.752 mo
352.477 5.89801 li
518.372 5.89801 mo
518.372 9.69 li
518.372 99.752 mo
518.372 95.961 li
490.719 5.89801 mo
490.719 9.69 li
490.719 99.752 mo
490.719 95.961 li
463.065 5.89801 mo
463.065 9.69 li
463.065 99.752 mo
463.065 95.961 li
435.412 5.89801 mo
435.412 9.69 li
435.412 99.752 mo
435.412 95.961 li
407.784 5.89801 mo
407.784 9.69 li
407.784 99.752 mo
407.784 95.961 li
380.131 5.89801 mo
380.131 9.69 li
380.131 99.752 mo
380.131 95.961 li
352.477 5.89801 mo
352.477 9.69 li
352.477 99.752 mo
352.477 95.961 li
504.545 5.89801 mo
504.545 7.16302 li
504.545 99.752 mo
504.545 98.489 li
476.892 5.89801 mo
476.892 7.16302 li
476.892 99.752 mo
476.892 98.489 li
449.239 5.89801 mo
449.239 7.16302 li
449.239 99.752 mo
449.239 98.489 li
421.585 5.89801 mo
421.585 7.16302 li
421.585 99.752 mo
421.585 98.489 li
393.957 5.89801 mo
393.957 7.16302 li
393.957 99.752 mo
393.957 98.489 li
366.304 5.89801 mo
366.304 7.16302 li
366.304 99.752 mo
366.304 98.489 li
352.477 5.89801 mo
529.418 5.89801 li
352.477 99.752 mo
529.418 99.752 li
@
352.477 5.89801 mo
529.417 5.89801 li
529.417 99.752 li
352.477 99.752 li
cp
@
grestore
.581 lw
true sadj
503.99 37.192 mo
503.99 53.546 li
.750149 .676997 .670191 .895598 cmyk
@
502.093 49.754 mo
503.99 53.546 li
505.884 49.754 li
503.99 51.65 li
502.093 49.754 li
f
gsave
326.394 306.647 mo
529.608 306.647 li
529.608 .153992 li
326.394 .153992 li
cp
clp
502.093 49.754 mo
503.99 53.546 li
505.884 49.754 li
503.99 51.65 li
502.093 49.754 li
cp
@
.379 lw
[.379 1.137 ] 0 dsh
352.477 85.623 mo
529.418 85.623 li
@
.581 lw
[] 0 dsh
353.034 176.57 mo
354.146 175.332 li
355.233 181.271 li
356.345 184.76 li
357.457 176.595 li
358.569 177.303 li
359.656 180.058 li
360.769 178.112 li
361.881 174.827 li
362.993 178.112 li
364.08 177.329 li
365.192 175.965 li
366.304 176.621 li
367.417 175.965 li
368.503 175.965 li
369.616 179.048 li
370.727 174.346 li
371.84 174.85 li
372.927 176.621 li
374.039 177.354 li
375.151 175.99 li
376.264 176.646 li
377.35 177.354 li
378.463 177.354 li
379.575 180.134 li
380.687 179.074 li
381.774 176.672 li
382.886 178.188 li
383.998 173.056 li
385.11 178.188 li
388.422 178.188 li
389.534 174.902 li
390.621 176.697 li
391.733 177.405 li
392.846 177.405 li
393.957 176.697 li
395.045 180.16 li
396.157 179.124 li
397.269 173.512 li
398.381 175.459 li
399.468 176.722 li
400.58 176.722 li
401.692 180.185 li
402.805 174.423 li
403.891 180.185 li
405.003 173.967 li
406.116 176.09 li
407.228 180.211 li
408.315 174.953 li
409.428 174.953 li
410.539 174.448 li
411.651 178.264 li
412.739 175.508 li
413.85 174.953 li
414.963 176.748 li
416.075 176.115 li
417.162 173.158 li
418.274 173.562 li
419.387 174.471 li
420.498 178.29 li
421.585 175.535 li
422.698 173.158 li
423.81 176.115 li
424.922 174.497 li
426.009 172.425 li
427.121 178.29 li
428.233 174.497 li
429.345 175.535 li
430.433 174.018 li
431.544 176.797 li
432.656 176.797 li
433.769 181.499 li
434.856 175.003 li
435.969 170.858 li
437.081 174.044 li
438.193 175.029 li
439.28 175.559 li
440.392 174.044 li
441.504 175.029 li
442.616 174.523 li
443.703 175.029 li
444.815 174.523 li
445.928 175.029 li
447.04 173.638 li
448.126 173.638 li
449.239 174.548 li
450.351 173.638 li
451.463 173.234 li
452.551 172.475 li
453.662 172.121 li
454.774 173.234 li
455.887 173.234 li
456.974 169.164 li
458.085 165.145 li
459.199 162.794 li
460.31 161.127 li
461.398 162.794 li
462.509 165.398 li
463.622 172.146 li
464.734 175.61 li
465.82 169.62 li
466.932 168.355 li
468.044 164.033 li
469.158 161.151 li
470.245 160.342 li
471.356 155.339 li
472.469 153.316 li
473.581 154.782 li
474.668 160.772 li
475.781 170.655 li
476.892 170.125 li
478.004 167.976 li
479.091 174.118 li
480.203 175.104 li
481.315 174.598 li
482.429 174.118 li
483.515 171.54 li
484.626 170.149 li
485.74 164.842 li
486.851 163.376 li
487.938 162.946 li
489.051 161.961 li
490.163 159.407 li
491.275 155.919 li
492.362 154.706 li
493.473 154.049 li
494.585 154.73 li
495.7 154.327 li
496.786 154.73 li
497.897 157.233 li
499.01 160.949 li
500.122 166.106 li
501.208 164.968 li
502.322 164.513 li
503.433 162.618 li
504.545 162.718 li
505.632 163.048 li
506.745 171.262 li
507.856 179.351 li
508.97 175.685 li
510.056 171.893 li
511.167 168.609 li
512.281 159.306 li
513.392 146.744 li
514.479 133.372 li
515.591 123.109 li
516.704 115.653 li
517.816 111.81 li
518.903 111.785 li
520.015 115.299 li
521.126 124.55 li
522.24 136.556 li
523.327 149.752 li
524.438 160.468 li
525.551 165.878 li
526.663 168.254 li
527.749 168.077 li
528.862 169.492 li
@
.379 lw
529.418 115.4 mo
525.627 115.4 li
352.477 115.4 mo
356.27 115.4 li
529.418 131.047 mo
525.627 131.047 li
352.477 131.047 mo
356.27 131.047 li
529.418 146.693 mo
525.627 146.693 li
352.477 146.693 mo
356.27 146.693 li
529.418 162.34 mo
525.627 162.34 li
352.477 162.34 mo
356.27 162.34 li
529.418 177.987 mo
525.627 177.987 li
352.477 177.987 mo
356.27 177.987 li
529.418 99.752 mo
528.154 99.752 li
352.477 99.752 mo
353.742 99.752 li
529.418 99.752 mo
528.154 99.752 li
352.477 99.752 mo
353.742 99.752 li
529.418 100.486 mo
528.154 100.486 li
352.477 100.486 mo
353.742 100.486 li
529.418 101.27 mo
528.154 101.27 li
352.477 101.27 mo
353.742 101.27 li
529.418 102.179 mo
528.154 102.179 li
352.477 102.179 mo
353.742 102.179 li
529.418 103.241 mo
528.154 103.241 li
352.477 103.241 mo
353.742 103.241 li
529.418 104.48 mo
528.154 104.48 li
352.477 104.48 mo
353.742 104.48 li
529.418 105.996 mo
528.154 105.996 li
352.477 105.996 mo
353.742 105.996 li
529.418 107.943 mo
528.154 107.943 li
352.477 107.943 mo
353.742 107.943 li
529.418 110.698 mo
528.154 110.698 li
352.477 110.698 mo
353.742 110.698 li
529.418 115.4 mo
528.154 115.4 li
352.477 115.4 mo
353.742 115.4 li
529.418 116.107 mo
528.154 116.107 li
352.477 116.107 mo
353.742 116.107 li
529.418 116.916 mo
528.154 116.916 li
352.477 116.916 mo
353.742 116.916 li
529.418 117.826 mo
528.154 117.826 li
352.477 117.826 mo
353.742 117.826 li
529.418 118.862 mo
528.154 118.862 li
352.477 118.862 mo
353.742 118.862 li
529.418 120.101 mo
528.154 120.101 li
352.477 120.101 mo
353.742 120.101 li
529.418 121.617 mo
528.154 121.617 li
352.477 121.617 mo
353.742 121.617 li
529.418 123.59 mo
528.154 123.59 li
352.477 123.59 mo
353.742 123.59 li
529.418 126.344 mo
528.154 126.344 li
352.477 126.344 mo
353.742 126.344 li
529.418 131.047 mo
528.154 131.047 li
352.477 131.047 mo
353.742 131.047 li
529.418 131.754 mo
528.154 131.754 li
352.477 131.754 mo
353.742 131.754 li
529.418 132.563 mo
528.154 132.563 li
352.477 132.563 mo
353.742 132.563 li
529.418 133.473 mo
528.154 133.473 li
352.477 133.473 mo
353.742 133.473 li
529.418 134.509 mo
528.154 134.509 li
352.477 134.509 mo
353.742 134.509 li
529.418 135.748 mo
528.154 135.748 li
352.477 135.748 mo
353.742 135.748 li
529.418 137.264 mo
528.154 137.264 li
352.477 137.264 mo
353.742 137.264 li
529.418 139.236 mo
528.154 139.236 li
352.477 139.236 mo
353.742 139.236 li
529.418 141.992 mo
528.154 141.992 li
352.477 141.992 mo
353.742 141.992 li
529.418 146.693 mo
528.154 146.693 li
352.477 146.693 mo
353.742 146.693 li
529.418 147.401 mo
528.154 147.401 li
352.477 147.401 mo
353.742 147.401 li
529.418 148.21 mo
528.154 148.21 li
352.477 148.21 mo
353.742 148.21 li
529.418 149.12 mo
528.154 149.12 li
352.477 149.12 mo
353.742 149.12 li
529.418 150.156 mo
528.154 150.156 li
352.477 150.156 mo
353.742 150.156 li
529.418 151.394 mo
528.154 151.394 li
352.477 151.394 mo
353.742 151.394 li
529.418 152.911 mo
528.154 152.911 li
352.477 152.911 mo
353.742 152.911 li
529.418 154.883 mo
528.154 154.883 li
352.477 154.883 mo
353.742 154.883 li
529.418 157.638 mo
528.154 157.638 li
352.477 157.638 mo
353.742 157.638 li
529.418 162.34 mo
528.154 162.34 li
352.477 162.34 mo
353.742 162.34 li
529.418 163.048 mo
528.154 163.048 li
352.477 163.048 mo
353.742 163.048 li
529.418 163.856 mo
528.154 163.856 li
352.477 163.856 mo
353.742 163.856 li
529.418 164.765 mo
528.154 164.765 li
352.477 164.765 mo
353.742 164.765 li
529.418 165.802 mo
528.154 165.802 li
352.477 165.802 mo
353.742 165.802 li
529.418 167.042 mo
528.154 167.042 li
352.477 167.042 mo
353.742 167.042 li
529.418 168.557 mo
528.154 168.557 li
352.477 168.557 mo
353.742 168.557 li
529.418 170.504 mo
528.154 170.504 li
352.477 170.504 mo
353.742 170.504 li
529.418 173.259 mo
528.154 173.259 li
352.477 173.259 mo
353.742 173.259 li
529.418 177.987 mo
528.154 177.987 li
352.477 177.987 mo
353.742 177.987 li
529.418 178.694 mo
528.154 178.694 li
352.477 178.694 mo
353.742 178.694 li
529.418 179.503 mo
528.154 179.503 li
352.477 179.503 mo
353.742 179.503 li
529.418 180.412 mo
528.154 180.412 li
352.477 180.412 mo
353.742 180.412 li
529.418 181.448 mo
528.154 181.448 li
352.477 181.448 mo
353.742 181.448 li
529.418 182.687 mo
528.154 182.687 li
352.477 182.687 mo
353.742 182.687 li
529.418 184.204 mo
528.154 184.204 li
352.477 184.204 mo
353.742 184.204 li
529.418 186.151 mo
528.154 186.151 li
352.477 186.151 mo
353.742 186.151 li
529.418 188.905 mo
528.154 188.905 li
352.477 188.905 mo
353.742 188.905 li
529.418 193.633 mo
528.154 193.633 li
352.477 193.633 mo
353.742 193.633 li
529.418 193.633 mo
529.418 99.752 li
352.477 193.633 mo
352.477 99.752 li
518.372 99.752 mo
518.372 103.545 li
518.372 193.633 mo
518.372 189.841 li
490.719 99.752 mo
490.719 103.545 li
490.719 193.633 mo
490.719 189.841 li
463.065 99.752 mo
463.065 103.545 li
463.065 193.633 mo
463.065 189.841 li
435.412 99.752 mo
435.412 103.545 li
435.412 193.633 mo
435.412 189.841 li
407.784 99.752 mo
407.784 103.545 li
407.784 193.633 mo
407.784 189.841 li
380.131 99.752 mo
380.131 103.545 li
380.131 193.633 mo
380.131 189.841 li
352.477 99.752 mo
352.477 103.545 li
352.477 193.633 mo
352.477 189.841 li
504.545 99.752 mo
504.545 101.017 li
504.545 193.633 mo
504.545 192.368 li
476.892 99.752 mo
476.892 101.017 li
476.892 193.633 mo
476.892 192.368 li
449.239 99.752 mo
449.239 101.017 li
449.239 193.633 mo
449.239 192.368 li
421.585 99.752 mo
421.585 101.017 li
421.585 193.633 mo
421.585 192.368 li
393.957 99.752 mo
393.957 101.017 li
393.957 193.633 mo
393.957 192.368 li
366.304 99.752 mo
366.304 101.017 li
366.304 193.633 mo
366.304 192.368 li
352.477 99.752 mo
529.418 99.752 li
352.477 193.633 mo
529.418 193.633 li
@
352.477 99.752 mo
529.417 99.752 li
529.417 193.632 li
352.477 193.632 li
cp
@
grestore
503.99 131.047 mo
503.99 147.401 li
@
502.093 143.609 mo
503.99 147.401 li
505.884 143.609 li
503.99 145.505 li
502.093 143.609 li
f
gsave
326.394 306.647 mo
529.608 306.647 li
529.608 .153992 li
326.394 .153992 li
cp
clp
502.093 143.609 mo
503.99 147.401 li
505.884 143.609 li
503.99 145.505 li
502.093 143.609 li
cp
@
.379 lw
[.379 1.137 ] 0 dsh
352.477 178.694 mo
529.418 178.694 li
@
.581 lw
[] 0 dsh
353.034 271.991 mo
354.146 269.818 li
355.233 269.236 li
356.345 271.182 li
357.457 269.236 li
358.569 266.885 li
359.656 269.236 li
360.769 269.261 li
361.881 268.707 li
362.993 269.261 li
364.08 265.799 li
365.192 267.746 li
366.304 266.153 li
367.417 267.746 li
368.503 268.731 li
370.727 268.731 li
371.84 269.287 li
372.927 270.526 li
374.039 265.168 li
375.151 269.894 li
376.264 267.771 li
377.35 269.287 li
378.463 266.178 li
379.575 268.251 li
380.687 265.192 li
381.774 264.888 li
382.886 266.203 li
383.998 269.312 li
385.11 264.888 li
386.197 265.849 li
387.31 265.217 li
388.422 264.611 li
389.534 264.081 li
390.621 267.821 li
391.733 264.358 li
392.846 264.081 li
393.957 261.502 li
395.045 260.212 li
396.157 262.463 li
397.269 260.996 li
398.381 258.772 li
399.468 257.886 li
400.58 259.024 li
401.692 257.28 li
402.805 257.28 li
403.891 256.219 li
405.003 255.991 li
406.116 255.991 li
407.228 253.615 li
408.315 253.843 li
409.428 253.464 li
410.539 254.652 li
411.651 253.414 li
412.739 252.327 li
413.85 252.224 li
414.963 250.81 li
416.075 250.885 li
417.162 251.113 li
418.274 251.391 li
419.387 250.177 li
420.498 249.773 li
421.585 248.332 li
422.698 248.383 li
423.81 247.65 li
424.922 246.336 li
426.009 246.765 li
427.121 247.902 li
428.233 249.394 li
429.345 249.773 li
430.433 249.697 li
431.544 248.307 li
432.656 247.776 li
433.769 247.043 li
434.856 247.801 li
435.969 247.801 li
437.081 247.271 li
438.193 247.625 li
439.28 248.913 li
440.392 248.887 li
441.504 248.635 li
442.616 253.261 li
443.703 257.459 li
444.815 257.179 li
445.928 255.258 li
447.04 252.856 li
448.126 255.334 li
449.239 255.132 li
450.351 257.103 li
451.463 255.84 li
452.551 254.349 li
453.662 251.922 li
454.774 253.387 li
455.887 251.821 li
456.974 250.556 li
458.085 248.206 li
459.199 243.379 li
460.31 241.911 li
461.398 242.72 li
462.509 245.02 li
463.622 250.582 li
464.734 257.028 li
465.82 257.508 li
466.932 250.429 li
468.044 243.96 li
469.158 242.367 li
470.245 242.216 li
471.356 238.627 li
472.469 235.113 li
473.581 235.517 li
474.668 239.965 li
475.781 248.231 li
476.892 251.821 li
478.004 250.457 li
479.091 252.908 li
480.203 253.159 li
481.315 254.828 li
482.429 252.579 li
483.515 252.832 li
484.626 249.899 li
485.74 247.549 li
486.851 245.93 li
487.938 244.262 li
489.051 243.631 li
490.163 242.316 li
491.275 241.532 li
492.362 239.435 li
493.473 238.676 li
494.585 239.082 li
495.7 239.156 li
496.786 240.471 li
497.897 242.114 li
499.01 245.249 li
500.122 245.755 li
501.208 246.715 li
502.322 247.043 li
503.433 247.093 li
504.545 247.65 li
505.632 250.278 li
506.745 260.263 li
507.856 266.43 li
508.97 270.146 li
510.056 269.565 li
511.167 266.809 li
512.281 258.847 li
513.392 247.701 li
514.479 233.469 li
515.591 222.626 li
516.704 214.764 li
517.816 210.518 li
518.903 209.38 li
520.015 213.273 li
521.126 220.654 li
522.24 232.155 li
523.327 245.855 li
524.438 258.999 li
525.551 263.119 li
526.663 264.333 li
527.749 262.917 li
528.862 266.102 li
@
.379 lw
518.372 193.633 mo
518.372 197.425 li
518.372 287.486 mo
518.372 283.695 li
490.719 193.633 mo
490.719 197.425 li
490.719 287.486 mo
490.719 283.695 li
463.065 193.633 mo
463.065 197.425 li
463.065 287.486 mo
463.065 283.695 li
435.412 193.633 mo
435.412 197.425 li
435.412 287.486 mo
435.412 283.695 li
407.784 193.633 mo
407.784 197.425 li
407.784 287.486 mo
407.784 283.695 li
380.131 193.633 mo
380.131 197.425 li
380.131 287.486 mo
380.131 283.695 li
352.477 193.633 mo
352.477 197.425 li
352.477 287.486 mo
352.477 283.695 li
504.545 193.633 mo
504.545 194.896 li
504.545 287.486 mo
504.545 286.223 li
476.892 193.633 mo
476.892 194.896 li
476.892 287.486 mo
476.892 286.223 li
449.239 193.633 mo
449.239 194.896 li
449.239 287.486 mo
449.239 286.223 li
421.585 193.633 mo
421.585 194.896 li
421.585 287.486 mo
421.585 286.223 li
393.957 193.633 mo
393.957 194.896 li
393.957 287.486 mo
393.957 286.223 li
366.304 193.633 mo
366.304 194.896 li
366.304 287.486 mo
366.304 286.223 li
352.477 193.633 mo
529.418 193.633 li
352.477 287.486 mo
529.418 287.486 li
529.418 209.279 mo
525.627 209.279 li
352.477 209.279 mo
356.27 209.279 li
529.418 224.9 mo
525.627 224.9 li
352.477 224.9 mo
356.27 224.9 li
529.418 240.547 mo
525.627 240.547 li
352.477 240.547 mo
356.27 240.547 li
529.418 256.193 mo
525.627 256.193 li
352.477 256.193 mo
356.27 256.193 li
529.418 271.841 mo
525.627 271.841 li
352.477 271.841 mo
356.27 271.841 li
529.418 287.486 mo
525.627 287.486 li
352.477 287.486 mo
356.27 287.486 li
529.418 193.633 mo
528.154 193.633 li
352.477 193.633 mo
353.742 193.633 li
529.418 193.633 mo
528.154 193.633 li
352.477 193.633 mo
353.742 193.633 li
529.418 194.34 mo
528.154 194.34 li
352.477 194.34 mo
353.742 194.34 li
529.418 195.149 mo
528.154 195.149 li
352.477 195.149 mo
353.742 195.149 li
529.418 196.034 mo
528.154 196.034 li
352.477 196.034 mo
353.742 196.034 li
529.418 197.095 mo
528.154 197.095 li
352.477 197.095 mo
353.742 197.095 li
529.418 198.334 mo
528.154 198.334 li
352.477 198.334 mo
353.742 198.334 li
529.418 199.85 mo
528.154 199.85 li
352.477 199.85 mo
353.742 199.85 li
529.418 201.797 mo
528.154 201.797 li
352.477 201.797 mo
353.742 201.797 li
529.418 204.551 mo
528.154 204.551 li
352.477 204.551 mo
353.742 204.551 li
529.418 209.279 mo
528.154 209.279 li
352.477 209.279 mo
353.742 209.279 li
529.418 209.987 mo
528.154 209.987 li
352.477 209.987 mo
353.742 209.987 li
529.418 210.77 mo
528.154 210.77 li
352.477 210.77 mo
353.742 210.77 li
529.418 211.68 mo
528.154 211.68 li
352.477 211.68 mo
353.742 211.68 li
529.418 212.742 mo
528.154 212.742 li
352.477 212.742 mo
353.742 212.742 li
529.418 213.98 mo
528.154 213.98 li
352.477 213.98 mo
353.742 213.98 li
529.418 215.497 mo
528.154 215.497 li
352.477 215.497 mo
353.742 215.497 li
529.418 217.443 mo
528.154 217.443 li
352.477 217.443 mo
353.742 217.443 li
529.418 220.199 mo
528.154 220.199 li
352.477 220.199 mo
353.742 220.199 li
529.418 224.9 mo
528.154 224.9 li
352.477 224.9 mo
353.742 224.9 li
529.418 225.633 mo
528.154 225.633 li
352.477 225.633 mo
353.742 225.633 li
529.418 226.417 mo
528.154 226.417 li
352.477 226.417 mo
353.742 226.417 li
529.418 227.327 mo
528.154 227.327 li
352.477 227.327 mo
353.742 227.327 li
529.418 228.388 mo
528.154 228.388 li
352.477 228.388 mo
353.742 228.388 li
529.418 229.628 mo
528.154 229.628 li
352.477 229.628 mo
353.742 229.628 li
529.418 231.144 mo
528.154 231.144 li
352.477 231.144 mo
353.742 231.144 li
529.418 233.091 mo
528.154 233.091 li
352.477 233.091 mo
353.742 233.091 li
529.418 235.845 mo
528.154 235.845 li
352.477 235.845 mo
353.742 235.845 li
529.418 240.547 mo
528.154 240.547 li
352.477 240.547 mo
353.742 240.547 li
529.418 241.28 mo
528.154 241.28 li
352.477 241.28 mo
353.742 241.28 li
529.418 242.063 mo
528.154 242.063 li
352.477 242.063 mo
353.742 242.063 li
529.418 242.973 mo
528.154 242.973 li
352.477 242.973 mo
353.742 242.973 li
529.418 244.036 mo
528.154 244.036 li
352.477 244.036 mo
353.742 244.036 li
529.418 245.274 mo
528.154 245.274 li
352.477 245.274 mo
353.742 245.274 li
529.418 246.791 mo
528.154 246.791 li
352.477 246.791 mo
353.742 246.791 li
529.418 248.737 mo
528.154 248.737 li
352.477 248.737 mo
353.742 248.737 li
529.418 251.492 mo
528.154 251.492 li
352.477 251.492 mo
353.742 251.492 li
529.418 256.193 mo
528.154 256.193 li
352.477 256.193 mo
353.742 256.193 li
529.418 256.926 mo
528.154 256.926 li
352.477 256.926 mo
353.742 256.926 li
529.418 257.71 mo
528.154 257.71 li
352.477 257.71 mo
353.742 257.71 li
529.418 258.621 mo
528.154 258.621 li
352.477 258.621 mo
353.742 258.621 li
529.418 259.682 mo
528.154 259.682 li
352.477 259.682 mo
353.742 259.682 li
529.418 260.921 mo
528.154 260.921 li
352.477 260.921 mo
353.742 260.921 li
529.418 262.412 mo
528.154 262.412 li
352.477 262.412 mo
353.742 262.412 li
529.418 264.383 mo
528.154 264.383 li
352.477 264.383 mo
353.742 264.383 li
529.418 267.138 mo
528.154 267.138 li
352.477 267.138 mo
353.742 267.138 li
529.418 271.841 mo
528.154 271.841 li
352.477 271.841 mo
353.742 271.841 li
529.418 272.548 mo
528.154 272.548 li
352.477 272.548 mo
353.742 272.548 li
529.418 273.357 mo
528.154 273.357 li
352.477 273.357 mo
353.742 273.357 li
529.418 274.266 mo
528.154 274.266 li
352.477 274.266 mo
353.742 274.266 li
529.418 275.303 mo
528.154 275.303 li
352.477 275.303 mo
353.742 275.303 li
529.418 276.543 mo
528.154 276.543 li
352.477 276.543 mo
353.742 276.543 li
529.418 278.059 mo
528.154 278.059 li
352.477 278.059 mo
353.742 278.059 li
529.418 280.031 mo
528.154 280.031 li
352.477 280.031 mo
353.742 280.031 li
529.418 282.786 mo
528.154 282.786 li
352.477 282.786 mo
353.742 282.786 li
529.418 287.486 mo
529.418 193.633 li
352.477 287.486 mo
352.477 193.633 li
@
352.477 193.633 mo
529.417 193.633 li
529.417 287.486 li
352.477 287.486 li
cp
@
grestore
503.99 224.9 mo
503.99 241.28 li
@
502.093 237.489 mo
503.99 241.28 li
505.884 237.489 li
503.99 239.384 li
502.093 237.489 li
f
gsave
326.394 306.647 mo
529.608 306.647 li
529.608 .153992 li
326.394 .153992 li
cp
clp
502.093 237.489 mo
503.99 241.28 li
505.884 237.489 li
503.99 239.384 li
502.093 237.489 li
cp
@
.379 lw
[.379 1.137 ] 0 dsh
352.477 272.548 mo
529.418 272.548 li
@
grestore
%ADOBeginSubsetFont: NCMBAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNMSBEK+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B8707C25> |-/plus <1C60D8A8C9B7E7C1AF984FCD3C228B14B7EEDA7B82DF4ABAEEAC236EBD47B08E7A9FE318DC60B1A2D96D4808F4FBEE7CEB030277> |-/slash <1C60D8A8C9B854D0F86D8C2AC35CE1F12B9DAC7900563C04A662FC20C6C8BFDAFAA9BF145B54A5B1BC> |-/equal <1C60D8A8C9B7E7C1AFF970EB1377A6731CBE8C4335C0C07E7035175C3662704D5F09034D203B921EA3AAC406CD707F> |-/Q <1C60D8A8C9B6079F6E1D87ED750BB545583A5DAACF4F6B0763A45242DE8B8442CA1E64F3D4153AA92C0C7F0D044FFD7089E4B74F84E0AF5C46FAABCABBC3AB8929FAAB8F5715F07E920DFCC9BB60FBAD0D54160680B64C2FC8797712463F14C052C508C483300948CE27330AEABDF5046EEA82136F3D906F60534BBE2431C2CCE18B5A701A38328B293648A6928C> |-systemdict /gcheck known {setglobal} if end {end} ifendNMSBEK+Times-Roman /Encoding getdup 32 /space putdup 43 /plus putdup 47 /slash putdup 61 /equal putdup 81 /Q putpop%ADOEndSubsetFont
/NMSBEK+Times-Roman*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /five /six /seven /eight /nine /colon 2{/.notdef}rp /equal 3{/.notdef}rp /A /B /C /D /E /F /.notdef /H /I 2{/.notdef}rp /L /M /.notdef /O /P /Q /R /S /T /.notdef /V /W /.notdef /Y /.notdef /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z 51{/.notdef}rp /fi 81{/.notdef}rp]NMSBEK+Times-Roman nfNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf338.625 88.8579 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf347.497 83.5503 mo(1)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf338.12 73.2114 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf346.993 67.9039 mo(2)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf338.323 57.565 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf347.195 52.2564 mo(3)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf338.12 41.9184 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf346.993 36.6099 mo(4)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf338.323 26.2721 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf347.195 20.9643 mo(5)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf338.12 10.651 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf346.993 5.34232 mo(6)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf369.06 48.1118 mo(\(a\)  E/V)[2.94598 3.92807 2.94598 2.21088 2.21085 5.40546 2.45947 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf397.522 51.65 mo(B)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf401.692 48.1118 mo( = 0.80)[2.21176 4.98965 2.21176 4.42349 2.21176 4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf369.06 24.4018 mo(16)[3.12177 0 ]xshNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf375.278 29.7096 mo(O + )[6.38666 2.21173 4.9888 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf391.101 24.4018 mo(208)[3.12177 3.12173 0 ]xshNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf400.479 29.7096 mo(Pb)[4.91895 0 ]xsh382.886 61.0032 mo(E)shNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf388.295 64.5416 mo(lab)[1.73569 2.77213 0 ]xshNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf395.929 61.0034 mo( = 63.9 MeV)[2.21176 4.98965 2.21176 4.42349 4.42349 2.21176 4.42349 2.21176 7.86505 3.92807 0 ]xsh338.625 182.712 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf347.497 177.404 mo(1)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf338.12 167.091 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf346.993 161.783 mo(2)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf338.323 151.445 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf347.195 146.136 mo(3)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf338.12 135.799 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf346.993 130.491 mo(4)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf338.323 120.151 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf347.195 114.843 mo(5)shNMSBEK+Times-Roman*1 [0 -8.847 -8.847 0 0 0 ]msf333.746 200.835 mo(yield \(in center of mass frame\))[-4.42349 -2.45947 -3.92807 -2.45947 -4.42349 -2.21175 -2.94598 -2.45947 -4.42349 -2.21176 -3.92805 -3.92807 -4.42351 -2.45946 -3.92807 -2.94598 -2.21176 -4.42349 -2.94598 -2.21176 -6.88297 -3.92807 -3.44153 -3.44156 -2.21176 -2.94598 -2.94598 -3.92807 -6.88297 -3.92807 0 ]yshNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf369.06 123.59 mo(\(b\)  E/V)[2.94598 4.42349 2.94598 2.21176 2.21176 5.40543 2.45947 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf398.028 127.129 mo(B)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf402.198 123.59 mo( = 0.90)[2.21176 4.98965 2.21176 4.42349 2.21176 4.42349 0 ]xsh382.886 135.747 mo(E)shNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf388.295 139.287 mo(lab)[1.73569 2.77213 0 ]xshNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf395.929 135.748 mo( = 71.9 MeV)[2.21176 4.98965 2.21176 4.42349 4.42349 2.21176 4.42349 2.21176 7.86505 3.92807 0 ]xsh346.714 295.928 mo(-30)[2.94598 4.42349 0 ]xsh374.519 296.131 mo(-25)[2.94598 4.42349 0 ]xsh402.02 295.928 mo(-20)[2.94598 4.42349 0 ]xsh429.8 296.131 mo(-15)[2.94598 4.42349 0 ]xsh457.302 295.928 mo(-10)[2.94687 4.42438 0 ]xsh487.305 296.131 mo(-5)[2.94687 0 ]xsh516.272 295.928 mo(0)sh424.996 304.674 mo(Q [MeV])[6.38754 2.21173 2.94598 7.86505 3.92807 6.38754 0 ]xsh338.118 292.238 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf346.993 286.93 mo(0)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf338.625 276.592 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf347.497 271.284 mo(1)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf338.12 260.946 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf346.993 255.636 mo(2)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf338.323 245.3 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf347.195 239.99 mo(3)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf338.12 229.652 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf346.993 224.344 mo(4)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf338.323 214.006 mo(10)[4.42349 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf347.195 208.698 mo(5)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf369.06 217.444 mo(\(c\)  E/V)[2.94598 3.92807 2.94598 2.21088 2.21085 5.40546 2.45947 0 ]xshNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf397.522 220.982 mo(B)shNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf401.692 217.444 mo( = 0.96)[2.21176 4.98965 2.21176 4.42349 2.21176 4.42349 0 ]xsh382.886 229.628 mo(E)shNMSBEK+Times-Roman*1 [6.2435 0 0 -6.2435 0 0 ]msf388.295 233.167 mo(lab)[1.73569 2.77213 0 ]xshNMSBEK+Times-Roman*1 [8.847 0 0 -8.847 0 0 ]msf395.929 229.628 mo( = 76.9 MeV)[2.21176 4.98965 2.21176 4.42349 4.42349 2.21176 4.42349 2.21176 7.86505 3.92807 0 ]xsh1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: NCMBAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)systemdict beginNMSBEK+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/G <1C60D8A8C9B6079FE80CFBD54AE6446FBA944F5976097F2556259B6EA8550B1847F17AEB487E505DB611456A9C388093FFF0D3A992733352F61872C146C1111F9C9E2FD3AA51ECECF19191597FB18D7DAE849C6D97B11095A1ECEBE6AB3E0376855AAEB21199C2CC425CCA7D2FDA7C5702FFA9421001539A497DC35644128DE18AE84993480EB0> |-systemdict /gcheck known {setglobal} if end {end} ifendNMSBEK+Times-Roman /Encoding getdup 71 /G putpop%ADOEndSubsetFont
/NMSBEK+Times-Roman*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /five /six /seven /eight /nine /colon 2{/.notdef}rp /equal 3{/.notdef}rp /A /B /C /D /E /F /G /H /I 2{/.notdef}rp /L /M /.notdef /O /P /Q /R /S /T /.notdef /V /W /.notdef /Y /.notdef /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z 51{/.notdef}rp /fi 81{/.notdef}rp]NMSBEK+Times-Roman nfNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf317.808 324.575 mo(FIG.1.Energyspectrameasuredinthebackward-angledetector)[4.98441 2.98486 6.47284 5.2023 4.4823 6.02094 5.47751 4.4823 3.98019 2.82614 4.4823 6.74097 3.48709 4.4823 3.98019 3.98016 2.49176 2.98486 6.22806 6.97495 3.98019 3.98019 3.48709 4.4823 2.98486 3.98019 6.74091 2.49176 6.73199 2.49176 4.4823 6.22806 4.48233 3.98016 3.98022 4.4823 6.38138 3.97842 2.98483 4.48233 2.98483 3.98019 4.4823 4.48236 2.4917 6.255 4.4823 3.98022 2.4917 3.98022 3.98022 2.49176 4.4823 0 ]xsh305.847 335.537 mo(at)[3.97839 0 ]xshNMSBEN+MTMI*1 [8.9664 0 0 -8.9664 0 0 ]msf315.271 335.537 mo(\265)shNMSBEK+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf319.212 336.878 mo(lab)[1.66415 2.65646 0 ]xsh%ADOBeginSubsetFont: KGFRMX+MTSY AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginNMSBEO+MTSY dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/equal <1C60D8A8C9B6C180329C486F337E2637810D8548FE31FA7E089C659A5FA4521910F4A25ADF4E42AFDF85360EA65D> |-/minus <1C60D8A8C9B6C18031E531D62CCFFB4F07592A446F7E1EF35039F4AC88C2> |-systemdict /gcheck known {setglobal} if end {end} ifendNMSBEO+MTSY /Encoding getdup 68 /equal putdup 161 /minus putpop%ADOEndSubsetFont
/NMSBEO+MTSY*1 [67{/.notdef}rp /plus /equal 92{/.notdef}rp /minus 5{/.notdef}rp /plusminus 9{/.notdef}rp /openbullet 9{/.notdef}rp /similar 68{/.notdef}rp]NMSBEO+MTSY nfNMSBEO+MTSY*1 [8.9664 0 0 -8.9664 0 0 ]msf329.508 335.537 mo(D)shNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf338.994 335.537 mo(163)[4.4823 4.4823 0 ]xshNMSBEO+MTSY*1 [5.9776 0 0 -5.9776 0 0 ]msf352.44 332.279 mo(\261)shNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf358.875 335.537 mo(forthereaction)[2.98486 4.4823 5.93118 2.49268 4.4823 6.93015 2.98483 3.98019 3.98019 3.98016 2.49176 2.49176 4.48233 0 ]xshNMSBEK+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf418.014 332.279 mo(16)[2.98819 0 ]xshNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf424.485 335.537 mo(O)shNMSBEO+MTSY*1 [8.9664 0 0 -8.9664 0 0 ]msf430.956 335.537 mo(C)shNMSBEK+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf437.958 332.279 mo(208)[2.98819 2.98822 0 ]xshNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf447.417 335.537 mo(Pbattheindicatedenergies.)[4.98441 7.43405 3.98019 5.43631 2.49179 4.4823 6.93011 2.49268 4.4823 4.4823 2.49176 3.98019 3.98016 2.49176 3.98019 7.44302 3.98016 4.4823 3.98022 2.82611 4.4823 2.49176 3.98016 3.48712 0 ]xsh305.846 346.499 mo(Thedottedlineshowsthebackground,thearrowsindicatethepeak)[5.47751 4.4823 6.59747 4.4823 4.48233 2.49176 2.49176 3.98016 7.10141 2.49176 2.49176 4.4823 6.59747 3.49249 4.4823 4.25723 6.47284 6.11157 2.49176 4.4823 6.59747 4.4823 3.98019 3.98019 4.4823 4.4823 2.98486 4.4823 4.4823 4.4823 4.4823 4.86874 2.49176 4.48233 6.5885 3.97839 2.98486 2.98486 4.25723 6.47287 6.11157 2.49176 4.4823 4.4823 2.49179 3.98019 3.98019 2.49173 6.60651 2.49353 4.4823 6.59747 4.4823 3.98022 3.98022 0 ]xsh305.846 357.453 mo(resultingfromexcitationofthe3)[2.98575 3.98108 3.48801 4.48318 2.49268 2.49265 2.49268 4.48318 6.72299 2.98575 2.98575 4.48322 9.21655 3.84299 4.48322 3.98108 2.49265 2.49268 3.98108 2.49268 2.49265 4.48318 6.74097 4.4823 5.22913 2.49265 4.48322 6.21909 0 ]xshNMSBEO+MTSY*1 [5.9776 0 0 -5.9776 0 0 ]msf424.008 354.203 mo(\241)shNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf431.415 357.452 mo(stateat2.614MeVin)[3.48801 2.49265 3.98108 2.49268 6.21909 3.97839 4.73425 4.48322 2.24158 4.48322 4.48322 6.73196 7.97119 3.98108 8.71268 2.49265 0 ]xshNMSBEK+Times-Roman*1 [5.9776 0 0 -5.9776 0 0 ]msf511.101 354.203 mo(208)[2.98822 2.98816 0 ]xshNMSBEK+Times-Roman*1 [8.9664 0 0 -8.9664 0 0 ]msf520.569 357.452 mo(Pb.)[4.98621 4.12189 0 ]xsh279.701 381.329 mo(034614-2)[4.48322 4.48318 4.48318 4.48322 4.48322 4.48318 2.98575 0 ]xshgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/NMSBEK+Times-Roman*1 uf/NMSBEK+Times-Roman uf/NCMBAA+Times-Roman uf/NMSBEN+MTMI*1 uf/NMSBEN+MTMI uf/NTEBAA+MTMI uf/NMSBEL+Times-Italic*1 uf/NMSBEL+Times-Italic uf/EJJQMX+Times-Italic uf/NMSBEM+Times-Bold*1 uf/NMSBEM+Times-Bold uf/MUFAAA+Times-Bold uf/NMSBEO+MTSY*1 uf/NMSBEO+MTSY uf/KGFRMX+MTSY ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
